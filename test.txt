python MyR_main.py
WARNING: Token 'ARC' defined, but not used
WARNING: Token 'CIRCLE' defined, but not used
WARNING: Token 'COLOR' defined, but not used
WARNING: Token 'LINE' defined, but not used
WARNING: Token 'NOT' defined, but not used
WARNING: Token 'PENDOWN' defined, but not used
WARNING: Token 'PENUP' defined, but not used
WARNING: Token 'POINT' defined, but not used
WARNING: Token 'THICKNESS' defined, but not used
WARNING: Token 'VOID' defined, but not used
WARNING: There are 10 unused tokens
Generating LALR tables
WARNING: 1 shift/reduce conflict
Processing node: ('program', 'functiontest', ('vars', [('int', ['x', 'y', 's', 'c', 'f'])]), [('function', 'int', 'add', [('int', 'a'), ('int', 'b')], ('vars', [('int', ['result'])]), [('assignment', 'result', ('binop', '+', 'a', 'b'))], ('return', 'result')), ('function', 
'int', 'subtract', [('int', 'a'), ('int', 'b')], ('vars', [('int', ['result'])]), [('assignment', 'result', ('binop', '-', 'a', 'b'))], ('return', 'result')), ('function', 'int', 'giveA', [('int', 'a')], [], '{', [])], ('main', [('assignment', 'x', '20'), ('assignment', 'y', '30'), ('assignment', 'c', ('function_call', 'add', ['x', 'y'])), ('assignment', 's', ('function_call', 'subtract', ['x', 'y'])), ('assignment', 'f', ('function_call', 'giveA', ['x'])), ('write', ['"sum is"', 'c']), ('write', ['"subtract is"', 's'])]))
Processing node: ('vars', [('int', ['x', 'y', 's', 'c', 'f'])])
Finished processing node: ('vars', [('int', ['x', 'y', 's', 'c', 'f'])])
Symbol table: {'x': 'int', 'y': 'int', 's': 'int', 'c': 'int', 'f': 'int'}
Processing node: ('function', 'int', 'add', [('int', 'a'), ('int', 'b')], ('vars', [('int', ['result'])]), [('assignment', 'result', ('binop', '+', 'a', 'b'))], ('return', 'result'))
Processing function node: ('function', 'int', 'add', [('int', 'a'), ('int', 'b')], ('vars', [('int', ['result'])]), [('assignment', 'result', ('binop', '+', 'a', 'b'))], ('return', 'result'))
Processing function node: ('function', 'int', 'add', [('int', 'a'), ('int', 'b')], ('vars', [('int', ['result'])]), [('assignment', 'result', ('binop', '+', 'a', 'b'))], ('return', 'result'))
Finished processing node: ('function', 'int', 'add', [('int', 'a'), ('int', 'b')], ('vars', [('int', ['result'])]), [('assignment', 'result', ('binop', '+', 'a', 'b'))], ('return', 'result'))
Function table: {'add': {'return_type': 'int', 'param_types': ['int', 'int']}}
Processing node: ('function', 'int', 'subtract', [('int', 'a'), ('int', 'b')], ('vars', [('int', ['result'])]), [('assignment', 'result', ('binop', '-', 'a', 'b'))], ('return', 'result'))
Processing function node: ('function', 'int', 'subtract', [('int', 'a'), ('int', 'b')], ('vars', [('int', ['result'])]), [('assignment', 
'result', ('binop', '-', 'a', 'b'))], ('return', 'result'))
Processing function node: ('function', 'int', 'subtract', [('int', 'a'), ('int', 'b')], ('vars', [('int', ['result'])]), [('assignment', 
'result', ('binop', '-', 'a', 'b'))], ('return', 'result'))
Finished processing node: ('function', 'int', 'subtract', [('int', 'a'), ('int', 'b')], ('vars', [('int', ['result'])]), [('assignment', 
'result', ('binop', '-', 'a', 'b'))], ('return', 'result'))
Function table: {'add': {'return_type': 'int', 'param_types': ['int', 'int']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 
'int']}}
Processing node: ('function', 'int', 'giveA', [('int', 'a')], [], '{', [])
Processing function node: ('function', 'int', 'giveA', [('int', 'a')], [], '{', [])
Processing function node: ('function', 'int', 'giveA', [('int', 'a')], [], '{', [])
Finished processing node: ('function', 'int', 'giveA', [('int', 'a')], [], '{', [])
Function table: {'add': {'return_type': 'int', 'param_types': ['int', 'int']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 
'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing node: ('main', [('assignment', 'x', '20'), ('assignment', 'y', '30'), ('assignment', 'c', ('function_call', 'add', ['x', 'y'])), ('assignment', 's', ('function_call', 'subtract', ['x', 'y'])), ('assignment', 'f', ('function_call', 'giveA', ['x'])), ('write', ['"sum is"', 'c']), ('write', ['"subtract is"', 's'])])
Processing node: [('assignment', 'x', '20'), ('assignment', 'y', '30'), ('assignment', 'c', ('function_call', 'add', ['x', 'y'])), ('assignment', 's', ('function_call', 'subtract', ['x', 'y'])), ('assignment', 'f', ('function_call', 'giveA', ['x'])), ('write', ['"sum is"', 
'c']), ('write', ['"subtract is"', 's'])]
Processing node: ('assignment', 'y', '30')
Processing node: ('assignment', 'c', ('function_call', 'add', ['x', 'y']))
Processing node: ('assignment', 's', ('function_call', 'subtract', ['x', 'y']))
Processing node: ('assignment', 'f', ('function_call', 'giveA', ['x']))
Processing node: ('write', ['"sum is"', 'c'])
Processing node: ['"sum is"', 'c']
Processing node: c
Processing node: ('write', ['"subtract is"', 's'])
Processing node: ['"subtract is"', 's']
Processing node: s
Processing node: ('vars', [('int', ['x', 'y', 's', 'c', 'f'])])
Finished processing node: ('vars', [('int', ['x', 'y', 's', 'c', 'f'])])
Symbol table: {'x': 'int', 'y': 'int', 's': 'int', 'c': 'int', 'f': 'int', 'a': 'int', 'b': 'int'}
Processing node: ('main', [('assignment', 'x', '20'), ('assignment', 'y', '30'), ('assignment', 'c', ('function_call', 'add', ['x', 'y'])), ('assignment', 's', ('function_call', 'subtract', ['x', 'y'])), ('assignment', 'f', ('function_call', 'giveA', ['x'])), ('write', ['"sum is"', 'c']), ('write', ['"subtract is"', 's'])])
Processing node: [('assignment', 'x', '20'), ('assignment', 'y', '30'), ('assignment', 'c', ('function_call', 'add', ['x', 'y'])), ('assignment', 's', ('function_call', 'subtract', ['x', 'y'])), ('assignment', 'f', ('function_call', 'giveA', ['x'])), ('write', ['"sum is"', 
'c']), ('write', ['"subtract is"', 's'])]
Processing node: ('assignment', 'y', '30')
Processing node: ('assignment', 'c', ('function_call', 'add', ['x', 'y']))
Processing node: ('assignment', 's', ('function_call', 'subtract', ['x', 'y']))
Processing node: ('assignment', 'f', ('function_call', 'giveA', ['x']))
Processing node: ('write', ['"sum is"', 'c'])
Processing node: ['"sum is"', 'c']
Processing node: c
Processing node: ('write', ['"subtract is"', 's'])
Processing node: ['"subtract is"', 's']
Processing node: s
Semantic analysis successful!
Symbol table: {'x': 'int', 'y': 'int', 's': 'int', 'c': 'int', 'f': 'int', 'a': 'int', 'b': 'int'}
Function table: {'add': {'return_type': 'int', 'param_types': ['int', 'int']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 
'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing node in generation: ('program', 'functiontest', ('vars', [('int', ['x', 'y', 's', 'c', 'f'])]), [('function', 'int', 'add', [('int', 'a'), ('int', 'b')], ('vars', [('int', ['result'])]), [('assignment', 'result', ('binop', '+', 'a', 'b'))], ('return', 'result')), ('function', 'int', 'subtract', [('int', 'a'), ('int', 'b')], ('vars', [('int', ['result'])]), [('assignment', 'result', ('binop', '-', 
'a', 'b'))], ('return', 'result')), ('function', 'int', 'giveA', [('int', 'a')], [], '{', [])], ('main', [('assignment', 'x', '20'), ('assignment', 'y', '30'), ('assignment', 'c', ('function_call', 'add', ['x', 'y'])), ('assignment', 's', ('function_call', 'subtract', ['x', 'y'])), ('assignment', 'f', ('function_call', 'giveA', ['x'])), ('write', ['"sum is"', 'c']), ('write', ['"subtract is"', 's'])]))      
Processing node in generation: ('vars', [('int', ['x', 'y', 's', 'c', 'f'])])
Processing node in generation: ('function', 'int', 'add', [('int', 'a'), ('int', 'b')], ('vars', [('int', ['result'])]), [('assignment', 
'result', ('binop', '+', 'a', 'b'))], ('return', 'result'))
Processing node in generation: ('assignment', 'result', ('binop', '+', 'a', 'b'))
Processing node in generation: ('binop', '+', 'a', 'b')
Processing node in generation: ('return', 'result')
Processing node in generation: ('vars', [('int', ['result'])])
Processing node in generation: ('function', 'int', 'subtract', [('int', 'a'), ('int', 'b')], ('vars', [('int', ['result'])]), [('assignment', 'result', ('binop', '-', 'a', 'b'))], ('return', 'result'))
Processing node in generation: ('assignment', 'result', ('binop', '-', 'a', 'b'))
Processing node in generation: ('binop', '-', 'a', 'b')
Processing node in generation: ('return', 'result')
Processing node in generation: ('vars', [('int', ['result'])])
Processing node in generation: ('function', 'int', 'giveA', [('int', 'a')], [], '{', [])
Processing node in generation: {
Processing node in generation: []
Error occurred during code generation: list index out of range
Error occurred during code generation: cannot unpack non-iterable NoneType object
Processing node in generation: ('main', [('assignment', 'x', '20'), ('assignment', 'y', '30'), ('assignment', 'c', ('function_call', 'add', ['x', 'y'])), ('assignment', 's', ('function_call', 'subtract', ['x', 'y'])), ('assignment', 'f', ('function_call', 'giveA', ['x'])), 
('write', ['"sum is"', 'c']), ('write', ['"subtract is"', 's'])])
Processing node in generation: ('assignment', 'x', '20')
Processing node in generation: ('assignment', 'y', '30')
Processing node in generation: ('assignment', 'c', ('function_call', 'add', ['x', 'y']))
Processing node in generation: ('function_call', 'add', ['x', 'y'])
Processing node in generation: x
Processing node in generation: y
Processing node in generation: ('assignment', 's', ('function_call', 'subtract', ['x', 'y']))
Processing node in generation: ('function_call', 'subtract', ['x', 'y'])
Processing node in generation: x
Processing node in generation: y
Processing node in generation: ('assignment', 'f', ('function_call', 'giveA', ['x']))
Processing node in generation: ('function_call', 'giveA', ['x'])
Processing node in generation: x
Processing node in generation: ('write', ['"sum is"', 'c'])
Processing node in generation: ('write', ['"subtract is"', 's'])
generated code:
DECLARE int x
DECLARE int y
DECLARE int s
DECLARE int c
DECLARE int f
FUNCTION int add(DECLARE int a, DECLARE int b)
DECLARE int result
T1 = a + b
result = T1
RETURN result
END FUNCTION
FUNCTION int subtract(DECLARE int a, DECLARE int b)
DECLARE int result
T2 = a - b
result = T2
RETURN result
END FUNCTION
x = 20
y = 30
param x
param y
T3 = callfunc add 2
c = T3
param x
param y
T4 = callfunc subtract 2
s = T4
param x
T5 = callfunc giveA 1
f = T5
param "sum is"
param c
call print, 2
param "subtract is"
param s
call print, 2
END PROGRAM
Running the generated code on the virtual machine:
Semantic error detected: 'start_pc'
Traceback (most recent call last):
  File "C:\Users\hulig\Documents\github\plyMyr\MyR_main.py", line 36, in <module>
    vm.run()
  File "C:\Users\hulig\Documents\github\plyMyr\virtual_machine.py", line 66, in run
    f"Setting program counter to {self.functions[func_name]['start_pc']}")
                                  ~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^
KeyError: 'start_pc'