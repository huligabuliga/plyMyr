Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}}
Processing assignment: x = 20
Processing assignment: y = 30
Processing assignment: T3 = callfunc add 2
Processing function call: callfunc add 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 6
Executing function add
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Assigned result = 30
Processing assignment: c = T3
Processing assignment: T4 = callfunc subtract 2
Processing function call: callfunc subtract 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 12
Executing function subtract
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Assigned result = 30
Processing assignment: s = T4
Processing assignment: T5 = callfunc giveA 1
Processing function call: callfunc giveA 1
Pushing 1 parameters onto the stack
Popping parameter from the stack
Setting program counter to 18
Executing function giveA
Reversed parameters: [20]
Assigned a = 20
Function's argument names: ['a']
Function's variables: {'a': 20}
Current vars after parameter assignment: {'a': 20}
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}}
Processing assignment: x = 20
Processing assignment: y = 30
Processing assignment: T3 = callfunc add 2
Processing function call: callfunc add 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 6
Executing function add
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Processing assignment: c = T3
Processing assignment: T4 = callfunc subtract 2
Processing function call: callfunc subtract 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 12
Executing function subtract
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Processing assignment: s = T4
Processing assignment: T5 = callfunc giveA 1
Processing function call: callfunc giveA 1
Pushing 1 parameters onto the stack
Popping parameter from the stack
Setting program counter to 18
Executing function giveA
Reversed parameters: [20]
Assigned a = 20
Function's argument names: ['a']
Function's variables: {'a': 20}
Current vars after parameter assignment: {'a': 20}
Processing assignment: f = T5
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}}
Processing assignment: x = 20
Processing assignment: y = 30
Processing assignment: T3 = callfunc add 2
Processing function call: callfunc add 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 6
Executing function add
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Processing assignment: c = T3
Processing assignment: T4 = callfunc subtract 2
Processing function call: callfunc subtract 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 12
Executing function subtract
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Processing assignment: s = T4
Processing assignment: T5 = callfunc giveA 1
Processing function call: callfunc giveA 1
Pushing 1 parameters onto the stack
Popping parameter from the stack
Setting program counter to 18
Executing function giveA
Reversed parameters: [20]
Assigned a = 20
Function's argument names: ['a']
Function's variables: {'a': 20}
Current vars after parameter assignment: {'a': 20}
Processing assignment: f = T5
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}}
Processing assignment: x = 20
Processing assignment: y = 30
Processing assignment: T3 = callfunc add 2
Processing function call: callfunc add 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 6
Executing function add
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Processing assignment: c = T3
Processing assignment: T4 = callfunc subtract 2
Processing function call: callfunc subtract 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 12
Executing function subtract
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Processing assignment: s = T4
Processing assignment: T5 = callfunc giveA 1
Processing function call: callfunc giveA 1
Pushing 1 parameters onto the stack
Popping parameter from the stack
Setting program counter to 18
Executing function giveA
Reversed parameters: [20]
Assigned a = 20
Function's argument names: ['a']
Function's variables: {'a': 20}
Current vars after parameter assignment: {'a': 20}
Processing assignment: f = T5
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}}
Processing assignment: x = 20
Processing assignment: y = 30
Processing assignment: T3 = callfunc add 2
Processing function call: callfunc add 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 6
Executing function add
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Processing assignment: c = T3
Processing assignment: T4 = callfunc subtract 2
Processing function call: callfunc subtract 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 12
Executing function subtract
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Processing assignment: s = T4
Processing assignment: T5 = callfunc giveA 1
Processing function call: callfunc giveA 1
Pushing 1 parameters onto the stack
Popping parameter from the stack
Setting program counter to 18
Executing function giveA
Reversed parameters: [20]
Assigned a = 20
Function's argument names: ['a']
Function's variables: {'a': 20}
Current vars after parameter assignment: {'a': 20}
Processing assignment: f = T5
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}}
Processing assignment: x = 20
Processing assignment: y = 30
Processing assignment: T3 = callfunc add 2
Processing function call: callfunc add 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 6
Executing function add
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Processing assignment: c = T3
Processing assignment: T4 = callfunc subtract 2
Processing function call: callfunc subtract 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 12
Executing function subtract
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Processing assignment: s = T4
Processing assignment: T5 = callfunc giveA 1
Processing function call: callfunc giveA 1
Pushing 1 parameters onto the stack
Popping parameter from the stack
Setting program counter to 18
Executing function giveA
Reversed parameters: [20]
Assigned a = 20
Function's argument names: ['a']
Function's variables: {'a': 20}
Current vars after parameter assignment: {'a': 20}
Processing assignment: f = T5
Processing assignment: x = 10
Processing assignment: y = 10
Processing assignment: i = 1.023
Processing assignment: k = 1.05
Processing assignment: z = false
Processing assignment: T1 = k * i
Processing assignment: game = T1
Processing assignment: T2 = x + y
Processing assignment: d = T2
Processing assignment: T3 = d + y
Processing assignment: d = T3
Processing assignment: g = 20
Processing assignment: l = 30
Processing assignment: u = 70
Processing assignment: i = 1
Processing assignment: T0 = i > 10
Processing assignment: T4 = i + 3
Processing assignment: i = T4
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T4 = i + 3
Processing assignment: i = T4
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T4 = i + 3
Processing assignment: i = T4
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T4 = i + 3
Processing assignment: i = T4
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = y < 20
Processing assignment: T7 = y + 2
Processing assignment: y = T7
Processing assignment: T8 = x < 20
Processing assignment: T9 = x + 10
Processing assignment: x = T9
Processing assignment: T8 = x < 20
Processing assignment: T6 = y < 20
Processing assignment: T7 = y + 2
Processing assignment: y = T7
Processing assignment: T8 = x < 20
Processing assignment: T6 = y < 20
Processing assignment: T7 = y + 2
Processing assignment: y = T7
Processing assignment: T8 = x < 20
Processing assignment: T6 = y < 20
Processing assignment: T7 = y + 2
Processing assignment: y = T7
Processing assignment: T8 = x < 20
Processing assignment: T6 = y < 20
Processing assignment: T7 = y + 2
Processing assignment: y = T7
Processing assignment: T8 = x < 20
Processing assignment: T6 = y < 20
Processing assignment: T10 = k == 1.05
Processing assignment: x = 10
Processing assignment: y = 10
Processing assignment: i = 1.023
Processing assignment: k = 1.05
Processing assignment: z = false
Processing assignment: T1 = k * i
Processing assignment: game = T1
Processing assignment: T2 = x + y
Processing assignment: d = T2
Processing assignment: T3 = d + y
Processing assignment: d = T3
Processing assignment: g = 20
Processing assignment: l = 30
Processing assignment: u = 70
Processing assignment: i = 1
Processing assignment: T0 = i > 10
Processing assignment: T4 = i + 3
Processing assignment: i = T4
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T4 = i + 3
Processing assignment: i = T4
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T4 = i + 3
Processing assignment: i = T4
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T4 = i + 3
Processing assignment: i = T4
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T5 = j + 3
Processing assignment: j = T5
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = y < 20
Processing assignment: T7 = y + 2
Processing assignment: y = T7
Processing assignment: T8 = x < 20
Processing assignment: T9 = x + 10
Processing assignment: x = T9
Processing assignment: T8 = x < 20
Processing assignment: T6 = y < 20
Processing assignment: T7 = y + 2
Processing assignment: y = T7
Processing assignment: T8 = x < 20
Processing assignment: T6 = y < 20
Processing assignment: T7 = y + 2
Processing assignment: y = T7
Processing assignment: T8 = x < 20
Processing assignment: T6 = y < 20
Processing assignment: T7 = y + 2
Processing assignment: y = T7
Processing assignment: T8 = x < 20
Processing assignment: T6 = y < 20
Processing assignment: T7 = y + 2
Processing assignment: y = T7
Processing assignment: T8 = x < 20
Processing assignment: T6 = y < 20
Processing assignment: T10 = k == 1.05
Processing assignment: x = 10
Processing assignment: y = 10
Processing assignment: i = 1.023
Processing assignment: k = 1.05
Processing assignment: z = false
Processing assignment: T1 = k * i
Processing assignment: game = T1
Processing assignment: T2 = x + y
Processing assignment: d = T2
Processing assignment: T3 = d + y
Processing assignment: d = T3
Processing assignment: g = 20
Processing assignment: l = 30
Processing assignment: u = 70
Processing assignment: T4 = g + l
Processing assignment: T5 = T4 + u
Processing assignment: f = T5
Processing assignment: i = 1
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T11 = x + 10
Processing assignment: x = T11
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T12 = k == 1.05
Processing assignment: x = 10
Processing assignment: y = 10
Processing assignment: i = 1.023
Processing assignment: k = 1.05
Processing assignment: z = false
Processing assignment: T1 = k * i
Processing assignment: game = T1
Processing assignment: T2 = x + y
Processing assignment: d = T2
Processing assignment: T3 = d + y
Processing assignment: d = T3
Processing assignment: g = 20
Processing assignment: l = 30
Processing assignment: u = 70
Processing assignment: T4 = g + l
Processing assignment: T5 = T4 + u
Processing assignment: f = T5
Processing assignment: i = 1
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T11 = x + 10
Processing assignment: x = T11
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T12 = k == 1.05
Processing assignment: x = 10
Processing assignment: y = 10
Processing assignment: i = 1.023
Processing assignment: k = 1.05
Processing assignment: z = false
Processing assignment: T1 = k * i
Processing assignment: game = T1
Processing assignment: T2 = x + y
Processing assignment: d = T2
Processing assignment: T3 = d + y
Processing assignment: d = T3
Processing assignment: g = 20
Processing assignment: l = 30
Processing assignment: u = 70
Processing assignment: T4 = g * l
Processing assignment: T5 = T4 + u
Processing assignment: f = T5
Processing assignment: i = 1
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T11 = x + 10
Processing assignment: x = T11
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T12 = k == 1.05
Processing assignment: x = 10
Processing assignment: y = 10
Processing assignment: i = 1.023
Processing assignment: k = 1.05
Processing assignment: z = false
Processing assignment: T1 = k * i
Processing assignment: game = T1
Processing assignment: T2 = x + y
Processing assignment: d = T2
Processing assignment: T3 = d + y
Processing assignment: d = T3
Processing assignment: g = 20
Processing assignment: l = 30
Processing assignment: u = 70
Processing assignment: T4 = g * l
Processing assignment: T5 = T4 + u
Processing assignment: f = T5
Processing assignment: i = 1
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T11 = x + 10
Processing assignment: x = T11
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T12 = k == 1.05
Processing assignment: x = 10
Processing assignment: y = 10
Processing assignment: i = 1.023
Processing assignment: k = 1.05
Processing assignment: z = false
Processing assignment: T1 = k * i
Processing assignment: game = T1
Processing assignment: T2 = x + y
Processing assignment: d = T2
Processing assignment: T3 = d + y
Processing assignment: d = T3
Processing assignment: g = 20
Processing assignment: l = 30
Processing assignment: u = 70
Processing assignment: T4 = g * l
Processing assignment: T5 = T4 + u
Processing assignment: f = T5
Processing assignment: i = 1
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T11 = x + 10
Processing assignment: x = T11
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T12 = k == 1.05
Processing assignment: x = 10
Processing assignment: y = 10
Processing assignment: i = 1.023
Processing assignment: k = 1.05
Processing assignment: z = false
Processing assignment: T1 = k * i
Processing assignment: game = T1
Processing assignment: T2 = x + y
Processing assignment: d = T2
Processing assignment: T3 = d + y
Processing assignment: d = T3
Processing assignment: g = 20
Processing assignment: l = 30
Processing assignment: u = 70
Processing assignment: T4 = g * l
Processing assignment: T5 = T4 + u
Processing assignment: f = T5
Processing assignment: i = 1
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T11 = x + 10
Processing assignment: x = T11
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T12 = k == 1.05
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}}
Processing assignment: x = 20
Processing assignment: y = 30
Processing assignment: T3 = callfunc add 2
Processing function call: callfunc add 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 6
Executing function add
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Processing assignment: c = T3
Processing assignment: T4 = callfunc subtract 2
Processing function call: callfunc subtract 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 12
Executing function subtract
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Processing assignment: s = T4
Processing assignment: T5 = callfunc giveA 1
Processing function call: callfunc giveA 1
Pushing 1 parameters onto the stack
Popping parameter from the stack
Setting program counter to 18
Executing function giveA
Reversed parameters: [20]
Assigned a = 20
Function's argument names: ['a']
Function's variables: {'a': 20}
Current vars after parameter assignment: {'a': 20}
Processing assignment: f = T5
Processing assignment: x = 10
Processing assignment: y = 10
Processing assignment: i = 1.023
Processing assignment: k = 1.05
Processing assignment: z = false
Processing assignment: T1 = k * i
Processing assignment: game = T1
Processing assignment: T2 = x + y
Processing assignment: d = T2
Processing assignment: T3 = d + y
Processing assignment: d = T3
Processing assignment: g = 20
Processing assignment: l = 30
Processing assignment: u = 70
Processing assignment: T4 = g * l
Processing assignment: T5 = T4 + u
Processing assignment: f = T5
Processing assignment: i = 1
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T11 = x + 10
Processing assignment: x = T11
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T12 = k == 1.05
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}}
Processing assignment: x = 20
Processing assignment: y = 30
Processing assignment: T3 = callfunc add 2
Processing function call: callfunc add 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 6
Executing function add
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Processing assignment: c = T3
Processing assignment: T4 = callfunc subtract 2
Processing function call: callfunc subtract 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 12
Executing function subtract
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Processing assignment: s = T4
Processing assignment: T5 = callfunc giveA 1
Processing function call: callfunc giveA 1
Pushing 1 parameters onto the stack
Popping parameter from the stack
Setting program counter to 18
Executing function giveA
Reversed parameters: [20]
Assigned a = 20
Function's argument names: ['a']
Function's variables: {'a': 20}
Current vars after parameter assignment: {'a': 20}
Processing assignment: f = T5
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}}
Processing assignment: x = 20
Processing assignment: y = 30
Processing assignment: T3 = callfunc add 2
Processing function call: callfunc add 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 6
Executing function add
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Processing assignment: c = T3
Processing assignment: T4 = callfunc subtract 2
Processing function call: callfunc subtract 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 12
Executing function subtract
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Processing assignment: s = T4
Processing assignment: T5 = callfunc giveA 1
Processing function call: callfunc giveA 1
Pushing 1 parameters onto the stack
Popping parameter from the stack
Setting program counter to 18
Executing function giveA
Reversed parameters: [20]
Assigned a = 20
Function's argument names: ['a']
Function's variables: {'a': 20}
Current vars after parameter assignment: {'a': 20}
Processing assignment: f = T5
Processing assignment: x = 10
Processing assignment: y = 10
Processing assignment: i = 1.023
Processing assignment: k = 1.05
Processing assignment: z = false
Processing assignment: T1 = k * i
Processing assignment: game = T1
Processing assignment: T2 = x + y
Processing assignment: d = T2
Processing assignment: T3 = d + y
Processing assignment: d = T3
Processing assignment: g = 20
Processing assignment: l = 30
Processing assignment: u = 70
Processing assignment: T4 = g * l
Processing assignment: T5 = T4 + u
Processing assignment: f = T5
Processing assignment: i = 1
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T11 = x + 10
Processing assignment: x = T11
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T12 = k == 1.05
Processing assignment: x = 10
Processing assignment: y = 10
Processing assignment: i = 1.023
Processing assignment: k = 1.05
Processing assignment: z = false
Processing assignment: T1 = k * i
Processing assignment: game = T1
Processing assignment: T2 = x + y
Processing assignment: d = T2
Processing assignment: T3 = d + y
Processing assignment: d = T3
Processing assignment: g = 20
Processing assignment: l = 30
Processing assignment: u = 70
Processing assignment: T4 = g * l
Processing assignment: T5 = T4 + u
Processing assignment: f = T5
Processing assignment: i = 1
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T11 = x + 10
Processing assignment: x = T11
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T12 = k == 1.05
Processing assignment: d = 500
Processing assignment: x = 10
Processing assignment: y = 10
Processing assignment: i = 1.023
Processing assignment: k = 1.05
Processing assignment: z = false
Processing assignment: T1 = k * i
Processing assignment: game = T1
Processing assignment: T2 = x + y
Processing assignment: d = T2
Processing assignment: T3 = d + y
Processing assignment: d = T3
Processing assignment: g = 20
Processing assignment: l = 30
Processing assignment: u = 70
Processing assignment: T4 = g * l
Processing assignment: T5 = T4 + u
Processing assignment: f = T5
Processing assignment: i = 1
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T11 = x + 10
Processing assignment: x = T11
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T12 = k == 1.05
Processing assignment: d = 500
Processing assignment: x = 10
Processing assignment: y = 10
Processing assignment: i = 1.023
Processing assignment: k = 1.05
Processing assignment: z = false
Processing assignment: T1 = k * i
Processing assignment: game = T1
Processing assignment: T2 = x + y
Processing assignment: d = T2
Processing assignment: T3 = d + y
Processing assignment: d = T3
Processing assignment: g = 20
Processing assignment: l = 30
Processing assignment: u = 70
Processing assignment: T4 = g * l
Processing assignment: T5 = T4 + u
Processing assignment: f = T5
Processing assignment: i = 1
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T11 = x + 10
Processing assignment: x = T11
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T12 = k == 1.05
Processing assignment: d = 500
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}}
Processing assignment: x = 20
Processing assignment: y = 30
Processing assignment: T3 = callfunc add 2
Processing function call: callfunc add 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 6
Executing function add
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Processing assignment: c = T3
Processing assignment: T4 = callfunc subtract 2
Processing function call: callfunc subtract 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Setting program counter to 12
Executing function subtract
Reversed parameters: [20, 30]
Assigned a = 20
Assigned b = 30
Function's argument names: ['a', 'b']
Function's variables: {'a': 20, 'b': 30}
Assigned result = 20
Current vars after parameter assignment: {'a': 20, 'b': 30, 'result': 20}
Processing assignment: s = T4
Processing assignment: T5 = callfunc giveA 1
Processing function call: callfunc giveA 1
Pushing 1 parameters onto the stack
Popping parameter from the stack
Setting program counter to 18
Executing function giveA
Reversed parameters: [20]
Assigned a = 20
Function's argument names: ['a']
Function's variables: {'a': 20}
Current vars after parameter assignment: {'a': 20}
Processing assignment: f = T5
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}}
Processing function definition: FUNCTION int giveOne()
Processing assignment: x = 10
Processing assignment: y = 10
Processing assignment: i = 1.023
Processing assignment: k = 1.05
Processing assignment: z = false
Processing assignment: T1 = k * i
Processing assignment: game = T1
Processing assignment: T2 = x + y
Processing assignment: d = T2
Processing assignment: T3 = d + y
Processing assignment: d = T3
Processing assignment: g = 20
Processing assignment: l = 30
Processing assignment: u = 70
Processing assignment: T4 = g * l
Processing assignment: T5 = T4 + u
Processing assignment: f = T5
Processing assignment: i = 1
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T11 = x + 10
Processing assignment: x = T11
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T12 = k == 1.05
Processing assignment: d = 500
Processing assignment: x = 20
Processing assignment: y = 30
Processing assignment: T1 = callfunc add 2
Processing function call: callfunc add 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Processing assignment: x = 20
Processing assignment: y = 30
Processing assignment: T1 = callfunc add 2
Processing function call: callfunc add 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing assignment: num = 5
Processing assignment: T2 = callfunc factorial 1
Processing function call: callfunc factorial 1
Pushing 1 parameters onto the stack
Popping parameter from the stack
Processing function definition: FUNCTION int factorial(DECLARE int n)
Extracted parameter names: ['n']
Updated self.functions: {'factorial': {'return_type': 'int', 'start_pc': 2, 'params': ['n']}}
Processing assignment: num = 5
Processing assignment: T2 = callfunc factorial 1
Processing function call: callfunc factorial 1
Pushing 1 parameters onto the stack
Popping parameter from the stack
Setting program counter to 2
Executing function factorial
Reversed parameters: [5]
Assigned n = 5
Function's argument names: ['n']
Function's variables: {'n': 5}
Assigned result = 5
Current vars after parameter assignment: {'n': 5, 'result': 5}
Processing function definition: FUNCTION int factorial(DECLARE int n)
Extracted parameter names: ['n']
Updated self.functions: {'factorial': {'return_type': 'int', 'start_pc': 2, 'params': ['n']}}
Processing assignment: num = 5
Processing assignment: T2 = callfunc factorial 1
Processing function call: callfunc factorial 1
Pushing 1 parameters onto the stack
Popping parameter from the stack
Setting program counter to 2
Executing function factorial
Reversed parameters: [5]
Assigned n = 5
Function's argument names: ['n']
Function's variables: {'n': 5}
Assigned result = 5
Current vars after parameter assignment: {'n': 5, 'result': 5}
Processing function definition: FUNCTION int factorial(DECLARE int n)
Extracted parameter names: ['n']
Updated self.functions: {'factorial': {'return_type': 'int', 'start_pc': 2, 'params': ['n']}}
Processing assignment: num = 5
Processing assignment: T5 = callfunc factorial 1
Processing function call: callfunc factorial 1
Pushing 1 parameters onto the stack
Popping parameter from the stack
Setting program counter to 2
Executing function factorial
Reversed parameters: [5]
Assigned n = 5
Function's argument names: ['n']
Function's variables: {'n': 5}
Assigned result = 5
Current vars after parameter assignment: {'n': 5, 'result': 5}
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int factorial(DECLARE int n)
Extracted parameter names: ['n']
Updated self.functions: {'factorial': {'return_type': 'int', 'start_pc': 2, 'params': ['n']}}
Processing assignment: num = 5
Processing assignment: T5 = callfunc factorial 1
Processing function call: callfunc factorial 1
Pushing 1 parameters onto the stack
Popping parameter from the stack
Setting program counter to 2
Executing function factorial
Reversed parameters: [5]
Assigned n = 5
Function's argument names: ['n']
Function's variables: {'n': 5}
Assigned result = 5
Current vars after parameter assignment: {'n': 5, 'result': 5}
Processing function definition: FUNCTION int factorial(DECLARE int n)
Extracted parameter names: ['n']
Updated self.functions: {'factorial': {'return_type': 'int', 'start_pc': 2, 'params': ['n']}}
Processing assignment: num = 5
Processing assignment: T5 = callfunc factorial 1
Processing function call: callfunc factorial 1
Pushing 1 parameters onto the stack
Popping parameter from the stack
Setting program counter to 2
Executing function factorial
Reversed parameters: [5]
Assigned n = 5
Function's argument names: ['n']
Function's variables: {'n': 5}
Assigned result = 5
Current vars after parameter assignment: {'n': 5, 'result': 5}
Processing function definition: FUNCTION int factorial(DECLARE int n)
Extracted parameter names: ['n']
Updated self.functions: {'factorial': {'return_type': 'int', 'start_pc': 2, 'params': ['n']}}
Processing assignment: num = 5
Processing assignment: T5 = callfunc factorial 1
Processing function call: callfunc factorial 1
Pushing 1 parameters onto the stack
Popping parameter from the stack
Setting program counter to 2
Executing function factorial
Reversed parameters: [5]
Assigned n = 5
Function's argument names: ['n']
Function's variables: {'n': 5}
Assigned result = 5
Current vars after parameter assignment: {'n': 5, 'result': 5}
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing assignment: x = 10
Processing assignment: y = 10
Processing assignment: i = 1.023
Processing assignment: k = 1.05
Processing assignment: z = false
Processing assignment: T1 = k * i
Processing assignment: game = T1
Processing assignment: T2 = x + y
Processing assignment: d = T2
Processing assignment: T3 = d + y
Processing assignment: d = T3
Processing assignment: g = 20
Processing assignment: l = 30
Processing assignment: u = 70
Processing assignment: T4 = g * l
Processing assignment: T5 = T4 + u
Processing assignment: f = T5
Processing assignment: i = 1
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T6 = i + 3
Processing assignment: i = T6
Processing assignment: j = 1
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T7 = j + 3
Processing assignment: j = T7
Processing assignment: T0 = j > 20
Processing assignment: T0 = i > 10
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T11 = x + 10
Processing assignment: x = T11
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T9 = y + 2
Processing assignment: y = T9
Processing assignment: T10 = x < 20
Processing assignment: T8 = y < 20
Processing assignment: T12 = k == 1.05
Processing assignment: d = 500
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing assignment: x = 20
Processing assignment: y = 30
Processing assignment: T10 = callfunc add 2
Processing function call: callfunc add 2
Pushing 2 parameters onto the stack
Popping parameter from the stack
Popping parameter from the stack
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 12, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 18, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int add(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'param_types': ['int', 'int']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int subtract(DECLARE int a, DECLARE int b)
Extracted parameter names: ['a', 'b']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 13, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'param_types': ['int']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveA(DECLARE int a)
Extracted parameter names: ['a']
Updated self.functions: {'add': {'return_type': 'int', 'start_pc': 6, 'params': ['a', 'b']}, 'subtract': {'return_type': 'int', 'start_pc': 13, 'params': ['a', 'b']}, 'giveA': {'return_type': 'int', 'start_pc': 20, 'params': ['a']}, 'giveOne': {'return_type': 'int', 'param_types': []}, 'checkGreater': {'return_type': 'int', 'param_types': ['int', 'int']}, 'max': {'return_type': 'int', 'param_types': ['int', 'int']}, 'factorial': {'return_type': 'int', 'param_types': ['int']}, 'returnFloat': {'return_type': 'float', 'param_types': ['float']}, 'isGreaterThanTen': {'return_type': 'bool', 'param_types': ['int']}, 'printMessage': {'return_type': 'void', 'param_types': []}}
Processing function definition: FUNCTION int giveOne()
Processing function definition: FUNCTION int factorial(DECLARE int n)
Extracted parameter names: ['n']
Updated self.functions: {'factorial': {'return_type': 'int', 'start_pc': 2, 'params': ['n']}}
Processing assignment: num = 5
Processing assignment: T5 = callfunc factorial 1
Processing function call: callfunc factorial 1
Pushing 1 parameters onto the stack
Popping parameter from the stack
Setting program counter to 2
Executing function factorial
Reversed parameters: [5]
Assigned n = 5
Function's argument names: ['n']
Function's variables: {'n': 5}
Assigned result = 5
Current vars after parameter assignment: {'n': 5, 'result': 5}
