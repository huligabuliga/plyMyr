Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ARC
    BOOL
    BOOLEAN
    CIRCLE
    COLOR
    EQ
    GE
    GT
    LE
    LINE
    LT
    NE
    NOT
    OR
    PENDOWN
    PENUP
    POINT
    RETURN
    THEN
    THICKNESS
    VOID

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON vars function_list main_function
Rule 2     vars -> VARS var_list
Rule 3     var_list -> var_list type id_list SEMICOLON
Rule 4     var_list -> type id_list SEMICOLON
Rule 5     type -> INT
Rule 6     type -> FLOAT
Rule 7     type -> CHAR
Rule 8     id_list -> id_list COMMA ID
Rule 9     id_list -> ID
Rule 10    function_list -> function_list function
Rule 11    function_list -> empty
Rule 12    function -> FUNCTION type ID LPAREN param_list RPAREN SEMICOLON vars statement_list RBRACE
Rule 13    param_list -> param_list COMMA type ID
Rule 14    param_list -> type ID
Rule 15    main_function -> MAIN LPAREN RPAREN LBRACE statement_list RBRACE
Rule 16    statement_list -> statement_list statement
Rule 17    statement_list -> empty
Rule 18    statement -> assignment SEMICOLON
Rule 19    statement -> function_call SEMICOLON
Rule 20    statement -> read_statement SEMICOLON
Rule 21    statement -> write_statement SEMICOLON
Rule 22    statement -> if_statement
Rule 23    statement -> while_statement
Rule 24    statement -> for_statement
Rule 25    assignment -> ID ASSIGN expression
Rule 26    assignment -> ID LBRACKET expression RBRACKET ASSIGN expression
Rule 27    function_call -> ID LPAREN arg_list RPAREN
Rule 28    arg_list -> arg_list COMMA expression
Rule 29    arg_list -> expression
Rule 30    read_statement -> READ id_list
Rule 31    write_statement -> WRITE LPAREN write_list RPAREN
Rule 32    write_list -> write_list COMMA expression
Rule 33    write_list -> STRING
Rule 34    write_list -> ID COMMA expression
Rule 35    if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE
Rule 36    if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
Rule 37    while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
Rule 38    for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE
Rule 39    expression -> expression PLUS term
Rule 40    expression -> expression MINUS term
Rule 41    expression -> term
Rule 42    expression -> STRING
Rule 43    term -> term TIMES factor
Rule 44    term -> term DIVIDE factor
Rule 45    term -> factor
Rule 46    factor -> LPAREN expression RPAREN
Rule 47    factor -> ID
Rule 48    factor -> ID LBRACKET expression RBRACKET
Rule 49    factor -> INTEGER
Rule 50    factor -> FLOATING_POINT
Rule 51    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ARC                  : 
ASSIGN               : 25 26
BOOL                 : 
BOOLEAN              : 
CHAR                 : 7
CIRCLE               : 
COLOR                : 
COMMA                : 8 13 28 32 34
DIVIDE               : 44
DO                   : 37 38
ELSE                 : 36
EQ                   : 
FLOAT                : 6
FLOATING_POINT       : 50
FOR                  : 38
FUNCTION             : 12
GE                   : 
GT                   : 
ID                   : 1 8 9 12 13 14 25 26 27 34 38 47 48
IF                   : 35 36
INT                  : 5
INTEGER              : 49
LBRACE               : 15 35 36 36 37 38
LBRACKET             : 26 38 48
LE                   : 
LINE                 : 
LPAREN               : 12 15 27 31 35 36 37 46
LT                   : 
MAIN                 : 15
MINUS                : 40
NE                   : 
NOT                  : 
OR                   : 
PENDOWN              : 
PENUP                : 
PLUS                 : 39
POINT                : 
PROGRAM              : 1
RBRACE               : 12 15 35 36 36 37 38
RBRACKET             : 26 38 48
READ                 : 30
RETURN               : 
RPAREN               : 12 15 27 31 35 36 37 46
SEMICOLON            : 1 3 4 12 18 19 20 21
STRING               : 33 42
THEN                 : 
THICKNESS            : 
TIMES                : 43
TO                   : 38
VARS                 : 2
VOID                 : 
WHILE                : 37
WRITE                : 31
error                : 

Nonterminals, with rules where they appear

arg_list             : 27 28
assignment           : 18
empty                : 11 17
expression           : 25 26 26 28 29 32 34 35 36 37 38 38 39 40 46 48
factor               : 43 44 45
for_statement        : 24
function             : 10
function_call        : 19
function_list        : 1 10
id_list              : 3 4 8 30
if_statement         : 22
main_function        : 1
param_list           : 12 13
program              : 0
read_statement       : 20
statement            : 16
statement_list       : 12 15 16 35 36 36 37 38
term                 : 39 40 41 43 44
type                 : 3 4 12 13 14
var_list             : 2 3
vars                 : 1 12
while_statement      : 23
write_list           : 31 32
write_statement      : 21

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON vars function_list main_function

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON vars function_list main_function

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON vars function_list main_function

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . vars function_list main_function
    (2) vars -> . VARS var_list

    VARS            shift and go to state 6

    vars                           shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMICOLON vars . function_list main_function
    (10) function_list -> . function_list function
    (11) function_list -> . empty
    (51) empty -> .

    MAIN            reduce using rule 51 (empty -> .)
    FUNCTION        reduce using rule 51 (empty -> .)

    function_list                  shift and go to state 7
    empty                          shift and go to state 8

state 6

    (2) vars -> VARS . var_list
    (3) var_list -> . var_list type id_list SEMICOLON
    (4) var_list -> . type id_list SEMICOLON
    (5) type -> . INT
    (6) type -> . FLOAT
    (7) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13

    var_list                       shift and go to state 9
    type                           shift and go to state 10

state 7

    (1) program -> PROGRAM ID SEMICOLON vars function_list . main_function
    (10) function_list -> function_list . function
    (15) main_function -> . MAIN LPAREN RPAREN LBRACE statement_list RBRACE
    (12) function -> . FUNCTION type ID LPAREN param_list RPAREN SEMICOLON vars statement_list RBRACE

    MAIN            shift and go to state 16
    FUNCTION        shift and go to state 17

    main_function                  shift and go to state 14
    function                       shift and go to state 15

state 8

    (11) function_list -> empty .

    MAIN            reduce using rule 11 (function_list -> empty .)
    FUNCTION        reduce using rule 11 (function_list -> empty .)


state 9

    (2) vars -> VARS var_list .
    (3) var_list -> var_list . type id_list SEMICOLON
    (5) type -> . INT
    (6) type -> . FLOAT
    (7) type -> . CHAR

    MAIN            reduce using rule 2 (vars -> VARS var_list .)
    FUNCTION        reduce using rule 2 (vars -> VARS var_list .)
    RBRACE          reduce using rule 2 (vars -> VARS var_list .)
    ID              reduce using rule 2 (vars -> VARS var_list .)
    READ            reduce using rule 2 (vars -> VARS var_list .)
    WRITE           reduce using rule 2 (vars -> VARS var_list .)
    IF              reduce using rule 2 (vars -> VARS var_list .)
    WHILE           reduce using rule 2 (vars -> VARS var_list .)
    FOR             reduce using rule 2 (vars -> VARS var_list .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13

    type                           shift and go to state 18

state 10

    (4) var_list -> type . id_list SEMICOLON
    (8) id_list -> . id_list COMMA ID
    (9) id_list -> . ID

    ID              shift and go to state 20

    id_list                        shift and go to state 19

state 11

    (5) type -> INT .

    ID              reduce using rule 5 (type -> INT .)


state 12

    (6) type -> FLOAT .

    ID              reduce using rule 6 (type -> FLOAT .)


state 13

    (7) type -> CHAR .

    ID              reduce using rule 7 (type -> CHAR .)


state 14

    (1) program -> PROGRAM ID SEMICOLON vars function_list main_function .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON vars function_list main_function .)


state 15

    (10) function_list -> function_list function .

    MAIN            reduce using rule 10 (function_list -> function_list function .)
    FUNCTION        reduce using rule 10 (function_list -> function_list function .)


state 16

    (15) main_function -> MAIN . LPAREN RPAREN LBRACE statement_list RBRACE

    LPAREN          shift and go to state 21


state 17

    (12) function -> FUNCTION . type ID LPAREN param_list RPAREN SEMICOLON vars statement_list RBRACE
    (5) type -> . INT
    (6) type -> . FLOAT
    (7) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13

    type                           shift and go to state 22

state 18

    (3) var_list -> var_list type . id_list SEMICOLON
    (8) id_list -> . id_list COMMA ID
    (9) id_list -> . ID

    ID              shift and go to state 20

    id_list                        shift and go to state 23

state 19

    (4) var_list -> type id_list . SEMICOLON
    (8) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 24
    COMMA           shift and go to state 25


state 20

    (9) id_list -> ID .

    SEMICOLON       reduce using rule 9 (id_list -> ID .)
    COMMA           reduce using rule 9 (id_list -> ID .)


state 21

    (15) main_function -> MAIN LPAREN . RPAREN LBRACE statement_list RBRACE

    RPAREN          shift and go to state 26


state 22

    (12) function -> FUNCTION type . ID LPAREN param_list RPAREN SEMICOLON vars statement_list RBRACE

    ID              shift and go to state 27


state 23

    (3) var_list -> var_list type id_list . SEMICOLON
    (8) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 28
    COMMA           shift and go to state 25


state 24

    (4) var_list -> type id_list SEMICOLON .

    INT             reduce using rule 4 (var_list -> type id_list SEMICOLON .)
    FLOAT           reduce using rule 4 (var_list -> type id_list SEMICOLON .)
    CHAR            reduce using rule 4 (var_list -> type id_list SEMICOLON .)
    MAIN            reduce using rule 4 (var_list -> type id_list SEMICOLON .)
    FUNCTION        reduce using rule 4 (var_list -> type id_list SEMICOLON .)
    RBRACE          reduce using rule 4 (var_list -> type id_list SEMICOLON .)
    ID              reduce using rule 4 (var_list -> type id_list SEMICOLON .)
    READ            reduce using rule 4 (var_list -> type id_list SEMICOLON .)
    WRITE           reduce using rule 4 (var_list -> type id_list SEMICOLON .)
    IF              reduce using rule 4 (var_list -> type id_list SEMICOLON .)
    WHILE           reduce using rule 4 (var_list -> type id_list SEMICOLON .)
    FOR             reduce using rule 4 (var_list -> type id_list SEMICOLON .)


state 25

    (8) id_list -> id_list COMMA . ID

    ID              shift and go to state 29


state 26

    (15) main_function -> MAIN LPAREN RPAREN . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 30


state 27

    (12) function -> FUNCTION type ID . LPAREN param_list RPAREN SEMICOLON vars statement_list RBRACE

    LPAREN          shift and go to state 31


state 28

    (3) var_list -> var_list type id_list SEMICOLON .

    INT             reduce using rule 3 (var_list -> var_list type id_list SEMICOLON .)
    FLOAT           reduce using rule 3 (var_list -> var_list type id_list SEMICOLON .)
    CHAR            reduce using rule 3 (var_list -> var_list type id_list SEMICOLON .)
    MAIN            reduce using rule 3 (var_list -> var_list type id_list SEMICOLON .)
    FUNCTION        reduce using rule 3 (var_list -> var_list type id_list SEMICOLON .)
    RBRACE          reduce using rule 3 (var_list -> var_list type id_list SEMICOLON .)
    ID              reduce using rule 3 (var_list -> var_list type id_list SEMICOLON .)
    READ            reduce using rule 3 (var_list -> var_list type id_list SEMICOLON .)
    WRITE           reduce using rule 3 (var_list -> var_list type id_list SEMICOLON .)
    IF              reduce using rule 3 (var_list -> var_list type id_list SEMICOLON .)
    WHILE           reduce using rule 3 (var_list -> var_list type id_list SEMICOLON .)
    FOR             reduce using rule 3 (var_list -> var_list type id_list SEMICOLON .)


state 29

    (8) id_list -> id_list COMMA ID .

    SEMICOLON       reduce using rule 8 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 8 (id_list -> id_list COMMA ID .)


state 30

    (15) main_function -> MAIN LPAREN RPAREN LBRACE . statement_list RBRACE
    (16) statement_list -> . statement_list statement
    (17) statement_list -> . empty
    (51) empty -> .

    RBRACE          reduce using rule 51 (empty -> .)
    ID              reduce using rule 51 (empty -> .)
    READ            reduce using rule 51 (empty -> .)
    WRITE           reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    FOR             reduce using rule 51 (empty -> .)

    statement_list                 shift and go to state 32
    empty                          shift and go to state 33

state 31

    (12) function -> FUNCTION type ID LPAREN . param_list RPAREN SEMICOLON vars statement_list RBRACE
    (13) param_list -> . param_list COMMA type ID
    (14) param_list -> . type ID
    (5) type -> . INT
    (6) type -> . FLOAT
    (7) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13

    type                           shift and go to state 34
    param_list                     shift and go to state 35

state 32

    (15) main_function -> MAIN LPAREN RPAREN LBRACE statement_list . RBRACE
    (16) statement_list -> statement_list . statement
    (18) statement -> . assignment SEMICOLON
    (19) statement -> . function_call SEMICOLON
    (20) statement -> . read_statement SEMICOLON
    (21) statement -> . write_statement SEMICOLON
    (22) statement -> . if_statement
    (23) statement -> . while_statement
    (24) statement -> . for_statement
    (25) assignment -> . ID ASSIGN expression
    (26) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (27) function_call -> . ID LPAREN arg_list RPAREN
    (30) read_statement -> . READ id_list
    (31) write_statement -> . WRITE LPAREN write_list RPAREN
    (35) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (36) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (37) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (38) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 36
    ID              shift and go to state 45
    READ            shift and go to state 46
    WRITE           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    FOR             shift and go to state 50

    statement                      shift and go to state 37
    assignment                     shift and go to state 38
    function_call                  shift and go to state 39
    read_statement                 shift and go to state 40
    write_statement                shift and go to state 41
    if_statement                   shift and go to state 42
    while_statement                shift and go to state 43
    for_statement                  shift and go to state 44

state 33

    (17) statement_list -> empty .

    RBRACE          reduce using rule 17 (statement_list -> empty .)
    ID              reduce using rule 17 (statement_list -> empty .)
    READ            reduce using rule 17 (statement_list -> empty .)
    WRITE           reduce using rule 17 (statement_list -> empty .)
    IF              reduce using rule 17 (statement_list -> empty .)
    WHILE           reduce using rule 17 (statement_list -> empty .)
    FOR             reduce using rule 17 (statement_list -> empty .)


state 34

    (14) param_list -> type . ID

    ID              shift and go to state 51


state 35

    (12) function -> FUNCTION type ID LPAREN param_list . RPAREN SEMICOLON vars statement_list RBRACE
    (13) param_list -> param_list . COMMA type ID

    RPAREN          shift and go to state 52
    COMMA           shift and go to state 53


state 36

    (15) main_function -> MAIN LPAREN RPAREN LBRACE statement_list RBRACE .

    $end            reduce using rule 15 (main_function -> MAIN LPAREN RPAREN LBRACE statement_list RBRACE .)


state 37

    (16) statement_list -> statement_list statement .

    RBRACE          reduce using rule 16 (statement_list -> statement_list statement .)
    ID              reduce using rule 16 (statement_list -> statement_list statement .)
    READ            reduce using rule 16 (statement_list -> statement_list statement .)
    WRITE           reduce using rule 16 (statement_list -> statement_list statement .)
    IF              reduce using rule 16 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 16 (statement_list -> statement_list statement .)
    FOR             reduce using rule 16 (statement_list -> statement_list statement .)


state 38

    (18) statement -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 54


state 39

    (19) statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 55


state 40

    (20) statement -> read_statement . SEMICOLON

    SEMICOLON       shift and go to state 56


state 41

    (21) statement -> write_statement . SEMICOLON

    SEMICOLON       shift and go to state 57


state 42

    (22) statement -> if_statement .

    RBRACE          reduce using rule 22 (statement -> if_statement .)
    ID              reduce using rule 22 (statement -> if_statement .)
    READ            reduce using rule 22 (statement -> if_statement .)
    WRITE           reduce using rule 22 (statement -> if_statement .)
    IF              reduce using rule 22 (statement -> if_statement .)
    WHILE           reduce using rule 22 (statement -> if_statement .)
    FOR             reduce using rule 22 (statement -> if_statement .)


state 43

    (23) statement -> while_statement .

    RBRACE          reduce using rule 23 (statement -> while_statement .)
    ID              reduce using rule 23 (statement -> while_statement .)
    READ            reduce using rule 23 (statement -> while_statement .)
    WRITE           reduce using rule 23 (statement -> while_statement .)
    IF              reduce using rule 23 (statement -> while_statement .)
    WHILE           reduce using rule 23 (statement -> while_statement .)
    FOR             reduce using rule 23 (statement -> while_statement .)


state 44

    (24) statement -> for_statement .

    RBRACE          reduce using rule 24 (statement -> for_statement .)
    ID              reduce using rule 24 (statement -> for_statement .)
    READ            reduce using rule 24 (statement -> for_statement .)
    WRITE           reduce using rule 24 (statement -> for_statement .)
    IF              reduce using rule 24 (statement -> for_statement .)
    WHILE           reduce using rule 24 (statement -> for_statement .)
    FOR             reduce using rule 24 (statement -> for_statement .)


state 45

    (25) assignment -> ID . ASSIGN expression
    (26) assignment -> ID . LBRACKET expression RBRACKET ASSIGN expression
    (27) function_call -> ID . LPAREN arg_list RPAREN

    ASSIGN          shift and go to state 58
    LBRACKET        shift and go to state 59
    LPAREN          shift and go to state 60


state 46

    (30) read_statement -> READ . id_list
    (8) id_list -> . id_list COMMA ID
    (9) id_list -> . ID

    ID              shift and go to state 20

    id_list                        shift and go to state 61

state 47

    (31) write_statement -> WRITE . LPAREN write_list RPAREN

    LPAREN          shift and go to state 62


state 48

    (35) if_statement -> IF . LPAREN expression RPAREN LBRACE statement_list RBRACE
    (36) if_statement -> IF . LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    LPAREN          shift and go to state 63


state 49

    (37) while_statement -> WHILE . LPAREN expression RPAREN DO LBRACE statement_list RBRACE

    LPAREN          shift and go to state 64


state 50

    (38) for_statement -> FOR . ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    ID              shift and go to state 65


state 51

    (14) param_list -> type ID .

    RPAREN          reduce using rule 14 (param_list -> type ID .)
    COMMA           reduce using rule 14 (param_list -> type ID .)


state 52

    (12) function -> FUNCTION type ID LPAREN param_list RPAREN . SEMICOLON vars statement_list RBRACE

    SEMICOLON       shift and go to state 66


state 53

    (13) param_list -> param_list COMMA . type ID
    (5) type -> . INT
    (6) type -> . FLOAT
    (7) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13

    type                           shift and go to state 67

state 54

    (18) statement -> assignment SEMICOLON .

    RBRACE          reduce using rule 18 (statement -> assignment SEMICOLON .)
    ID              reduce using rule 18 (statement -> assignment SEMICOLON .)
    READ            reduce using rule 18 (statement -> assignment SEMICOLON .)
    WRITE           reduce using rule 18 (statement -> assignment SEMICOLON .)
    IF              reduce using rule 18 (statement -> assignment SEMICOLON .)
    WHILE           reduce using rule 18 (statement -> assignment SEMICOLON .)
    FOR             reduce using rule 18 (statement -> assignment SEMICOLON .)


state 55

    (19) statement -> function_call SEMICOLON .

    RBRACE          reduce using rule 19 (statement -> function_call SEMICOLON .)
    ID              reduce using rule 19 (statement -> function_call SEMICOLON .)
    READ            reduce using rule 19 (statement -> function_call SEMICOLON .)
    WRITE           reduce using rule 19 (statement -> function_call SEMICOLON .)
    IF              reduce using rule 19 (statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 19 (statement -> function_call SEMICOLON .)
    FOR             reduce using rule 19 (statement -> function_call SEMICOLON .)


state 56

    (20) statement -> read_statement SEMICOLON .

    RBRACE          reduce using rule 20 (statement -> read_statement SEMICOLON .)
    ID              reduce using rule 20 (statement -> read_statement SEMICOLON .)
    READ            reduce using rule 20 (statement -> read_statement SEMICOLON .)
    WRITE           reduce using rule 20 (statement -> read_statement SEMICOLON .)
    IF              reduce using rule 20 (statement -> read_statement SEMICOLON .)
    WHILE           reduce using rule 20 (statement -> read_statement SEMICOLON .)
    FOR             reduce using rule 20 (statement -> read_statement SEMICOLON .)


state 57

    (21) statement -> write_statement SEMICOLON .

    RBRACE          reduce using rule 21 (statement -> write_statement SEMICOLON .)
    ID              reduce using rule 21 (statement -> write_statement SEMICOLON .)
    READ            reduce using rule 21 (statement -> write_statement SEMICOLON .)
    WRITE           reduce using rule 21 (statement -> write_statement SEMICOLON .)
    IF              reduce using rule 21 (statement -> write_statement SEMICOLON .)
    WHILE           reduce using rule 21 (statement -> write_statement SEMICOLON .)
    FOR             reduce using rule 21 (statement -> write_statement SEMICOLON .)


state 58

    (25) assignment -> ID ASSIGN . expression
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) expression -> . STRING
    (43) term -> . term TIMES factor
    (44) term -> . term DIVIDE factor
    (45) term -> . factor
    (46) factor -> . LPAREN expression RPAREN
    (47) factor -> . ID
    (48) factor -> . ID LBRACKET expression RBRACKET
    (49) factor -> . INTEGER
    (50) factor -> . FLOATING_POINT

    STRING          shift and go to state 71
    LPAREN          shift and go to state 73
    ID              shift and go to state 68
    INTEGER         shift and go to state 74
    FLOATING_POINT  shift and go to state 75

    expression                     shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 72

state 59

    (26) assignment -> ID LBRACKET . expression RBRACKET ASSIGN expression
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) expression -> . STRING
    (43) term -> . term TIMES factor
    (44) term -> . term DIVIDE factor
    (45) term -> . factor
    (46) factor -> . LPAREN expression RPAREN
    (47) factor -> . ID
    (48) factor -> . ID LBRACKET expression RBRACKET
    (49) factor -> . INTEGER
    (50) factor -> . FLOATING_POINT

    STRING          shift and go to state 71
    LPAREN          shift and go to state 73
    ID              shift and go to state 68
    INTEGER         shift and go to state 74
    FLOATING_POINT  shift and go to state 75

    expression                     shift and go to state 76
    term                           shift and go to state 70
    factor                         shift and go to state 72

state 60

    (27) function_call -> ID LPAREN . arg_list RPAREN
    (28) arg_list -> . arg_list COMMA expression
    (29) arg_list -> . expression
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) expression -> . STRING
    (43) term -> . term TIMES factor
    (44) term -> . term DIVIDE factor
    (45) term -> . factor
    (46) factor -> . LPAREN expression RPAREN
    (47) factor -> . ID
    (48) factor -> . ID LBRACKET expression RBRACKET
    (49) factor -> . INTEGER
    (50) factor -> . FLOATING_POINT

    STRING          shift and go to state 71
    LPAREN          shift and go to state 73
    ID              shift and go to state 68
    INTEGER         shift and go to state 74
    FLOATING_POINT  shift and go to state 75

    arg_list                       shift and go to state 77
    expression                     shift and go to state 78
    term                           shift and go to state 70
    factor                         shift and go to state 72

state 61

    (30) read_statement -> READ id_list .
    (8) id_list -> id_list . COMMA ID

    SEMICOLON       reduce using rule 30 (read_statement -> READ id_list .)
    COMMA           shift and go to state 25


state 62

    (31) write_statement -> WRITE LPAREN . write_list RPAREN
    (32) write_list -> . write_list COMMA expression
    (33) write_list -> . STRING
    (34) write_list -> . ID COMMA expression

    STRING          shift and go to state 80
    ID              shift and go to state 81

    write_list                     shift and go to state 79

state 63

    (35) if_statement -> IF LPAREN . expression RPAREN LBRACE statement_list RBRACE
    (36) if_statement -> IF LPAREN . expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) expression -> . STRING
    (43) term -> . term TIMES factor
    (44) term -> . term DIVIDE factor
    (45) term -> . factor
    (46) factor -> . LPAREN expression RPAREN
    (47) factor -> . ID
    (48) factor -> . ID LBRACKET expression RBRACKET
    (49) factor -> . INTEGER
    (50) factor -> . FLOATING_POINT

    STRING          shift and go to state 71
    LPAREN          shift and go to state 73
    ID              shift and go to state 68
    INTEGER         shift and go to state 74
    FLOATING_POINT  shift and go to state 75

    expression                     shift and go to state 82
    term                           shift and go to state 70
    factor                         shift and go to state 72

state 64

    (37) while_statement -> WHILE LPAREN . expression RPAREN DO LBRACE statement_list RBRACE
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) expression -> . STRING
    (43) term -> . term TIMES factor
    (44) term -> . term DIVIDE factor
    (45) term -> . factor
    (46) factor -> . LPAREN expression RPAREN
    (47) factor -> . ID
    (48) factor -> . ID LBRACKET expression RBRACKET
    (49) factor -> . INTEGER
    (50) factor -> . FLOATING_POINT

    STRING          shift and go to state 71
    LPAREN          shift and go to state 73
    ID              shift and go to state 68
    INTEGER         shift and go to state 74
    FLOATING_POINT  shift and go to state 75

    expression                     shift and go to state 83
    term                           shift and go to state 70
    factor                         shift and go to state 72

state 65

    (38) for_statement -> FOR ID . LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    LBRACKET        shift and go to state 84


state 66

    (12) function -> FUNCTION type ID LPAREN param_list RPAREN SEMICOLON . vars statement_list RBRACE
    (2) vars -> . VARS var_list

    VARS            shift and go to state 6

    vars                           shift and go to state 85

state 67

    (13) param_list -> param_list COMMA type . ID

    ID              shift and go to state 86


state 68

    (47) factor -> ID .
    (48) factor -> ID . LBRACKET expression RBRACKET

    TIMES           reduce using rule 47 (factor -> ID .)
    DIVIDE          reduce using rule 47 (factor -> ID .)
    PLUS            reduce using rule 47 (factor -> ID .)
    MINUS           reduce using rule 47 (factor -> ID .)
    SEMICOLON       reduce using rule 47 (factor -> ID .)
    RBRACKET        reduce using rule 47 (factor -> ID .)
    RPAREN          reduce using rule 47 (factor -> ID .)
    COMMA           reduce using rule 47 (factor -> ID .)
    TO              reduce using rule 47 (factor -> ID .)
    LBRACKET        shift and go to state 87


state 69

    (25) assignment -> ID ASSIGN expression .
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 25 (assignment -> ID ASSIGN expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89


state 70

    (41) expression -> term .
    (43) term -> term . TIMES factor
    (44) term -> term . DIVIDE factor

    PLUS            reduce using rule 41 (expression -> term .)
    MINUS           reduce using rule 41 (expression -> term .)
    SEMICOLON       reduce using rule 41 (expression -> term .)
    RBRACKET        reduce using rule 41 (expression -> term .)
    RPAREN          reduce using rule 41 (expression -> term .)
    COMMA           reduce using rule 41 (expression -> term .)
    TO              reduce using rule 41 (expression -> term .)
    TIMES           shift and go to state 90
    DIVIDE          shift and go to state 91


state 71

    (42) expression -> STRING .

    PLUS            reduce using rule 42 (expression -> STRING .)
    MINUS           reduce using rule 42 (expression -> STRING .)
    SEMICOLON       reduce using rule 42 (expression -> STRING .)
    RBRACKET        reduce using rule 42 (expression -> STRING .)
    RPAREN          reduce using rule 42 (expression -> STRING .)
    COMMA           reduce using rule 42 (expression -> STRING .)
    TO              reduce using rule 42 (expression -> STRING .)


state 72

    (45) term -> factor .

    TIMES           reduce using rule 45 (term -> factor .)
    DIVIDE          reduce using rule 45 (term -> factor .)
    PLUS            reduce using rule 45 (term -> factor .)
    MINUS           reduce using rule 45 (term -> factor .)
    SEMICOLON       reduce using rule 45 (term -> factor .)
    RBRACKET        reduce using rule 45 (term -> factor .)
    RPAREN          reduce using rule 45 (term -> factor .)
    COMMA           reduce using rule 45 (term -> factor .)
    TO              reduce using rule 45 (term -> factor .)


state 73

    (46) factor -> LPAREN . expression RPAREN
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) expression -> . STRING
    (43) term -> . term TIMES factor
    (44) term -> . term DIVIDE factor
    (45) term -> . factor
    (46) factor -> . LPAREN expression RPAREN
    (47) factor -> . ID
    (48) factor -> . ID LBRACKET expression RBRACKET
    (49) factor -> . INTEGER
    (50) factor -> . FLOATING_POINT

    STRING          shift and go to state 71
    LPAREN          shift and go to state 73
    ID              shift and go to state 68
    INTEGER         shift and go to state 74
    FLOATING_POINT  shift and go to state 75

    expression                     shift and go to state 92
    term                           shift and go to state 70
    factor                         shift and go to state 72

state 74

    (49) factor -> INTEGER .

    TIMES           reduce using rule 49 (factor -> INTEGER .)
    DIVIDE          reduce using rule 49 (factor -> INTEGER .)
    PLUS            reduce using rule 49 (factor -> INTEGER .)
    MINUS           reduce using rule 49 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 49 (factor -> INTEGER .)
    RBRACKET        reduce using rule 49 (factor -> INTEGER .)
    RPAREN          reduce using rule 49 (factor -> INTEGER .)
    COMMA           reduce using rule 49 (factor -> INTEGER .)
    TO              reduce using rule 49 (factor -> INTEGER .)


state 75

    (50) factor -> FLOATING_POINT .

    TIMES           reduce using rule 50 (factor -> FLOATING_POINT .)
    DIVIDE          reduce using rule 50 (factor -> FLOATING_POINT .)
    PLUS            reduce using rule 50 (factor -> FLOATING_POINT .)
    MINUS           reduce using rule 50 (factor -> FLOATING_POINT .)
    SEMICOLON       reduce using rule 50 (factor -> FLOATING_POINT .)
    RBRACKET        reduce using rule 50 (factor -> FLOATING_POINT .)
    RPAREN          reduce using rule 50 (factor -> FLOATING_POINT .)
    COMMA           reduce using rule 50 (factor -> FLOATING_POINT .)
    TO              reduce using rule 50 (factor -> FLOATING_POINT .)


state 76

    (26) assignment -> ID LBRACKET expression . RBRACKET ASSIGN expression
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    RBRACKET        shift and go to state 93
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89


state 77

    (27) function_call -> ID LPAREN arg_list . RPAREN
    (28) arg_list -> arg_list . COMMA expression

    RPAREN          shift and go to state 94
    COMMA           shift and go to state 95


state 78

    (29) arg_list -> expression .
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    RPAREN          reduce using rule 29 (arg_list -> expression .)
    COMMA           reduce using rule 29 (arg_list -> expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89


state 79

    (31) write_statement -> WRITE LPAREN write_list . RPAREN
    (32) write_list -> write_list . COMMA expression

    RPAREN          shift and go to state 96
    COMMA           shift and go to state 97


state 80

    (33) write_list -> STRING .

    RPAREN          reduce using rule 33 (write_list -> STRING .)
    COMMA           reduce using rule 33 (write_list -> STRING .)


state 81

    (34) write_list -> ID . COMMA expression

    COMMA           shift and go to state 98


state 82

    (35) if_statement -> IF LPAREN expression . RPAREN LBRACE statement_list RBRACE
    (36) if_statement -> IF LPAREN expression . RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    RPAREN          shift and go to state 99
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89


state 83

    (37) while_statement -> WHILE LPAREN expression . RPAREN DO LBRACE statement_list RBRACE
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    RPAREN          shift and go to state 100
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89


state 84

    (38) for_statement -> FOR ID LBRACKET . expression TO expression RBRACKET DO LBRACE statement_list RBRACE
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) expression -> . STRING
    (43) term -> . term TIMES factor
    (44) term -> . term DIVIDE factor
    (45) term -> . factor
    (46) factor -> . LPAREN expression RPAREN
    (47) factor -> . ID
    (48) factor -> . ID LBRACKET expression RBRACKET
    (49) factor -> . INTEGER
    (50) factor -> . FLOATING_POINT

    STRING          shift and go to state 71
    LPAREN          shift and go to state 73
    ID              shift and go to state 68
    INTEGER         shift and go to state 74
    FLOATING_POINT  shift and go to state 75

    expression                     shift and go to state 101
    term                           shift and go to state 70
    factor                         shift and go to state 72

state 85

    (12) function -> FUNCTION type ID LPAREN param_list RPAREN SEMICOLON vars . statement_list RBRACE
    (16) statement_list -> . statement_list statement
    (17) statement_list -> . empty
    (51) empty -> .

    RBRACE          reduce using rule 51 (empty -> .)
    ID              reduce using rule 51 (empty -> .)
    READ            reduce using rule 51 (empty -> .)
    WRITE           reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    FOR             reduce using rule 51 (empty -> .)

    statement_list                 shift and go to state 102
    empty                          shift and go to state 33

state 86

    (13) param_list -> param_list COMMA type ID .

    RPAREN          reduce using rule 13 (param_list -> param_list COMMA type ID .)
    COMMA           reduce using rule 13 (param_list -> param_list COMMA type ID .)


state 87

    (48) factor -> ID LBRACKET . expression RBRACKET
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) expression -> . STRING
    (43) term -> . term TIMES factor
    (44) term -> . term DIVIDE factor
    (45) term -> . factor
    (46) factor -> . LPAREN expression RPAREN
    (47) factor -> . ID
    (48) factor -> . ID LBRACKET expression RBRACKET
    (49) factor -> . INTEGER
    (50) factor -> . FLOATING_POINT

    STRING          shift and go to state 71
    LPAREN          shift and go to state 73
    ID              shift and go to state 68
    INTEGER         shift and go to state 74
    FLOATING_POINT  shift and go to state 75

    expression                     shift and go to state 103
    term                           shift and go to state 70
    factor                         shift and go to state 72

state 88

    (39) expression -> expression PLUS . term
    (43) term -> . term TIMES factor
    (44) term -> . term DIVIDE factor
    (45) term -> . factor
    (46) factor -> . LPAREN expression RPAREN
    (47) factor -> . ID
    (48) factor -> . ID LBRACKET expression RBRACKET
    (49) factor -> . INTEGER
    (50) factor -> . FLOATING_POINT

    LPAREN          shift and go to state 73
    ID              shift and go to state 68
    INTEGER         shift and go to state 74
    FLOATING_POINT  shift and go to state 75

    term                           shift and go to state 104
    factor                         shift and go to state 72

state 89

    (40) expression -> expression MINUS . term
    (43) term -> . term TIMES factor
    (44) term -> . term DIVIDE factor
    (45) term -> . factor
    (46) factor -> . LPAREN expression RPAREN
    (47) factor -> . ID
    (48) factor -> . ID LBRACKET expression RBRACKET
    (49) factor -> . INTEGER
    (50) factor -> . FLOATING_POINT

    LPAREN          shift and go to state 73
    ID              shift and go to state 68
    INTEGER         shift and go to state 74
    FLOATING_POINT  shift and go to state 75

    term                           shift and go to state 105
    factor                         shift and go to state 72

state 90

    (43) term -> term TIMES . factor
    (46) factor -> . LPAREN expression RPAREN
    (47) factor -> . ID
    (48) factor -> . ID LBRACKET expression RBRACKET
    (49) factor -> . INTEGER
    (50) factor -> . FLOATING_POINT

    LPAREN          shift and go to state 73
    ID              shift and go to state 68
    INTEGER         shift and go to state 74
    FLOATING_POINT  shift and go to state 75

    factor                         shift and go to state 106

state 91

    (44) term -> term DIVIDE . factor
    (46) factor -> . LPAREN expression RPAREN
    (47) factor -> . ID
    (48) factor -> . ID LBRACKET expression RBRACKET
    (49) factor -> . INTEGER
    (50) factor -> . FLOATING_POINT

    LPAREN          shift and go to state 73
    ID              shift and go to state 68
    INTEGER         shift and go to state 74
    FLOATING_POINT  shift and go to state 75

    factor                         shift and go to state 107

state 92

    (46) factor -> LPAREN expression . RPAREN
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    RPAREN          shift and go to state 108
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89


state 93

    (26) assignment -> ID LBRACKET expression RBRACKET . ASSIGN expression

    ASSIGN          shift and go to state 109


state 94

    (27) function_call -> ID LPAREN arg_list RPAREN .

    SEMICOLON       reduce using rule 27 (function_call -> ID LPAREN arg_list RPAREN .)


state 95

    (28) arg_list -> arg_list COMMA . expression
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) expression -> . STRING
    (43) term -> . term TIMES factor
    (44) term -> . term DIVIDE factor
    (45) term -> . factor
    (46) factor -> . LPAREN expression RPAREN
    (47) factor -> . ID
    (48) factor -> . ID LBRACKET expression RBRACKET
    (49) factor -> . INTEGER
    (50) factor -> . FLOATING_POINT

    STRING          shift and go to state 71
    LPAREN          shift and go to state 73
    ID              shift and go to state 68
    INTEGER         shift and go to state 74
    FLOATING_POINT  shift and go to state 75

    expression                     shift and go to state 110
    term                           shift and go to state 70
    factor                         shift and go to state 72

state 96

    (31) write_statement -> WRITE LPAREN write_list RPAREN .

    SEMICOLON       reduce using rule 31 (write_statement -> WRITE LPAREN write_list RPAREN .)


state 97

    (32) write_list -> write_list COMMA . expression
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) expression -> . STRING
    (43) term -> . term TIMES factor
    (44) term -> . term DIVIDE factor
    (45) term -> . factor
    (46) factor -> . LPAREN expression RPAREN
    (47) factor -> . ID
    (48) factor -> . ID LBRACKET expression RBRACKET
    (49) factor -> . INTEGER
    (50) factor -> . FLOATING_POINT

    STRING          shift and go to state 71
    LPAREN          shift and go to state 73
    ID              shift and go to state 68
    INTEGER         shift and go to state 74
    FLOATING_POINT  shift and go to state 75

    expression                     shift and go to state 111
    term                           shift and go to state 70
    factor                         shift and go to state 72

state 98

    (34) write_list -> ID COMMA . expression
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) expression -> . STRING
    (43) term -> . term TIMES factor
    (44) term -> . term DIVIDE factor
    (45) term -> . factor
    (46) factor -> . LPAREN expression RPAREN
    (47) factor -> . ID
    (48) factor -> . ID LBRACKET expression RBRACKET
    (49) factor -> . INTEGER
    (50) factor -> . FLOATING_POINT

    STRING          shift and go to state 71
    LPAREN          shift and go to state 73
    ID              shift and go to state 68
    INTEGER         shift and go to state 74
    FLOATING_POINT  shift and go to state 75

    expression                     shift and go to state 112
    term                           shift and go to state 70
    factor                         shift and go to state 72

state 99

    (35) if_statement -> IF LPAREN expression RPAREN . LBRACE statement_list RBRACE
    (36) if_statement -> IF LPAREN expression RPAREN . LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    LBRACE          shift and go to state 113


state 100

    (37) while_statement -> WHILE LPAREN expression RPAREN . DO LBRACE statement_list RBRACE

    DO              shift and go to state 114


state 101

    (38) for_statement -> FOR ID LBRACKET expression . TO expression RBRACKET DO LBRACE statement_list RBRACE
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    TO              shift and go to state 115
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89


state 102

    (12) function -> FUNCTION type ID LPAREN param_list RPAREN SEMICOLON vars statement_list . RBRACE
    (16) statement_list -> statement_list . statement
    (18) statement -> . assignment SEMICOLON
    (19) statement -> . function_call SEMICOLON
    (20) statement -> . read_statement SEMICOLON
    (21) statement -> . write_statement SEMICOLON
    (22) statement -> . if_statement
    (23) statement -> . while_statement
    (24) statement -> . for_statement
    (25) assignment -> . ID ASSIGN expression
    (26) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (27) function_call -> . ID LPAREN arg_list RPAREN
    (30) read_statement -> . READ id_list
    (31) write_statement -> . WRITE LPAREN write_list RPAREN
    (35) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (36) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (37) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (38) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 116
    ID              shift and go to state 45
    READ            shift and go to state 46
    WRITE           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    FOR             shift and go to state 50

    statement                      shift and go to state 37
    assignment                     shift and go to state 38
    function_call                  shift and go to state 39
    read_statement                 shift and go to state 40
    write_statement                shift and go to state 41
    if_statement                   shift and go to state 42
    while_statement                shift and go to state 43
    for_statement                  shift and go to state 44

state 103

    (48) factor -> ID LBRACKET expression . RBRACKET
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    RBRACKET        shift and go to state 117
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89


state 104

    (39) expression -> expression PLUS term .
    (43) term -> term . TIMES factor
    (44) term -> term . DIVIDE factor

    PLUS            reduce using rule 39 (expression -> expression PLUS term .)
    MINUS           reduce using rule 39 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 39 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 39 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 39 (expression -> expression PLUS term .)
    COMMA           reduce using rule 39 (expression -> expression PLUS term .)
    TO              reduce using rule 39 (expression -> expression PLUS term .)
    TIMES           shift and go to state 90
    DIVIDE          shift and go to state 91


state 105

    (40) expression -> expression MINUS term .
    (43) term -> term . TIMES factor
    (44) term -> term . DIVIDE factor

    PLUS            reduce using rule 40 (expression -> expression MINUS term .)
    MINUS           reduce using rule 40 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 40 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 40 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 40 (expression -> expression MINUS term .)
    COMMA           reduce using rule 40 (expression -> expression MINUS term .)
    TO              reduce using rule 40 (expression -> expression MINUS term .)
    TIMES           shift and go to state 90
    DIVIDE          shift and go to state 91


state 106

    (43) term -> term TIMES factor .

    TIMES           reduce using rule 43 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 43 (term -> term TIMES factor .)
    PLUS            reduce using rule 43 (term -> term TIMES factor .)
    MINUS           reduce using rule 43 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 43 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 43 (term -> term TIMES factor .)
    RPAREN          reduce using rule 43 (term -> term TIMES factor .)
    COMMA           reduce using rule 43 (term -> term TIMES factor .)
    TO              reduce using rule 43 (term -> term TIMES factor .)


state 107

    (44) term -> term DIVIDE factor .

    TIMES           reduce using rule 44 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 44 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 44 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 44 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 44 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 44 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 44 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 44 (term -> term DIVIDE factor .)
    TO              reduce using rule 44 (term -> term DIVIDE factor .)


state 108

    (46) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 46 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 46 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 46 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 46 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 46 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 46 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 46 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 46 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 46 (factor -> LPAREN expression RPAREN .)


state 109

    (26) assignment -> ID LBRACKET expression RBRACKET ASSIGN . expression
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) expression -> . STRING
    (43) term -> . term TIMES factor
    (44) term -> . term DIVIDE factor
    (45) term -> . factor
    (46) factor -> . LPAREN expression RPAREN
    (47) factor -> . ID
    (48) factor -> . ID LBRACKET expression RBRACKET
    (49) factor -> . INTEGER
    (50) factor -> . FLOATING_POINT

    STRING          shift and go to state 71
    LPAREN          shift and go to state 73
    ID              shift and go to state 68
    INTEGER         shift and go to state 74
    FLOATING_POINT  shift and go to state 75

    expression                     shift and go to state 118
    term                           shift and go to state 70
    factor                         shift and go to state 72

state 110

    (28) arg_list -> arg_list COMMA expression .
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    RPAREN          reduce using rule 28 (arg_list -> arg_list COMMA expression .)
    COMMA           reduce using rule 28 (arg_list -> arg_list COMMA expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89


state 111

    (32) write_list -> write_list COMMA expression .
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    RPAREN          reduce using rule 32 (write_list -> write_list COMMA expression .)
    COMMA           reduce using rule 32 (write_list -> write_list COMMA expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89


state 112

    (34) write_list -> ID COMMA expression .
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    RPAREN          reduce using rule 34 (write_list -> ID COMMA expression .)
    COMMA           reduce using rule 34 (write_list -> ID COMMA expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89


state 113

    (35) if_statement -> IF LPAREN expression RPAREN LBRACE . statement_list RBRACE
    (36) if_statement -> IF LPAREN expression RPAREN LBRACE . statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (16) statement_list -> . statement_list statement
    (17) statement_list -> . empty
    (51) empty -> .

    RBRACE          reduce using rule 51 (empty -> .)
    ID              reduce using rule 51 (empty -> .)
    READ            reduce using rule 51 (empty -> .)
    WRITE           reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    FOR             reduce using rule 51 (empty -> .)

    statement_list                 shift and go to state 119
    empty                          shift and go to state 33

state 114

    (37) while_statement -> WHILE LPAREN expression RPAREN DO . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 120


state 115

    (38) for_statement -> FOR ID LBRACKET expression TO . expression RBRACKET DO LBRACE statement_list RBRACE
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) expression -> . STRING
    (43) term -> . term TIMES factor
    (44) term -> . term DIVIDE factor
    (45) term -> . factor
    (46) factor -> . LPAREN expression RPAREN
    (47) factor -> . ID
    (48) factor -> . ID LBRACKET expression RBRACKET
    (49) factor -> . INTEGER
    (50) factor -> . FLOATING_POINT

    STRING          shift and go to state 71
    LPAREN          shift and go to state 73
    ID              shift and go to state 68
    INTEGER         shift and go to state 74
    FLOATING_POINT  shift and go to state 75

    expression                     shift and go to state 121
    term                           shift and go to state 70
    factor                         shift and go to state 72

state 116

    (12) function -> FUNCTION type ID LPAREN param_list RPAREN SEMICOLON vars statement_list RBRACE .

    MAIN            reduce using rule 12 (function -> FUNCTION type ID LPAREN param_list RPAREN SEMICOLON vars statement_list RBRACE .)
    FUNCTION        reduce using rule 12 (function -> FUNCTION type ID LPAREN param_list RPAREN SEMICOLON vars statement_list RBRACE .)


state 117

    (48) factor -> ID LBRACKET expression RBRACKET .

    TIMES           reduce using rule 48 (factor -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 48 (factor -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 48 (factor -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 48 (factor -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 48 (factor -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 48 (factor -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 48 (factor -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 48 (factor -> ID LBRACKET expression RBRACKET .)
    TO              reduce using rule 48 (factor -> ID LBRACKET expression RBRACKET .)


state 118

    (26) assignment -> ID LBRACKET expression RBRACKET ASSIGN expression .
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 26 (assignment -> ID LBRACKET expression RBRACKET ASSIGN expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89


state 119

    (35) if_statement -> IF LPAREN expression RPAREN LBRACE statement_list . RBRACE
    (36) if_statement -> IF LPAREN expression RPAREN LBRACE statement_list . RBRACE ELSE LBRACE statement_list RBRACE
    (16) statement_list -> statement_list . statement
    (18) statement -> . assignment SEMICOLON
    (19) statement -> . function_call SEMICOLON
    (20) statement -> . read_statement SEMICOLON
    (21) statement -> . write_statement SEMICOLON
    (22) statement -> . if_statement
    (23) statement -> . while_statement
    (24) statement -> . for_statement
    (25) assignment -> . ID ASSIGN expression
    (26) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (27) function_call -> . ID LPAREN arg_list RPAREN
    (30) read_statement -> . READ id_list
    (31) write_statement -> . WRITE LPAREN write_list RPAREN
    (35) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (36) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (37) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (38) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 122
    ID              shift and go to state 45
    READ            shift and go to state 46
    WRITE           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    FOR             shift and go to state 50

    statement                      shift and go to state 37
    assignment                     shift and go to state 38
    function_call                  shift and go to state 39
    read_statement                 shift and go to state 40
    write_statement                shift and go to state 41
    if_statement                   shift and go to state 42
    while_statement                shift and go to state 43
    for_statement                  shift and go to state 44

state 120

    (37) while_statement -> WHILE LPAREN expression RPAREN DO LBRACE . statement_list RBRACE
    (16) statement_list -> . statement_list statement
    (17) statement_list -> . empty
    (51) empty -> .

    RBRACE          reduce using rule 51 (empty -> .)
    ID              reduce using rule 51 (empty -> .)
    READ            reduce using rule 51 (empty -> .)
    WRITE           reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    FOR             reduce using rule 51 (empty -> .)

    statement_list                 shift and go to state 123
    empty                          shift and go to state 33

state 121

    (38) for_statement -> FOR ID LBRACKET expression TO expression . RBRACKET DO LBRACE statement_list RBRACE
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    RBRACKET        shift and go to state 124
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89


state 122

    (35) if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .
    (36) if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE . ELSE LBRACE statement_list RBRACE

    RBRACE          reduce using rule 35 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ID              reduce using rule 35 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    READ            reduce using rule 35 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 35 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 35 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 35 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    FOR             reduce using rule 35 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ELSE            shift and go to state 125


state 123

    (37) while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list . RBRACE
    (16) statement_list -> statement_list . statement
    (18) statement -> . assignment SEMICOLON
    (19) statement -> . function_call SEMICOLON
    (20) statement -> . read_statement SEMICOLON
    (21) statement -> . write_statement SEMICOLON
    (22) statement -> . if_statement
    (23) statement -> . while_statement
    (24) statement -> . for_statement
    (25) assignment -> . ID ASSIGN expression
    (26) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (27) function_call -> . ID LPAREN arg_list RPAREN
    (30) read_statement -> . READ id_list
    (31) write_statement -> . WRITE LPAREN write_list RPAREN
    (35) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (36) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (37) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (38) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 126
    ID              shift and go to state 45
    READ            shift and go to state 46
    WRITE           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    FOR             shift and go to state 50

    statement                      shift and go to state 37
    assignment                     shift and go to state 38
    function_call                  shift and go to state 39
    read_statement                 shift and go to state 40
    write_statement                shift and go to state 41
    if_statement                   shift and go to state 42
    while_statement                shift and go to state 43
    for_statement                  shift and go to state 44

state 124

    (38) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET . DO LBRACE statement_list RBRACE

    DO              shift and go to state 127


state 125

    (36) if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 128


state 126

    (37) while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    ID              reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    READ            reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    IF              reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    FOR             reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)


state 127

    (38) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 129


state 128

    (36) if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE . statement_list RBRACE
    (16) statement_list -> . statement_list statement
    (17) statement_list -> . empty
    (51) empty -> .

    RBRACE          reduce using rule 51 (empty -> .)
    ID              reduce using rule 51 (empty -> .)
    READ            reduce using rule 51 (empty -> .)
    WRITE           reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    FOR             reduce using rule 51 (empty -> .)

    statement_list                 shift and go to state 130
    empty                          shift and go to state 33

state 129

    (38) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE . statement_list RBRACE
    (16) statement_list -> . statement_list statement
    (17) statement_list -> . empty
    (51) empty -> .

    RBRACE          reduce using rule 51 (empty -> .)
    ID              reduce using rule 51 (empty -> .)
    READ            reduce using rule 51 (empty -> .)
    WRITE           reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    FOR             reduce using rule 51 (empty -> .)

    statement_list                 shift and go to state 131
    empty                          shift and go to state 33

state 130

    (36) if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list . RBRACE
    (16) statement_list -> statement_list . statement
    (18) statement -> . assignment SEMICOLON
    (19) statement -> . function_call SEMICOLON
    (20) statement -> . read_statement SEMICOLON
    (21) statement -> . write_statement SEMICOLON
    (22) statement -> . if_statement
    (23) statement -> . while_statement
    (24) statement -> . for_statement
    (25) assignment -> . ID ASSIGN expression
    (26) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (27) function_call -> . ID LPAREN arg_list RPAREN
    (30) read_statement -> . READ id_list
    (31) write_statement -> . WRITE LPAREN write_list RPAREN
    (35) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (36) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (37) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (38) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 132
    ID              shift and go to state 45
    READ            shift and go to state 46
    WRITE           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    FOR             shift and go to state 50

    statement                      shift and go to state 37
    assignment                     shift and go to state 38
    function_call                  shift and go to state 39
    read_statement                 shift and go to state 40
    write_statement                shift and go to state 41
    if_statement                   shift and go to state 42
    while_statement                shift and go to state 43
    for_statement                  shift and go to state 44

state 131

    (38) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list . RBRACE
    (16) statement_list -> statement_list . statement
    (18) statement -> . assignment SEMICOLON
    (19) statement -> . function_call SEMICOLON
    (20) statement -> . read_statement SEMICOLON
    (21) statement -> . write_statement SEMICOLON
    (22) statement -> . if_statement
    (23) statement -> . while_statement
    (24) statement -> . for_statement
    (25) assignment -> . ID ASSIGN expression
    (26) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (27) function_call -> . ID LPAREN arg_list RPAREN
    (30) read_statement -> . READ id_list
    (31) write_statement -> . WRITE LPAREN write_list RPAREN
    (35) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (36) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (37) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (38) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 133
    ID              shift and go to state 45
    READ            shift and go to state 46
    WRITE           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    FOR             shift and go to state 50

    statement                      shift and go to state 37
    assignment                     shift and go to state 38
    function_call                  shift and go to state 39
    read_statement                 shift and go to state 40
    write_statement                shift and go to state 41
    if_statement                   shift and go to state 42
    while_statement                shift and go to state 43
    for_statement                  shift and go to state 44

state 132

    (36) if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 36 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    ID              reduce using rule 36 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    READ            reduce using rule 36 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 36 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    IF              reduce using rule 36 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 36 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    FOR             reduce using rule 36 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)


state 133

    (38) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 38 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    ID              reduce using rule 38 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    READ            reduce using rule 38 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 38 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    IF              reduce using rule 38 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 38 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    FOR             reduce using rule 38 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)

