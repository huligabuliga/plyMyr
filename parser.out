Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ARC
    BOOL
    BOOLEAN
    CIRCLE
    COLOR
    EQ
    GE
    GT
    LE
    LINE
    LT
    NE
    NOT
    OR
    PENDOWN
    PENUP
    POINT
    RETURN
    THEN
    THICKNESS
    VOID

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON vars function_list main_function
Rule 2     program -> PROGRAM ID SEMICOLON vars empty main_function
Rule 3     vars -> VARS var_list
Rule 4     var_list -> var_list type id_list SEMICOLON
Rule 5     var_list -> type id_list SEMICOLON
Rule 6     type -> INT
Rule 7     type -> FLOAT
Rule 8     type -> CHAR
Rule 9     id_list -> id_list COMMA ID
Rule 10    id_list -> ID
Rule 11    function_list -> function_list function
Rule 12    function_list -> empty
Rule 13    function -> FUNCTION type ID LPAREN param_list RPAREN SEMICOLON vars statement_list RBRACE
Rule 14    param_list -> param_list COMMA type ID
Rule 15    param_list -> type ID
Rule 16    main_function -> MAIN LPAREN RPAREN LBRACE statement_list RBRACE
Rule 17    statement_list -> statement_list statement
Rule 18    statement_list -> empty
Rule 19    statement -> assignment SEMICOLON
Rule 20    statement -> function_call SEMICOLON
Rule 21    statement -> read_statement SEMICOLON
Rule 22    statement -> write_statement SEMICOLON
Rule 23    statement -> if_statement
Rule 24    statement -> while_statement
Rule 25    statement -> for_statement
Rule 26    assignment -> ID ASSIGN expression
Rule 27    assignment -> ID LBRACKET expression RBRACKET ASSIGN expression
Rule 28    function_call -> ID LPAREN arg_list RPAREN
Rule 29    arg_list -> arg_list COMMA expression
Rule 30    arg_list -> expression
Rule 31    read_statement -> READ id_list
Rule 32    write_statement -> WRITE LPAREN write_list RPAREN
Rule 33    write_list -> write_list COMMA expression
Rule 34    write_list -> STRING
Rule 35    write_list -> ID COMMA expression
Rule 36    if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE
Rule 37    if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
Rule 38    while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
Rule 39    for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE
Rule 40    expression -> expression PLUS term
Rule 41    expression -> expression MINUS term
Rule 42    expression -> term
Rule 43    expression -> STRING
Rule 44    term -> term TIMES factor
Rule 45    term -> term DIVIDE factor
Rule 46    term -> factor
Rule 47    factor -> LPAREN expression RPAREN
Rule 48    factor -> ID
Rule 49    factor -> ID LBRACKET expression RBRACKET
Rule 50    factor -> INTEGER
Rule 51    factor -> FLOATING_POINT
Rule 52    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ARC                  : 
ASSIGN               : 26 27
BOOL                 : 
BOOLEAN              : 
CHAR                 : 8
CIRCLE               : 
COLOR                : 
COMMA                : 9 14 29 33 35
DIVIDE               : 45
DO                   : 38 39
ELSE                 : 37
EQ                   : 
FLOAT                : 7
FLOATING_POINT       : 51
FOR                  : 39
FUNCTION             : 13
GE                   : 
GT                   : 
ID                   : 1 2 9 10 13 14 15 26 27 28 35 39 48 49
IF                   : 36 37
INT                  : 6
INTEGER              : 50
LBRACE               : 16 36 37 37 38 39
LBRACKET             : 27 39 49
LE                   : 
LINE                 : 
LPAREN               : 13 16 28 32 36 37 38 47
LT                   : 
MAIN                 : 16
MINUS                : 41
NE                   : 
NOT                  : 
OR                   : 
PENDOWN              : 
PENUP                : 
PLUS                 : 40
POINT                : 
PROGRAM              : 1 2
RBRACE               : 13 16 36 37 37 38 39
RBRACKET             : 27 39 49
READ                 : 31
RETURN               : 
RPAREN               : 13 16 28 32 36 37 38 47
SEMICOLON            : 1 2 4 5 13 19 20 21 22
STRING               : 34 43
THEN                 : 
THICKNESS            : 
TIMES                : 44
TO                   : 39
VARS                 : 3
VOID                 : 
WHILE                : 38
WRITE                : 32
error                : 

Nonterminals, with rules where they appear

arg_list             : 28 29
assignment           : 19
empty                : 2 12 18
expression           : 26 27 27 29 30 33 35 36 37 38 39 39 40 41 47 49
factor               : 44 45 46
for_statement        : 25
function             : 11
function_call        : 20
function_list        : 1 11
id_list              : 4 5 9 31
if_statement         : 23
main_function        : 1 2
param_list           : 13 14
program              : 0
read_statement       : 21
statement            : 17
statement_list       : 13 16 17 36 37 37 38 39
term                 : 40 41 42 44 45
type                 : 4 5 13 14 15
var_list             : 3 4
vars                 : 1 2 13
while_statement      : 24
write_list           : 32 33
write_statement      : 22

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON vars function_list main_function
    (2) program -> . PROGRAM ID SEMICOLON vars empty main_function

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON vars function_list main_function
    (2) program -> PROGRAM . ID SEMICOLON vars empty main_function

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON vars function_list main_function
    (2) program -> PROGRAM ID . SEMICOLON vars empty main_function

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . vars function_list main_function
    (2) program -> PROGRAM ID SEMICOLON . vars empty main_function
    (3) vars -> . VARS var_list

    VARS            shift and go to state 6

    vars                           shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMICOLON vars . function_list main_function
    (2) program -> PROGRAM ID SEMICOLON vars . empty main_function
    (11) function_list -> . function_list function
    (12) function_list -> . empty
    (52) empty -> .

    MAIN            reduce using rule 52 (empty -> .)
    FUNCTION        reduce using rule 52 (empty -> .)

    function_list                  shift and go to state 7
    empty                          shift and go to state 8

state 6

    (3) vars -> VARS . var_list
    (4) var_list -> . var_list type id_list SEMICOLON
    (5) var_list -> . type id_list SEMICOLON
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13

    var_list                       shift and go to state 9
    type                           shift and go to state 10

state 7

    (1) program -> PROGRAM ID SEMICOLON vars function_list . main_function
    (11) function_list -> function_list . function
    (16) main_function -> . MAIN LPAREN RPAREN LBRACE statement_list RBRACE
    (13) function -> . FUNCTION type ID LPAREN param_list RPAREN SEMICOLON vars statement_list RBRACE

    MAIN            shift and go to state 16
    FUNCTION        shift and go to state 17

    main_function                  shift and go to state 14
    function                       shift and go to state 15

state 8

    (2) program -> PROGRAM ID SEMICOLON vars empty . main_function
    (12) function_list -> empty .
    (16) main_function -> . MAIN LPAREN RPAREN LBRACE statement_list RBRACE

  ! shift/reduce conflict for MAIN resolved as shift
    FUNCTION        reduce using rule 12 (function_list -> empty .)
    MAIN            shift and go to state 16

  ! MAIN            [ reduce using rule 12 (function_list -> empty .) ]

    main_function                  shift and go to state 18

state 9

    (3) vars -> VARS var_list .
    (4) var_list -> var_list . type id_list SEMICOLON
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . CHAR

    MAIN            reduce using rule 3 (vars -> VARS var_list .)
    FUNCTION        reduce using rule 3 (vars -> VARS var_list .)
    RBRACE          reduce using rule 3 (vars -> VARS var_list .)
    ID              reduce using rule 3 (vars -> VARS var_list .)
    READ            reduce using rule 3 (vars -> VARS var_list .)
    WRITE           reduce using rule 3 (vars -> VARS var_list .)
    IF              reduce using rule 3 (vars -> VARS var_list .)
    WHILE           reduce using rule 3 (vars -> VARS var_list .)
    FOR             reduce using rule 3 (vars -> VARS var_list .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13

    type                           shift and go to state 19

state 10

    (5) var_list -> type . id_list SEMICOLON
    (9) id_list -> . id_list COMMA ID
    (10) id_list -> . ID

    ID              shift and go to state 21

    id_list                        shift and go to state 20

state 11

    (6) type -> INT .

    ID              reduce using rule 6 (type -> INT .)


state 12

    (7) type -> FLOAT .

    ID              reduce using rule 7 (type -> FLOAT .)


state 13

    (8) type -> CHAR .

    ID              reduce using rule 8 (type -> CHAR .)


state 14

    (1) program -> PROGRAM ID SEMICOLON vars function_list main_function .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON vars function_list main_function .)


state 15

    (11) function_list -> function_list function .

    MAIN            reduce using rule 11 (function_list -> function_list function .)
    FUNCTION        reduce using rule 11 (function_list -> function_list function .)


state 16

    (16) main_function -> MAIN . LPAREN RPAREN LBRACE statement_list RBRACE

    LPAREN          shift and go to state 22


state 17

    (13) function -> FUNCTION . type ID LPAREN param_list RPAREN SEMICOLON vars statement_list RBRACE
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13

    type                           shift and go to state 23

state 18

    (2) program -> PROGRAM ID SEMICOLON vars empty main_function .

    $end            reduce using rule 2 (program -> PROGRAM ID SEMICOLON vars empty main_function .)


state 19

    (4) var_list -> var_list type . id_list SEMICOLON
    (9) id_list -> . id_list COMMA ID
    (10) id_list -> . ID

    ID              shift and go to state 21

    id_list                        shift and go to state 24

state 20

    (5) var_list -> type id_list . SEMICOLON
    (9) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 25
    COMMA           shift and go to state 26


state 21

    (10) id_list -> ID .

    SEMICOLON       reduce using rule 10 (id_list -> ID .)
    COMMA           reduce using rule 10 (id_list -> ID .)


state 22

    (16) main_function -> MAIN LPAREN . RPAREN LBRACE statement_list RBRACE

    RPAREN          shift and go to state 27


state 23

    (13) function -> FUNCTION type . ID LPAREN param_list RPAREN SEMICOLON vars statement_list RBRACE

    ID              shift and go to state 28


state 24

    (4) var_list -> var_list type id_list . SEMICOLON
    (9) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 29
    COMMA           shift and go to state 26


state 25

    (5) var_list -> type id_list SEMICOLON .

    INT             reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    FLOAT           reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    CHAR            reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    MAIN            reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    FUNCTION        reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    RBRACE          reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    ID              reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    READ            reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    WRITE           reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    IF              reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    WHILE           reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    FOR             reduce using rule 5 (var_list -> type id_list SEMICOLON .)


state 26

    (9) id_list -> id_list COMMA . ID

    ID              shift and go to state 30


state 27

    (16) main_function -> MAIN LPAREN RPAREN . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 31


state 28

    (13) function -> FUNCTION type ID . LPAREN param_list RPAREN SEMICOLON vars statement_list RBRACE

    LPAREN          shift and go to state 32


state 29

    (4) var_list -> var_list type id_list SEMICOLON .

    INT             reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    FLOAT           reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    CHAR            reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    MAIN            reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    FUNCTION        reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    RBRACE          reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    ID              reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    READ            reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    WRITE           reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    IF              reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    WHILE           reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    FOR             reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)


state 30

    (9) id_list -> id_list COMMA ID .

    SEMICOLON       reduce using rule 9 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 9 (id_list -> id_list COMMA ID .)


state 31

    (16) main_function -> MAIN LPAREN RPAREN LBRACE . statement_list RBRACE
    (17) statement_list -> . statement_list statement
    (18) statement_list -> . empty
    (52) empty -> .

    RBRACE          reduce using rule 52 (empty -> .)
    ID              reduce using rule 52 (empty -> .)
    READ            reduce using rule 52 (empty -> .)
    WRITE           reduce using rule 52 (empty -> .)
    IF              reduce using rule 52 (empty -> .)
    WHILE           reduce using rule 52 (empty -> .)
    FOR             reduce using rule 52 (empty -> .)

    statement_list                 shift and go to state 33
    empty                          shift and go to state 34

state 32

    (13) function -> FUNCTION type ID LPAREN . param_list RPAREN SEMICOLON vars statement_list RBRACE
    (14) param_list -> . param_list COMMA type ID
    (15) param_list -> . type ID
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13

    type                           shift and go to state 35
    param_list                     shift and go to state 36

state 33

    (16) main_function -> MAIN LPAREN RPAREN LBRACE statement_list . RBRACE
    (17) statement_list -> statement_list . statement
    (19) statement -> . assignment SEMICOLON
    (20) statement -> . function_call SEMICOLON
    (21) statement -> . read_statement SEMICOLON
    (22) statement -> . write_statement SEMICOLON
    (23) statement -> . if_statement
    (24) statement -> . while_statement
    (25) statement -> . for_statement
    (26) assignment -> . ID ASSIGN expression
    (27) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (28) function_call -> . ID LPAREN arg_list RPAREN
    (31) read_statement -> . READ id_list
    (32) write_statement -> . WRITE LPAREN write_list RPAREN
    (36) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (37) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (38) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (39) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 37
    ID              shift and go to state 46
    READ            shift and go to state 47
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    FOR             shift and go to state 51

    statement                      shift and go to state 38
    assignment                     shift and go to state 39
    function_call                  shift and go to state 40
    read_statement                 shift and go to state 41
    write_statement                shift and go to state 42
    if_statement                   shift and go to state 43
    while_statement                shift and go to state 44
    for_statement                  shift and go to state 45

state 34

    (18) statement_list -> empty .

    RBRACE          reduce using rule 18 (statement_list -> empty .)
    ID              reduce using rule 18 (statement_list -> empty .)
    READ            reduce using rule 18 (statement_list -> empty .)
    WRITE           reduce using rule 18 (statement_list -> empty .)
    IF              reduce using rule 18 (statement_list -> empty .)
    WHILE           reduce using rule 18 (statement_list -> empty .)
    FOR             reduce using rule 18 (statement_list -> empty .)


state 35

    (15) param_list -> type . ID

    ID              shift and go to state 52


state 36

    (13) function -> FUNCTION type ID LPAREN param_list . RPAREN SEMICOLON vars statement_list RBRACE
    (14) param_list -> param_list . COMMA type ID

    RPAREN          shift and go to state 53
    COMMA           shift and go to state 54


state 37

    (16) main_function -> MAIN LPAREN RPAREN LBRACE statement_list RBRACE .

    $end            reduce using rule 16 (main_function -> MAIN LPAREN RPAREN LBRACE statement_list RBRACE .)


state 38

    (17) statement_list -> statement_list statement .

    RBRACE          reduce using rule 17 (statement_list -> statement_list statement .)
    ID              reduce using rule 17 (statement_list -> statement_list statement .)
    READ            reduce using rule 17 (statement_list -> statement_list statement .)
    WRITE           reduce using rule 17 (statement_list -> statement_list statement .)
    IF              reduce using rule 17 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 17 (statement_list -> statement_list statement .)
    FOR             reduce using rule 17 (statement_list -> statement_list statement .)


state 39

    (19) statement -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 55


state 40

    (20) statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 56


state 41

    (21) statement -> read_statement . SEMICOLON

    SEMICOLON       shift and go to state 57


state 42

    (22) statement -> write_statement . SEMICOLON

    SEMICOLON       shift and go to state 58


state 43

    (23) statement -> if_statement .

    RBRACE          reduce using rule 23 (statement -> if_statement .)
    ID              reduce using rule 23 (statement -> if_statement .)
    READ            reduce using rule 23 (statement -> if_statement .)
    WRITE           reduce using rule 23 (statement -> if_statement .)
    IF              reduce using rule 23 (statement -> if_statement .)
    WHILE           reduce using rule 23 (statement -> if_statement .)
    FOR             reduce using rule 23 (statement -> if_statement .)


state 44

    (24) statement -> while_statement .

    RBRACE          reduce using rule 24 (statement -> while_statement .)
    ID              reduce using rule 24 (statement -> while_statement .)
    READ            reduce using rule 24 (statement -> while_statement .)
    WRITE           reduce using rule 24 (statement -> while_statement .)
    IF              reduce using rule 24 (statement -> while_statement .)
    WHILE           reduce using rule 24 (statement -> while_statement .)
    FOR             reduce using rule 24 (statement -> while_statement .)


state 45

    (25) statement -> for_statement .

    RBRACE          reduce using rule 25 (statement -> for_statement .)
    ID              reduce using rule 25 (statement -> for_statement .)
    READ            reduce using rule 25 (statement -> for_statement .)
    WRITE           reduce using rule 25 (statement -> for_statement .)
    IF              reduce using rule 25 (statement -> for_statement .)
    WHILE           reduce using rule 25 (statement -> for_statement .)
    FOR             reduce using rule 25 (statement -> for_statement .)


state 46

    (26) assignment -> ID . ASSIGN expression
    (27) assignment -> ID . LBRACKET expression RBRACKET ASSIGN expression
    (28) function_call -> ID . LPAREN arg_list RPAREN

    ASSIGN          shift and go to state 59
    LBRACKET        shift and go to state 60
    LPAREN          shift and go to state 61


state 47

    (31) read_statement -> READ . id_list
    (9) id_list -> . id_list COMMA ID
    (10) id_list -> . ID

    ID              shift and go to state 21

    id_list                        shift and go to state 62

state 48

    (32) write_statement -> WRITE . LPAREN write_list RPAREN

    LPAREN          shift and go to state 63


state 49

    (36) if_statement -> IF . LPAREN expression RPAREN LBRACE statement_list RBRACE
    (37) if_statement -> IF . LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    LPAREN          shift and go to state 64


state 50

    (38) while_statement -> WHILE . LPAREN expression RPAREN DO LBRACE statement_list RBRACE

    LPAREN          shift and go to state 65


state 51

    (39) for_statement -> FOR . ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    ID              shift and go to state 66


state 52

    (15) param_list -> type ID .

    RPAREN          reduce using rule 15 (param_list -> type ID .)
    COMMA           reduce using rule 15 (param_list -> type ID .)


state 53

    (13) function -> FUNCTION type ID LPAREN param_list RPAREN . SEMICOLON vars statement_list RBRACE

    SEMICOLON       shift and go to state 67


state 54

    (14) param_list -> param_list COMMA . type ID
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13

    type                           shift and go to state 68

state 55

    (19) statement -> assignment SEMICOLON .

    RBRACE          reduce using rule 19 (statement -> assignment SEMICOLON .)
    ID              reduce using rule 19 (statement -> assignment SEMICOLON .)
    READ            reduce using rule 19 (statement -> assignment SEMICOLON .)
    WRITE           reduce using rule 19 (statement -> assignment SEMICOLON .)
    IF              reduce using rule 19 (statement -> assignment SEMICOLON .)
    WHILE           reduce using rule 19 (statement -> assignment SEMICOLON .)
    FOR             reduce using rule 19 (statement -> assignment SEMICOLON .)


state 56

    (20) statement -> function_call SEMICOLON .

    RBRACE          reduce using rule 20 (statement -> function_call SEMICOLON .)
    ID              reduce using rule 20 (statement -> function_call SEMICOLON .)
    READ            reduce using rule 20 (statement -> function_call SEMICOLON .)
    WRITE           reduce using rule 20 (statement -> function_call SEMICOLON .)
    IF              reduce using rule 20 (statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 20 (statement -> function_call SEMICOLON .)
    FOR             reduce using rule 20 (statement -> function_call SEMICOLON .)


state 57

    (21) statement -> read_statement SEMICOLON .

    RBRACE          reduce using rule 21 (statement -> read_statement SEMICOLON .)
    ID              reduce using rule 21 (statement -> read_statement SEMICOLON .)
    READ            reduce using rule 21 (statement -> read_statement SEMICOLON .)
    WRITE           reduce using rule 21 (statement -> read_statement SEMICOLON .)
    IF              reduce using rule 21 (statement -> read_statement SEMICOLON .)
    WHILE           reduce using rule 21 (statement -> read_statement SEMICOLON .)
    FOR             reduce using rule 21 (statement -> read_statement SEMICOLON .)


state 58

    (22) statement -> write_statement SEMICOLON .

    RBRACE          reduce using rule 22 (statement -> write_statement SEMICOLON .)
    ID              reduce using rule 22 (statement -> write_statement SEMICOLON .)
    READ            reduce using rule 22 (statement -> write_statement SEMICOLON .)
    WRITE           reduce using rule 22 (statement -> write_statement SEMICOLON .)
    IF              reduce using rule 22 (statement -> write_statement SEMICOLON .)
    WHILE           reduce using rule 22 (statement -> write_statement SEMICOLON .)
    FOR             reduce using rule 22 (statement -> write_statement SEMICOLON .)


state 59

    (26) assignment -> ID ASSIGN . expression
    (40) expression -> . expression PLUS term
    (41) expression -> . expression MINUS term
    (42) expression -> . term
    (43) expression -> . STRING
    (44) term -> . term TIMES factor
    (45) term -> . term DIVIDE factor
    (46) term -> . factor
    (47) factor -> . LPAREN expression RPAREN
    (48) factor -> . ID
    (49) factor -> . ID LBRACKET expression RBRACKET
    (50) factor -> . INTEGER
    (51) factor -> . FLOATING_POINT

    STRING          shift and go to state 72
    LPAREN          shift and go to state 74
    ID              shift and go to state 69
    INTEGER         shift and go to state 75
    FLOATING_POINT  shift and go to state 76

    expression                     shift and go to state 70
    term                           shift and go to state 71
    factor                         shift and go to state 73

state 60

    (27) assignment -> ID LBRACKET . expression RBRACKET ASSIGN expression
    (40) expression -> . expression PLUS term
    (41) expression -> . expression MINUS term
    (42) expression -> . term
    (43) expression -> . STRING
    (44) term -> . term TIMES factor
    (45) term -> . term DIVIDE factor
    (46) term -> . factor
    (47) factor -> . LPAREN expression RPAREN
    (48) factor -> . ID
    (49) factor -> . ID LBRACKET expression RBRACKET
    (50) factor -> . INTEGER
    (51) factor -> . FLOATING_POINT

    STRING          shift and go to state 72
    LPAREN          shift and go to state 74
    ID              shift and go to state 69
    INTEGER         shift and go to state 75
    FLOATING_POINT  shift and go to state 76

    expression                     shift and go to state 77
    term                           shift and go to state 71
    factor                         shift and go to state 73

state 61

    (28) function_call -> ID LPAREN . arg_list RPAREN
    (29) arg_list -> . arg_list COMMA expression
    (30) arg_list -> . expression
    (40) expression -> . expression PLUS term
    (41) expression -> . expression MINUS term
    (42) expression -> . term
    (43) expression -> . STRING
    (44) term -> . term TIMES factor
    (45) term -> . term DIVIDE factor
    (46) term -> . factor
    (47) factor -> . LPAREN expression RPAREN
    (48) factor -> . ID
    (49) factor -> . ID LBRACKET expression RBRACKET
    (50) factor -> . INTEGER
    (51) factor -> . FLOATING_POINT

    STRING          shift and go to state 72
    LPAREN          shift and go to state 74
    ID              shift and go to state 69
    INTEGER         shift and go to state 75
    FLOATING_POINT  shift and go to state 76

    arg_list                       shift and go to state 78
    expression                     shift and go to state 79
    term                           shift and go to state 71
    factor                         shift and go to state 73

state 62

    (31) read_statement -> READ id_list .
    (9) id_list -> id_list . COMMA ID

    SEMICOLON       reduce using rule 31 (read_statement -> READ id_list .)
    COMMA           shift and go to state 26


state 63

    (32) write_statement -> WRITE LPAREN . write_list RPAREN
    (33) write_list -> . write_list COMMA expression
    (34) write_list -> . STRING
    (35) write_list -> . ID COMMA expression

    STRING          shift and go to state 81
    ID              shift and go to state 82

    write_list                     shift and go to state 80

state 64

    (36) if_statement -> IF LPAREN . expression RPAREN LBRACE statement_list RBRACE
    (37) if_statement -> IF LPAREN . expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (40) expression -> . expression PLUS term
    (41) expression -> . expression MINUS term
    (42) expression -> . term
    (43) expression -> . STRING
    (44) term -> . term TIMES factor
    (45) term -> . term DIVIDE factor
    (46) term -> . factor
    (47) factor -> . LPAREN expression RPAREN
    (48) factor -> . ID
    (49) factor -> . ID LBRACKET expression RBRACKET
    (50) factor -> . INTEGER
    (51) factor -> . FLOATING_POINT

    STRING          shift and go to state 72
    LPAREN          shift and go to state 74
    ID              shift and go to state 69
    INTEGER         shift and go to state 75
    FLOATING_POINT  shift and go to state 76

    expression                     shift and go to state 83
    term                           shift and go to state 71
    factor                         shift and go to state 73

state 65

    (38) while_statement -> WHILE LPAREN . expression RPAREN DO LBRACE statement_list RBRACE
    (40) expression -> . expression PLUS term
    (41) expression -> . expression MINUS term
    (42) expression -> . term
    (43) expression -> . STRING
    (44) term -> . term TIMES factor
    (45) term -> . term DIVIDE factor
    (46) term -> . factor
    (47) factor -> . LPAREN expression RPAREN
    (48) factor -> . ID
    (49) factor -> . ID LBRACKET expression RBRACKET
    (50) factor -> . INTEGER
    (51) factor -> . FLOATING_POINT

    STRING          shift and go to state 72
    LPAREN          shift and go to state 74
    ID              shift and go to state 69
    INTEGER         shift and go to state 75
    FLOATING_POINT  shift and go to state 76

    expression                     shift and go to state 84
    term                           shift and go to state 71
    factor                         shift and go to state 73

state 66

    (39) for_statement -> FOR ID . LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    LBRACKET        shift and go to state 85


state 67

    (13) function -> FUNCTION type ID LPAREN param_list RPAREN SEMICOLON . vars statement_list RBRACE
    (3) vars -> . VARS var_list

    VARS            shift and go to state 6

    vars                           shift and go to state 86

state 68

    (14) param_list -> param_list COMMA type . ID

    ID              shift and go to state 87


state 69

    (48) factor -> ID .
    (49) factor -> ID . LBRACKET expression RBRACKET

    TIMES           reduce using rule 48 (factor -> ID .)
    DIVIDE          reduce using rule 48 (factor -> ID .)
    PLUS            reduce using rule 48 (factor -> ID .)
    MINUS           reduce using rule 48 (factor -> ID .)
    SEMICOLON       reduce using rule 48 (factor -> ID .)
    RBRACKET        reduce using rule 48 (factor -> ID .)
    RPAREN          reduce using rule 48 (factor -> ID .)
    COMMA           reduce using rule 48 (factor -> ID .)
    TO              reduce using rule 48 (factor -> ID .)
    LBRACKET        shift and go to state 88


state 70

    (26) assignment -> ID ASSIGN expression .
    (40) expression -> expression . PLUS term
    (41) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 26 (assignment -> ID ASSIGN expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90


state 71

    (42) expression -> term .
    (44) term -> term . TIMES factor
    (45) term -> term . DIVIDE factor

    PLUS            reduce using rule 42 (expression -> term .)
    MINUS           reduce using rule 42 (expression -> term .)
    SEMICOLON       reduce using rule 42 (expression -> term .)
    RBRACKET        reduce using rule 42 (expression -> term .)
    RPAREN          reduce using rule 42 (expression -> term .)
    COMMA           reduce using rule 42 (expression -> term .)
    TO              reduce using rule 42 (expression -> term .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92


state 72

    (43) expression -> STRING .

    PLUS            reduce using rule 43 (expression -> STRING .)
    MINUS           reduce using rule 43 (expression -> STRING .)
    SEMICOLON       reduce using rule 43 (expression -> STRING .)
    RBRACKET        reduce using rule 43 (expression -> STRING .)
    RPAREN          reduce using rule 43 (expression -> STRING .)
    COMMA           reduce using rule 43 (expression -> STRING .)
    TO              reduce using rule 43 (expression -> STRING .)


state 73

    (46) term -> factor .

    TIMES           reduce using rule 46 (term -> factor .)
    DIVIDE          reduce using rule 46 (term -> factor .)
    PLUS            reduce using rule 46 (term -> factor .)
    MINUS           reduce using rule 46 (term -> factor .)
    SEMICOLON       reduce using rule 46 (term -> factor .)
    RBRACKET        reduce using rule 46 (term -> factor .)
    RPAREN          reduce using rule 46 (term -> factor .)
    COMMA           reduce using rule 46 (term -> factor .)
    TO              reduce using rule 46 (term -> factor .)


state 74

    (47) factor -> LPAREN . expression RPAREN
    (40) expression -> . expression PLUS term
    (41) expression -> . expression MINUS term
    (42) expression -> . term
    (43) expression -> . STRING
    (44) term -> . term TIMES factor
    (45) term -> . term DIVIDE factor
    (46) term -> . factor
    (47) factor -> . LPAREN expression RPAREN
    (48) factor -> . ID
    (49) factor -> . ID LBRACKET expression RBRACKET
    (50) factor -> . INTEGER
    (51) factor -> . FLOATING_POINT

    STRING          shift and go to state 72
    LPAREN          shift and go to state 74
    ID              shift and go to state 69
    INTEGER         shift and go to state 75
    FLOATING_POINT  shift and go to state 76

    expression                     shift and go to state 93
    term                           shift and go to state 71
    factor                         shift and go to state 73

state 75

    (50) factor -> INTEGER .

    TIMES           reduce using rule 50 (factor -> INTEGER .)
    DIVIDE          reduce using rule 50 (factor -> INTEGER .)
    PLUS            reduce using rule 50 (factor -> INTEGER .)
    MINUS           reduce using rule 50 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 50 (factor -> INTEGER .)
    RBRACKET        reduce using rule 50 (factor -> INTEGER .)
    RPAREN          reduce using rule 50 (factor -> INTEGER .)
    COMMA           reduce using rule 50 (factor -> INTEGER .)
    TO              reduce using rule 50 (factor -> INTEGER .)


state 76

    (51) factor -> FLOATING_POINT .

    TIMES           reduce using rule 51 (factor -> FLOATING_POINT .)
    DIVIDE          reduce using rule 51 (factor -> FLOATING_POINT .)
    PLUS            reduce using rule 51 (factor -> FLOATING_POINT .)
    MINUS           reduce using rule 51 (factor -> FLOATING_POINT .)
    SEMICOLON       reduce using rule 51 (factor -> FLOATING_POINT .)
    RBRACKET        reduce using rule 51 (factor -> FLOATING_POINT .)
    RPAREN          reduce using rule 51 (factor -> FLOATING_POINT .)
    COMMA           reduce using rule 51 (factor -> FLOATING_POINT .)
    TO              reduce using rule 51 (factor -> FLOATING_POINT .)


state 77

    (27) assignment -> ID LBRACKET expression . RBRACKET ASSIGN expression
    (40) expression -> expression . PLUS term
    (41) expression -> expression . MINUS term

    RBRACKET        shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90


state 78

    (28) function_call -> ID LPAREN arg_list . RPAREN
    (29) arg_list -> arg_list . COMMA expression

    RPAREN          shift and go to state 95
    COMMA           shift and go to state 96


state 79

    (30) arg_list -> expression .
    (40) expression -> expression . PLUS term
    (41) expression -> expression . MINUS term

    RPAREN          reduce using rule 30 (arg_list -> expression .)
    COMMA           reduce using rule 30 (arg_list -> expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90


state 80

    (32) write_statement -> WRITE LPAREN write_list . RPAREN
    (33) write_list -> write_list . COMMA expression

    RPAREN          shift and go to state 97
    COMMA           shift and go to state 98


state 81

    (34) write_list -> STRING .

    RPAREN          reduce using rule 34 (write_list -> STRING .)
    COMMA           reduce using rule 34 (write_list -> STRING .)


state 82

    (35) write_list -> ID . COMMA expression

    COMMA           shift and go to state 99


state 83

    (36) if_statement -> IF LPAREN expression . RPAREN LBRACE statement_list RBRACE
    (37) if_statement -> IF LPAREN expression . RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (40) expression -> expression . PLUS term
    (41) expression -> expression . MINUS term

    RPAREN          shift and go to state 100
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90


state 84

    (38) while_statement -> WHILE LPAREN expression . RPAREN DO LBRACE statement_list RBRACE
    (40) expression -> expression . PLUS term
    (41) expression -> expression . MINUS term

    RPAREN          shift and go to state 101
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90


state 85

    (39) for_statement -> FOR ID LBRACKET . expression TO expression RBRACKET DO LBRACE statement_list RBRACE
    (40) expression -> . expression PLUS term
    (41) expression -> . expression MINUS term
    (42) expression -> . term
    (43) expression -> . STRING
    (44) term -> . term TIMES factor
    (45) term -> . term DIVIDE factor
    (46) term -> . factor
    (47) factor -> . LPAREN expression RPAREN
    (48) factor -> . ID
    (49) factor -> . ID LBRACKET expression RBRACKET
    (50) factor -> . INTEGER
    (51) factor -> . FLOATING_POINT

    STRING          shift and go to state 72
    LPAREN          shift and go to state 74
    ID              shift and go to state 69
    INTEGER         shift and go to state 75
    FLOATING_POINT  shift and go to state 76

    expression                     shift and go to state 102
    term                           shift and go to state 71
    factor                         shift and go to state 73

state 86

    (13) function -> FUNCTION type ID LPAREN param_list RPAREN SEMICOLON vars . statement_list RBRACE
    (17) statement_list -> . statement_list statement
    (18) statement_list -> . empty
    (52) empty -> .

    RBRACE          reduce using rule 52 (empty -> .)
    ID              reduce using rule 52 (empty -> .)
    READ            reduce using rule 52 (empty -> .)
    WRITE           reduce using rule 52 (empty -> .)
    IF              reduce using rule 52 (empty -> .)
    WHILE           reduce using rule 52 (empty -> .)
    FOR             reduce using rule 52 (empty -> .)

    statement_list                 shift and go to state 103
    empty                          shift and go to state 34

state 87

    (14) param_list -> param_list COMMA type ID .

    RPAREN          reduce using rule 14 (param_list -> param_list COMMA type ID .)
    COMMA           reduce using rule 14 (param_list -> param_list COMMA type ID .)


state 88

    (49) factor -> ID LBRACKET . expression RBRACKET
    (40) expression -> . expression PLUS term
    (41) expression -> . expression MINUS term
    (42) expression -> . term
    (43) expression -> . STRING
    (44) term -> . term TIMES factor
    (45) term -> . term DIVIDE factor
    (46) term -> . factor
    (47) factor -> . LPAREN expression RPAREN
    (48) factor -> . ID
    (49) factor -> . ID LBRACKET expression RBRACKET
    (50) factor -> . INTEGER
    (51) factor -> . FLOATING_POINT

    STRING          shift and go to state 72
    LPAREN          shift and go to state 74
    ID              shift and go to state 69
    INTEGER         shift and go to state 75
    FLOATING_POINT  shift and go to state 76

    expression                     shift and go to state 104
    term                           shift and go to state 71
    factor                         shift and go to state 73

state 89

    (40) expression -> expression PLUS . term
    (44) term -> . term TIMES factor
    (45) term -> . term DIVIDE factor
    (46) term -> . factor
    (47) factor -> . LPAREN expression RPAREN
    (48) factor -> . ID
    (49) factor -> . ID LBRACKET expression RBRACKET
    (50) factor -> . INTEGER
    (51) factor -> . FLOATING_POINT

    LPAREN          shift and go to state 74
    ID              shift and go to state 69
    INTEGER         shift and go to state 75
    FLOATING_POINT  shift and go to state 76

    term                           shift and go to state 105
    factor                         shift and go to state 73

state 90

    (41) expression -> expression MINUS . term
    (44) term -> . term TIMES factor
    (45) term -> . term DIVIDE factor
    (46) term -> . factor
    (47) factor -> . LPAREN expression RPAREN
    (48) factor -> . ID
    (49) factor -> . ID LBRACKET expression RBRACKET
    (50) factor -> . INTEGER
    (51) factor -> . FLOATING_POINT

    LPAREN          shift and go to state 74
    ID              shift and go to state 69
    INTEGER         shift and go to state 75
    FLOATING_POINT  shift and go to state 76

    term                           shift and go to state 106
    factor                         shift and go to state 73

state 91

    (44) term -> term TIMES . factor
    (47) factor -> . LPAREN expression RPAREN
    (48) factor -> . ID
    (49) factor -> . ID LBRACKET expression RBRACKET
    (50) factor -> . INTEGER
    (51) factor -> . FLOATING_POINT

    LPAREN          shift and go to state 74
    ID              shift and go to state 69
    INTEGER         shift and go to state 75
    FLOATING_POINT  shift and go to state 76

    factor                         shift and go to state 107

state 92

    (45) term -> term DIVIDE . factor
    (47) factor -> . LPAREN expression RPAREN
    (48) factor -> . ID
    (49) factor -> . ID LBRACKET expression RBRACKET
    (50) factor -> . INTEGER
    (51) factor -> . FLOATING_POINT

    LPAREN          shift and go to state 74
    ID              shift and go to state 69
    INTEGER         shift and go to state 75
    FLOATING_POINT  shift and go to state 76

    factor                         shift and go to state 108

state 93

    (47) factor -> LPAREN expression . RPAREN
    (40) expression -> expression . PLUS term
    (41) expression -> expression . MINUS term

    RPAREN          shift and go to state 109
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90


state 94

    (27) assignment -> ID LBRACKET expression RBRACKET . ASSIGN expression

    ASSIGN          shift and go to state 110


state 95

    (28) function_call -> ID LPAREN arg_list RPAREN .

    SEMICOLON       reduce using rule 28 (function_call -> ID LPAREN arg_list RPAREN .)


state 96

    (29) arg_list -> arg_list COMMA . expression
    (40) expression -> . expression PLUS term
    (41) expression -> . expression MINUS term
    (42) expression -> . term
    (43) expression -> . STRING
    (44) term -> . term TIMES factor
    (45) term -> . term DIVIDE factor
    (46) term -> . factor
    (47) factor -> . LPAREN expression RPAREN
    (48) factor -> . ID
    (49) factor -> . ID LBRACKET expression RBRACKET
    (50) factor -> . INTEGER
    (51) factor -> . FLOATING_POINT

    STRING          shift and go to state 72
    LPAREN          shift and go to state 74
    ID              shift and go to state 69
    INTEGER         shift and go to state 75
    FLOATING_POINT  shift and go to state 76

    expression                     shift and go to state 111
    term                           shift and go to state 71
    factor                         shift and go to state 73

state 97

    (32) write_statement -> WRITE LPAREN write_list RPAREN .

    SEMICOLON       reduce using rule 32 (write_statement -> WRITE LPAREN write_list RPAREN .)


state 98

    (33) write_list -> write_list COMMA . expression
    (40) expression -> . expression PLUS term
    (41) expression -> . expression MINUS term
    (42) expression -> . term
    (43) expression -> . STRING
    (44) term -> . term TIMES factor
    (45) term -> . term DIVIDE factor
    (46) term -> . factor
    (47) factor -> . LPAREN expression RPAREN
    (48) factor -> . ID
    (49) factor -> . ID LBRACKET expression RBRACKET
    (50) factor -> . INTEGER
    (51) factor -> . FLOATING_POINT

    STRING          shift and go to state 72
    LPAREN          shift and go to state 74
    ID              shift and go to state 69
    INTEGER         shift and go to state 75
    FLOATING_POINT  shift and go to state 76

    expression                     shift and go to state 112
    term                           shift and go to state 71
    factor                         shift and go to state 73

state 99

    (35) write_list -> ID COMMA . expression
    (40) expression -> . expression PLUS term
    (41) expression -> . expression MINUS term
    (42) expression -> . term
    (43) expression -> . STRING
    (44) term -> . term TIMES factor
    (45) term -> . term DIVIDE factor
    (46) term -> . factor
    (47) factor -> . LPAREN expression RPAREN
    (48) factor -> . ID
    (49) factor -> . ID LBRACKET expression RBRACKET
    (50) factor -> . INTEGER
    (51) factor -> . FLOATING_POINT

    STRING          shift and go to state 72
    LPAREN          shift and go to state 74
    ID              shift and go to state 69
    INTEGER         shift and go to state 75
    FLOATING_POINT  shift and go to state 76

    expression                     shift and go to state 113
    term                           shift and go to state 71
    factor                         shift and go to state 73

state 100

    (36) if_statement -> IF LPAREN expression RPAREN . LBRACE statement_list RBRACE
    (37) if_statement -> IF LPAREN expression RPAREN . LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    LBRACE          shift and go to state 114


state 101

    (38) while_statement -> WHILE LPAREN expression RPAREN . DO LBRACE statement_list RBRACE

    DO              shift and go to state 115


state 102

    (39) for_statement -> FOR ID LBRACKET expression . TO expression RBRACKET DO LBRACE statement_list RBRACE
    (40) expression -> expression . PLUS term
    (41) expression -> expression . MINUS term

    TO              shift and go to state 116
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90


state 103

    (13) function -> FUNCTION type ID LPAREN param_list RPAREN SEMICOLON vars statement_list . RBRACE
    (17) statement_list -> statement_list . statement
    (19) statement -> . assignment SEMICOLON
    (20) statement -> . function_call SEMICOLON
    (21) statement -> . read_statement SEMICOLON
    (22) statement -> . write_statement SEMICOLON
    (23) statement -> . if_statement
    (24) statement -> . while_statement
    (25) statement -> . for_statement
    (26) assignment -> . ID ASSIGN expression
    (27) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (28) function_call -> . ID LPAREN arg_list RPAREN
    (31) read_statement -> . READ id_list
    (32) write_statement -> . WRITE LPAREN write_list RPAREN
    (36) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (37) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (38) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (39) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 117
    ID              shift and go to state 46
    READ            shift and go to state 47
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    FOR             shift and go to state 51

    statement                      shift and go to state 38
    assignment                     shift and go to state 39
    function_call                  shift and go to state 40
    read_statement                 shift and go to state 41
    write_statement                shift and go to state 42
    if_statement                   shift and go to state 43
    while_statement                shift and go to state 44
    for_statement                  shift and go to state 45

state 104

    (49) factor -> ID LBRACKET expression . RBRACKET
    (40) expression -> expression . PLUS term
    (41) expression -> expression . MINUS term

    RBRACKET        shift and go to state 118
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90


state 105

    (40) expression -> expression PLUS term .
    (44) term -> term . TIMES factor
    (45) term -> term . DIVIDE factor

    PLUS            reduce using rule 40 (expression -> expression PLUS term .)
    MINUS           reduce using rule 40 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 40 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 40 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 40 (expression -> expression PLUS term .)
    COMMA           reduce using rule 40 (expression -> expression PLUS term .)
    TO              reduce using rule 40 (expression -> expression PLUS term .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92


state 106

    (41) expression -> expression MINUS term .
    (44) term -> term . TIMES factor
    (45) term -> term . DIVIDE factor

    PLUS            reduce using rule 41 (expression -> expression MINUS term .)
    MINUS           reduce using rule 41 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 41 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 41 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 41 (expression -> expression MINUS term .)
    COMMA           reduce using rule 41 (expression -> expression MINUS term .)
    TO              reduce using rule 41 (expression -> expression MINUS term .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92


state 107

    (44) term -> term TIMES factor .

    TIMES           reduce using rule 44 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 44 (term -> term TIMES factor .)
    PLUS            reduce using rule 44 (term -> term TIMES factor .)
    MINUS           reduce using rule 44 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 44 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 44 (term -> term TIMES factor .)
    RPAREN          reduce using rule 44 (term -> term TIMES factor .)
    COMMA           reduce using rule 44 (term -> term TIMES factor .)
    TO              reduce using rule 44 (term -> term TIMES factor .)


state 108

    (45) term -> term DIVIDE factor .

    TIMES           reduce using rule 45 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 45 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 45 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 45 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 45 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 45 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 45 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 45 (term -> term DIVIDE factor .)
    TO              reduce using rule 45 (term -> term DIVIDE factor .)


state 109

    (47) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 47 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 47 (factor -> LPAREN expression RPAREN .)


state 110

    (27) assignment -> ID LBRACKET expression RBRACKET ASSIGN . expression
    (40) expression -> . expression PLUS term
    (41) expression -> . expression MINUS term
    (42) expression -> . term
    (43) expression -> . STRING
    (44) term -> . term TIMES factor
    (45) term -> . term DIVIDE factor
    (46) term -> . factor
    (47) factor -> . LPAREN expression RPAREN
    (48) factor -> . ID
    (49) factor -> . ID LBRACKET expression RBRACKET
    (50) factor -> . INTEGER
    (51) factor -> . FLOATING_POINT

    STRING          shift and go to state 72
    LPAREN          shift and go to state 74
    ID              shift and go to state 69
    INTEGER         shift and go to state 75
    FLOATING_POINT  shift and go to state 76

    expression                     shift and go to state 119
    term                           shift and go to state 71
    factor                         shift and go to state 73

state 111

    (29) arg_list -> arg_list COMMA expression .
    (40) expression -> expression . PLUS term
    (41) expression -> expression . MINUS term

    RPAREN          reduce using rule 29 (arg_list -> arg_list COMMA expression .)
    COMMA           reduce using rule 29 (arg_list -> arg_list COMMA expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90


state 112

    (33) write_list -> write_list COMMA expression .
    (40) expression -> expression . PLUS term
    (41) expression -> expression . MINUS term

    RPAREN          reduce using rule 33 (write_list -> write_list COMMA expression .)
    COMMA           reduce using rule 33 (write_list -> write_list COMMA expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90


state 113

    (35) write_list -> ID COMMA expression .
    (40) expression -> expression . PLUS term
    (41) expression -> expression . MINUS term

    RPAREN          reduce using rule 35 (write_list -> ID COMMA expression .)
    COMMA           reduce using rule 35 (write_list -> ID COMMA expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90


state 114

    (36) if_statement -> IF LPAREN expression RPAREN LBRACE . statement_list RBRACE
    (37) if_statement -> IF LPAREN expression RPAREN LBRACE . statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (17) statement_list -> . statement_list statement
    (18) statement_list -> . empty
    (52) empty -> .

    RBRACE          reduce using rule 52 (empty -> .)
    ID              reduce using rule 52 (empty -> .)
    READ            reduce using rule 52 (empty -> .)
    WRITE           reduce using rule 52 (empty -> .)
    IF              reduce using rule 52 (empty -> .)
    WHILE           reduce using rule 52 (empty -> .)
    FOR             reduce using rule 52 (empty -> .)

    statement_list                 shift and go to state 120
    empty                          shift and go to state 34

state 115

    (38) while_statement -> WHILE LPAREN expression RPAREN DO . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 121


state 116

    (39) for_statement -> FOR ID LBRACKET expression TO . expression RBRACKET DO LBRACE statement_list RBRACE
    (40) expression -> . expression PLUS term
    (41) expression -> . expression MINUS term
    (42) expression -> . term
    (43) expression -> . STRING
    (44) term -> . term TIMES factor
    (45) term -> . term DIVIDE factor
    (46) term -> . factor
    (47) factor -> . LPAREN expression RPAREN
    (48) factor -> . ID
    (49) factor -> . ID LBRACKET expression RBRACKET
    (50) factor -> . INTEGER
    (51) factor -> . FLOATING_POINT

    STRING          shift and go to state 72
    LPAREN          shift and go to state 74
    ID              shift and go to state 69
    INTEGER         shift and go to state 75
    FLOATING_POINT  shift and go to state 76

    expression                     shift and go to state 122
    term                           shift and go to state 71
    factor                         shift and go to state 73

state 117

    (13) function -> FUNCTION type ID LPAREN param_list RPAREN SEMICOLON vars statement_list RBRACE .

    MAIN            reduce using rule 13 (function -> FUNCTION type ID LPAREN param_list RPAREN SEMICOLON vars statement_list RBRACE .)
    FUNCTION        reduce using rule 13 (function -> FUNCTION type ID LPAREN param_list RPAREN SEMICOLON vars statement_list RBRACE .)


state 118

    (49) factor -> ID LBRACKET expression RBRACKET .

    TIMES           reduce using rule 49 (factor -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 49 (factor -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 49 (factor -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 49 (factor -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 49 (factor -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 49 (factor -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 49 (factor -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 49 (factor -> ID LBRACKET expression RBRACKET .)
    TO              reduce using rule 49 (factor -> ID LBRACKET expression RBRACKET .)


state 119

    (27) assignment -> ID LBRACKET expression RBRACKET ASSIGN expression .
    (40) expression -> expression . PLUS term
    (41) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 27 (assignment -> ID LBRACKET expression RBRACKET ASSIGN expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90


state 120

    (36) if_statement -> IF LPAREN expression RPAREN LBRACE statement_list . RBRACE
    (37) if_statement -> IF LPAREN expression RPAREN LBRACE statement_list . RBRACE ELSE LBRACE statement_list RBRACE
    (17) statement_list -> statement_list . statement
    (19) statement -> . assignment SEMICOLON
    (20) statement -> . function_call SEMICOLON
    (21) statement -> . read_statement SEMICOLON
    (22) statement -> . write_statement SEMICOLON
    (23) statement -> . if_statement
    (24) statement -> . while_statement
    (25) statement -> . for_statement
    (26) assignment -> . ID ASSIGN expression
    (27) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (28) function_call -> . ID LPAREN arg_list RPAREN
    (31) read_statement -> . READ id_list
    (32) write_statement -> . WRITE LPAREN write_list RPAREN
    (36) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (37) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (38) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (39) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 123
    ID              shift and go to state 46
    READ            shift and go to state 47
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    FOR             shift and go to state 51

    statement                      shift and go to state 38
    assignment                     shift and go to state 39
    function_call                  shift and go to state 40
    read_statement                 shift and go to state 41
    write_statement                shift and go to state 42
    if_statement                   shift and go to state 43
    while_statement                shift and go to state 44
    for_statement                  shift and go to state 45

state 121

    (38) while_statement -> WHILE LPAREN expression RPAREN DO LBRACE . statement_list RBRACE
    (17) statement_list -> . statement_list statement
    (18) statement_list -> . empty
    (52) empty -> .

    RBRACE          reduce using rule 52 (empty -> .)
    ID              reduce using rule 52 (empty -> .)
    READ            reduce using rule 52 (empty -> .)
    WRITE           reduce using rule 52 (empty -> .)
    IF              reduce using rule 52 (empty -> .)
    WHILE           reduce using rule 52 (empty -> .)
    FOR             reduce using rule 52 (empty -> .)

    statement_list                 shift and go to state 124
    empty                          shift and go to state 34

state 122

    (39) for_statement -> FOR ID LBRACKET expression TO expression . RBRACKET DO LBRACE statement_list RBRACE
    (40) expression -> expression . PLUS term
    (41) expression -> expression . MINUS term

    RBRACKET        shift and go to state 125
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90


state 123

    (36) if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .
    (37) if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE . ELSE LBRACE statement_list RBRACE

    RBRACE          reduce using rule 36 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ID              reduce using rule 36 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    READ            reduce using rule 36 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 36 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 36 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 36 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    FOR             reduce using rule 36 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ELSE            shift and go to state 126


state 124

    (38) while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list . RBRACE
    (17) statement_list -> statement_list . statement
    (19) statement -> . assignment SEMICOLON
    (20) statement -> . function_call SEMICOLON
    (21) statement -> . read_statement SEMICOLON
    (22) statement -> . write_statement SEMICOLON
    (23) statement -> . if_statement
    (24) statement -> . while_statement
    (25) statement -> . for_statement
    (26) assignment -> . ID ASSIGN expression
    (27) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (28) function_call -> . ID LPAREN arg_list RPAREN
    (31) read_statement -> . READ id_list
    (32) write_statement -> . WRITE LPAREN write_list RPAREN
    (36) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (37) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (38) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (39) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 127
    ID              shift and go to state 46
    READ            shift and go to state 47
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    FOR             shift and go to state 51

    statement                      shift and go to state 38
    assignment                     shift and go to state 39
    function_call                  shift and go to state 40
    read_statement                 shift and go to state 41
    write_statement                shift and go to state 42
    if_statement                   shift and go to state 43
    while_statement                shift and go to state 44
    for_statement                  shift and go to state 45

state 125

    (39) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET . DO LBRACE statement_list RBRACE

    DO              shift and go to state 128


state 126

    (37) if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 129


state 127

    (38) while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 38 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    ID              reduce using rule 38 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    READ            reduce using rule 38 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 38 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    IF              reduce using rule 38 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 38 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    FOR             reduce using rule 38 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)


state 128

    (39) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 130


state 129

    (37) if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE . statement_list RBRACE
    (17) statement_list -> . statement_list statement
    (18) statement_list -> . empty
    (52) empty -> .

    RBRACE          reduce using rule 52 (empty -> .)
    ID              reduce using rule 52 (empty -> .)
    READ            reduce using rule 52 (empty -> .)
    WRITE           reduce using rule 52 (empty -> .)
    IF              reduce using rule 52 (empty -> .)
    WHILE           reduce using rule 52 (empty -> .)
    FOR             reduce using rule 52 (empty -> .)

    statement_list                 shift and go to state 131
    empty                          shift and go to state 34

state 130

    (39) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE . statement_list RBRACE
    (17) statement_list -> . statement_list statement
    (18) statement_list -> . empty
    (52) empty -> .

    RBRACE          reduce using rule 52 (empty -> .)
    ID              reduce using rule 52 (empty -> .)
    READ            reduce using rule 52 (empty -> .)
    WRITE           reduce using rule 52 (empty -> .)
    IF              reduce using rule 52 (empty -> .)
    WHILE           reduce using rule 52 (empty -> .)
    FOR             reduce using rule 52 (empty -> .)

    statement_list                 shift and go to state 132
    empty                          shift and go to state 34

state 131

    (37) if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list . RBRACE
    (17) statement_list -> statement_list . statement
    (19) statement -> . assignment SEMICOLON
    (20) statement -> . function_call SEMICOLON
    (21) statement -> . read_statement SEMICOLON
    (22) statement -> . write_statement SEMICOLON
    (23) statement -> . if_statement
    (24) statement -> . while_statement
    (25) statement -> . for_statement
    (26) assignment -> . ID ASSIGN expression
    (27) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (28) function_call -> . ID LPAREN arg_list RPAREN
    (31) read_statement -> . READ id_list
    (32) write_statement -> . WRITE LPAREN write_list RPAREN
    (36) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (37) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (38) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (39) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 133
    ID              shift and go to state 46
    READ            shift and go to state 47
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    FOR             shift and go to state 51

    statement                      shift and go to state 38
    assignment                     shift and go to state 39
    function_call                  shift and go to state 40
    read_statement                 shift and go to state 41
    write_statement                shift and go to state 42
    if_statement                   shift and go to state 43
    while_statement                shift and go to state 44
    for_statement                  shift and go to state 45

state 132

    (39) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list . RBRACE
    (17) statement_list -> statement_list . statement
    (19) statement -> . assignment SEMICOLON
    (20) statement -> . function_call SEMICOLON
    (21) statement -> . read_statement SEMICOLON
    (22) statement -> . write_statement SEMICOLON
    (23) statement -> . if_statement
    (24) statement -> . while_statement
    (25) statement -> . for_statement
    (26) assignment -> . ID ASSIGN expression
    (27) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (28) function_call -> . ID LPAREN arg_list RPAREN
    (31) read_statement -> . READ id_list
    (32) write_statement -> . WRITE LPAREN write_list RPAREN
    (36) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (37) if_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (38) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (39) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 134
    ID              shift and go to state 46
    READ            shift and go to state 47
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    FOR             shift and go to state 51

    statement                      shift and go to state 38
    assignment                     shift and go to state 39
    function_call                  shift and go to state 40
    read_statement                 shift and go to state 41
    write_statement                shift and go to state 42
    if_statement                   shift and go to state 43
    while_statement                shift and go to state 44
    for_statement                  shift and go to state 45

state 133

    (37) if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 37 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    ID              reduce using rule 37 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    READ            reduce using rule 37 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 37 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    IF              reduce using rule 37 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 37 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    FOR             reduce using rule 37 (if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)


state 134

    (39) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 39 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    ID              reduce using rule 39 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    READ            reduce using rule 39 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 39 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    IF              reduce using rule 39 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 39 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    FOR             reduce using rule 39 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 8 resolved as shift
