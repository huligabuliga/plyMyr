Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARC
    CIRCLE
    COLOR
    LINE
    NOT
    PENDOWN
    PENUP
    POINT
    THICKNESS
    VOID

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON vars function_list main_function
Rule 2     program -> PROGRAM ID SEMICOLON vars empty main_function
Rule 3     vars -> VARS var_list
Rule 4     var_list -> var_list type id_list SEMICOLON
Rule 5     var_list -> type id_list SEMICOLON
Rule 6     type -> INT
Rule 7     type -> FLOAT
Rule 8     type -> BOOL
Rule 9     type -> CHAR
Rule 10    id_list -> id_list COMMA ID
Rule 11    id_list -> ID
Rule 12    function_list -> function_list function
Rule 13    function_list -> empty
Rule 14    function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list return_statement RBRACE
Rule 15    function -> FUNCTION type ID LPAREN param_list RPAREN LBRACE statement_list return_statement RBRACE
Rule 16    param_list -> param_list COMMA type ID
Rule 17    param_list -> type ID
Rule 18    main_function -> MAIN LPAREN RPAREN LBRACE statement_list RBRACE
Rule 19    statement_list -> statement_list statement
Rule 20    statement_list -> empty
Rule 21    statement -> assignment SEMICOLON
Rule 22    statement -> function_call SEMICOLON
Rule 23    statement -> read_statement SEMICOLON
Rule 24    statement -> write_statement SEMICOLON
Rule 25    statement -> if_statement
Rule 26    statement -> while_statement
Rule 27    statement -> for_statement
Rule 28    statement -> return_statement SEMICOLON
Rule 29    assignment -> ID ASSIGN expression
Rule 30    assignment -> ID LBRACKET expression RBRACKET ASSIGN expression
Rule 31    function_call -> ID LPAREN arg_list RPAREN
Rule 32    arg_list -> arg_list COMMA expression
Rule 33    arg_list -> expression
Rule 34    read_statement -> READ id_list
Rule 35    write_statement -> WRITE LPAREN write_list RPAREN
Rule 36    write_list -> write_list COMMA expression
Rule 37    write_list -> STRING
Rule 38    write_list -> ID COMMA expression
Rule 39    if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
Rule 40    if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
Rule 41    while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
Rule 42    for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE
Rule 43    return_statement -> RETURN LPAREN expression RPAREN SEMICOLON
Rule 44    expression -> expression PLUS term
Rule 45    expression -> expression MINUS term
Rule 46    expression -> expression EQ term
Rule 47    expression -> expression NE term
Rule 48    expression -> expression LT term
Rule 49    expression -> expression LE term
Rule 50    expression -> expression GT term
Rule 51    expression -> expression GE term
Rule 52    expression -> expression AND term
Rule 53    expression -> expression OR term
Rule 54    expression -> term
Rule 55    expression -> STRING
Rule 56    term -> term TIMES factor
Rule 57    term -> term DIVIDE factor
Rule 58    term -> function_call
Rule 59    term -> factor
Rule 60    factor -> LPAREN expression RPAREN
Rule 61    factor -> ID
Rule 62    factor -> ID LBRACKET expression RBRACKET
Rule 63    factor -> INTEGER
Rule 64    factor -> FLOATING_POINT
Rule 65    empty -> <empty>

Terminals, with rules where they appear

AND                  : 52
ARC                  : 
ASSIGN               : 29 30
BOOL                 : 8
CHAR                 : 9
CIRCLE               : 
COLOR                : 
COMMA                : 10 16 32 36 38
DIVIDE               : 57
DO                   : 41 42
ELSE                 : 40
EQ                   : 46
FLOAT                : 7
FLOATING_POINT       : 64
FOR                  : 42
FUNCTION             : 14 15
GE                   : 51
GT                   : 50
ID                   : 1 2 10 11 14 15 16 17 29 30 31 38 42 61 62
IF                   : 39 40
INT                  : 6
INTEGER              : 63
LBRACE               : 14 15 18 39 40 40 41 42
LBRACKET             : 30 42 62
LE                   : 49
LINE                 : 
LPAREN               : 14 15 18 31 35 39 40 41 43 60
LT                   : 48
MAIN                 : 18
MINUS                : 45
NE                   : 47
NOT                  : 
OR                   : 53
PENDOWN              : 
PENUP                : 
PLUS                 : 44
POINT                : 
PROGRAM              : 1 2
RBRACE               : 14 15 18 39 40 40 41 42
RBRACKET             : 30 42 62
READ                 : 34
RETURN               : 43
RPAREN               : 14 15 18 31 35 39 40 41 43 60
SEMICOLON            : 1 2 4 5 21 22 23 24 28 43
STRING               : 37 55
THEN                 : 39 40
THICKNESS            : 
TIMES                : 56
TO                   : 42
VARS                 : 3
VOID                 : 
WHILE                : 41
WRITE                : 35
error                : 

Nonterminals, with rules where they appear

arg_list             : 31 32
assignment           : 21
empty                : 2 13 20
expression           : 29 30 30 32 33 36 38 39 40 41 42 42 43 44 45 46 47 48 49 50 51 52 53 60 62
factor               : 56 57 59
for_statement        : 27
function             : 12
function_call        : 22 58
function_list        : 1 12
id_list              : 4 5 10 34
if_statement         : 25
main_function        : 1 2
param_list           : 14 15 16
program              : 0
read_statement       : 23
return_statement     : 14 15 28
statement            : 19
statement_list       : 14 15 18 19 39 40 40 41 42
term                 : 44 45 46 47 48 49 50 51 52 53 54 56 57
type                 : 4 5 14 15 16 17
var_list             : 3 4
vars                 : 1 2 14
while_statement      : 26
write_list           : 35 36
write_statement      : 24

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON vars function_list main_function
    (2) program -> . PROGRAM ID SEMICOLON vars empty main_function

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON vars function_list main_function
    (2) program -> PROGRAM . ID SEMICOLON vars empty main_function

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON vars function_list main_function
    (2) program -> PROGRAM ID . SEMICOLON vars empty main_function

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . vars function_list main_function
    (2) program -> PROGRAM ID SEMICOLON . vars empty main_function
    (3) vars -> . VARS var_list

    VARS            shift and go to state 6

    vars                           shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMICOLON vars . function_list main_function
    (2) program -> PROGRAM ID SEMICOLON vars . empty main_function
    (12) function_list -> . function_list function
    (13) function_list -> . empty
    (65) empty -> .

    MAIN            reduce using rule 65 (empty -> .)
    FUNCTION        reduce using rule 65 (empty -> .)

    function_list                  shift and go to state 7
    empty                          shift and go to state 8

state 6

    (3) vars -> VARS . var_list
    (4) var_list -> . var_list type id_list SEMICOLON
    (5) var_list -> . type id_list SEMICOLON
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOL
    (9) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    BOOL            shift and go to state 13
    CHAR            shift and go to state 14

    var_list                       shift and go to state 9
    type                           shift and go to state 10

state 7

    (1) program -> PROGRAM ID SEMICOLON vars function_list . main_function
    (12) function_list -> function_list . function
    (18) main_function -> . MAIN LPAREN RPAREN LBRACE statement_list RBRACE
    (14) function -> . FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list return_statement RBRACE
    (15) function -> . FUNCTION type ID LPAREN param_list RPAREN LBRACE statement_list return_statement RBRACE

    MAIN            shift and go to state 17
    FUNCTION        shift and go to state 18

    main_function                  shift and go to state 15
    function                       shift and go to state 16

state 8

    (2) program -> PROGRAM ID SEMICOLON vars empty . main_function
    (13) function_list -> empty .
    (18) main_function -> . MAIN LPAREN RPAREN LBRACE statement_list RBRACE

  ! shift/reduce conflict for MAIN resolved as shift
    FUNCTION        reduce using rule 13 (function_list -> empty .)
    MAIN            shift and go to state 17

  ! MAIN            [ reduce using rule 13 (function_list -> empty .) ]

    main_function                  shift and go to state 19

state 9

    (3) vars -> VARS var_list .
    (4) var_list -> var_list . type id_list SEMICOLON
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOL
    (9) type -> . CHAR

    MAIN            reduce using rule 3 (vars -> VARS var_list .)
    FUNCTION        reduce using rule 3 (vars -> VARS var_list .)
    LBRACE          reduce using rule 3 (vars -> VARS var_list .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    BOOL            shift and go to state 13
    CHAR            shift and go to state 14

    type                           shift and go to state 20

state 10

    (5) var_list -> type . id_list SEMICOLON
    (10) id_list -> . id_list COMMA ID
    (11) id_list -> . ID

    ID              shift and go to state 22

    id_list                        shift and go to state 21

state 11

    (6) type -> INT .

    ID              reduce using rule 6 (type -> INT .)


state 12

    (7) type -> FLOAT .

    ID              reduce using rule 7 (type -> FLOAT .)


state 13

    (8) type -> BOOL .

    ID              reduce using rule 8 (type -> BOOL .)


state 14

    (9) type -> CHAR .

    ID              reduce using rule 9 (type -> CHAR .)


state 15

    (1) program -> PROGRAM ID SEMICOLON vars function_list main_function .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON vars function_list main_function .)


state 16

    (12) function_list -> function_list function .

    MAIN            reduce using rule 12 (function_list -> function_list function .)
    FUNCTION        reduce using rule 12 (function_list -> function_list function .)


state 17

    (18) main_function -> MAIN . LPAREN RPAREN LBRACE statement_list RBRACE

    LPAREN          shift and go to state 23


state 18

    (14) function -> FUNCTION . type ID LPAREN param_list RPAREN vars LBRACE statement_list return_statement RBRACE
    (15) function -> FUNCTION . type ID LPAREN param_list RPAREN LBRACE statement_list return_statement RBRACE
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOL
    (9) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    BOOL            shift and go to state 13
    CHAR            shift and go to state 14

    type                           shift and go to state 24

state 19

    (2) program -> PROGRAM ID SEMICOLON vars empty main_function .

    $end            reduce using rule 2 (program -> PROGRAM ID SEMICOLON vars empty main_function .)


state 20

    (4) var_list -> var_list type . id_list SEMICOLON
    (10) id_list -> . id_list COMMA ID
    (11) id_list -> . ID

    ID              shift and go to state 22

    id_list                        shift and go to state 25

state 21

    (5) var_list -> type id_list . SEMICOLON
    (10) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 26
    COMMA           shift and go to state 27


state 22

    (11) id_list -> ID .

    SEMICOLON       reduce using rule 11 (id_list -> ID .)
    COMMA           reduce using rule 11 (id_list -> ID .)


state 23

    (18) main_function -> MAIN LPAREN . RPAREN LBRACE statement_list RBRACE

    RPAREN          shift and go to state 28


state 24

    (14) function -> FUNCTION type . ID LPAREN param_list RPAREN vars LBRACE statement_list return_statement RBRACE
    (15) function -> FUNCTION type . ID LPAREN param_list RPAREN LBRACE statement_list return_statement RBRACE

    ID              shift and go to state 29


state 25

    (4) var_list -> var_list type id_list . SEMICOLON
    (10) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 30
    COMMA           shift and go to state 27


state 26

    (5) var_list -> type id_list SEMICOLON .

    INT             reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    FLOAT           reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    BOOL            reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    CHAR            reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    MAIN            reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    FUNCTION        reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    LBRACE          reduce using rule 5 (var_list -> type id_list SEMICOLON .)


state 27

    (10) id_list -> id_list COMMA . ID

    ID              shift and go to state 31


state 28

    (18) main_function -> MAIN LPAREN RPAREN . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 32


state 29

    (14) function -> FUNCTION type ID . LPAREN param_list RPAREN vars LBRACE statement_list return_statement RBRACE
    (15) function -> FUNCTION type ID . LPAREN param_list RPAREN LBRACE statement_list return_statement RBRACE

    LPAREN          shift and go to state 33


state 30

    (4) var_list -> var_list type id_list SEMICOLON .

    INT             reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    FLOAT           reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    BOOL            reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    CHAR            reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    MAIN            reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    FUNCTION        reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    LBRACE          reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)


state 31

    (10) id_list -> id_list COMMA ID .

    SEMICOLON       reduce using rule 10 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 10 (id_list -> id_list COMMA ID .)


state 32

    (18) main_function -> MAIN LPAREN RPAREN LBRACE . statement_list RBRACE
    (19) statement_list -> . statement_list statement
    (20) statement_list -> . empty
    (65) empty -> .

    RBRACE          reduce using rule 65 (empty -> .)
    ID              reduce using rule 65 (empty -> .)
    READ            reduce using rule 65 (empty -> .)
    WRITE           reduce using rule 65 (empty -> .)
    IF              reduce using rule 65 (empty -> .)
    WHILE           reduce using rule 65 (empty -> .)
    FOR             reduce using rule 65 (empty -> .)
    RETURN          reduce using rule 65 (empty -> .)

    statement_list                 shift and go to state 34
    empty                          shift and go to state 35

state 33

    (14) function -> FUNCTION type ID LPAREN . param_list RPAREN vars LBRACE statement_list return_statement RBRACE
    (15) function -> FUNCTION type ID LPAREN . param_list RPAREN LBRACE statement_list return_statement RBRACE
    (16) param_list -> . param_list COMMA type ID
    (17) param_list -> . type ID
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOL
    (9) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    BOOL            shift and go to state 13
    CHAR            shift and go to state 14

    type                           shift and go to state 36
    param_list                     shift and go to state 37

state 34

    (18) main_function -> MAIN LPAREN RPAREN LBRACE statement_list . RBRACE
    (19) statement_list -> statement_list . statement
    (21) statement -> . assignment SEMICOLON
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . read_statement SEMICOLON
    (24) statement -> . write_statement SEMICOLON
    (25) statement -> . if_statement
    (26) statement -> . while_statement
    (27) statement -> . for_statement
    (28) statement -> . return_statement SEMICOLON
    (29) assignment -> . ID ASSIGN expression
    (30) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (34) read_statement -> . READ id_list
    (35) write_statement -> . WRITE LPAREN write_list RPAREN
    (39) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (40) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (41) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (42) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE
    (43) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON

    RBRACE          shift and go to state 38
    ID              shift and go to state 48
    READ            shift and go to state 49
    WRITE           shift and go to state 50
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    RETURN          shift and go to state 54

    statement                      shift and go to state 39
    assignment                     shift and go to state 40
    function_call                  shift and go to state 41
    read_statement                 shift and go to state 42
    write_statement                shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    for_statement                  shift and go to state 46
    return_statement               shift and go to state 47

state 35

    (20) statement_list -> empty .

    RBRACE          reduce using rule 20 (statement_list -> empty .)
    ID              reduce using rule 20 (statement_list -> empty .)
    READ            reduce using rule 20 (statement_list -> empty .)
    WRITE           reduce using rule 20 (statement_list -> empty .)
    IF              reduce using rule 20 (statement_list -> empty .)
    WHILE           reduce using rule 20 (statement_list -> empty .)
    FOR             reduce using rule 20 (statement_list -> empty .)
    RETURN          reduce using rule 20 (statement_list -> empty .)


state 36

    (17) param_list -> type . ID

    ID              shift and go to state 55


state 37

    (14) function -> FUNCTION type ID LPAREN param_list . RPAREN vars LBRACE statement_list return_statement RBRACE
    (15) function -> FUNCTION type ID LPAREN param_list . RPAREN LBRACE statement_list return_statement RBRACE
    (16) param_list -> param_list . COMMA type ID

    RPAREN          shift and go to state 56
    COMMA           shift and go to state 57


state 38

    (18) main_function -> MAIN LPAREN RPAREN LBRACE statement_list RBRACE .

    $end            reduce using rule 18 (main_function -> MAIN LPAREN RPAREN LBRACE statement_list RBRACE .)


state 39

    (19) statement_list -> statement_list statement .

    RBRACE          reduce using rule 19 (statement_list -> statement_list statement .)
    ID              reduce using rule 19 (statement_list -> statement_list statement .)
    READ            reduce using rule 19 (statement_list -> statement_list statement .)
    WRITE           reduce using rule 19 (statement_list -> statement_list statement .)
    IF              reduce using rule 19 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 19 (statement_list -> statement_list statement .)
    FOR             reduce using rule 19 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 19 (statement_list -> statement_list statement .)


state 40

    (21) statement -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 58


state 41

    (22) statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 59


state 42

    (23) statement -> read_statement . SEMICOLON

    SEMICOLON       shift and go to state 60


state 43

    (24) statement -> write_statement . SEMICOLON

    SEMICOLON       shift and go to state 61


state 44

    (25) statement -> if_statement .

    RBRACE          reduce using rule 25 (statement -> if_statement .)
    ID              reduce using rule 25 (statement -> if_statement .)
    READ            reduce using rule 25 (statement -> if_statement .)
    WRITE           reduce using rule 25 (statement -> if_statement .)
    IF              reduce using rule 25 (statement -> if_statement .)
    WHILE           reduce using rule 25 (statement -> if_statement .)
    FOR             reduce using rule 25 (statement -> if_statement .)
    RETURN          reduce using rule 25 (statement -> if_statement .)


state 45

    (26) statement -> while_statement .

    RBRACE          reduce using rule 26 (statement -> while_statement .)
    ID              reduce using rule 26 (statement -> while_statement .)
    READ            reduce using rule 26 (statement -> while_statement .)
    WRITE           reduce using rule 26 (statement -> while_statement .)
    IF              reduce using rule 26 (statement -> while_statement .)
    WHILE           reduce using rule 26 (statement -> while_statement .)
    FOR             reduce using rule 26 (statement -> while_statement .)
    RETURN          reduce using rule 26 (statement -> while_statement .)


state 46

    (27) statement -> for_statement .

    RBRACE          reduce using rule 27 (statement -> for_statement .)
    ID              reduce using rule 27 (statement -> for_statement .)
    READ            reduce using rule 27 (statement -> for_statement .)
    WRITE           reduce using rule 27 (statement -> for_statement .)
    IF              reduce using rule 27 (statement -> for_statement .)
    WHILE           reduce using rule 27 (statement -> for_statement .)
    FOR             reduce using rule 27 (statement -> for_statement .)
    RETURN          reduce using rule 27 (statement -> for_statement .)


state 47

    (28) statement -> return_statement . SEMICOLON

    SEMICOLON       shift and go to state 62


state 48

    (29) assignment -> ID . ASSIGN expression
    (30) assignment -> ID . LBRACKET expression RBRACKET ASSIGN expression
    (31) function_call -> ID . LPAREN arg_list RPAREN

    ASSIGN          shift and go to state 63
    LBRACKET        shift and go to state 64
    LPAREN          shift and go to state 65


state 49

    (34) read_statement -> READ . id_list
    (10) id_list -> . id_list COMMA ID
    (11) id_list -> . ID

    ID              shift and go to state 22

    id_list                        shift and go to state 66

state 50

    (35) write_statement -> WRITE . LPAREN write_list RPAREN

    LPAREN          shift and go to state 67


state 51

    (39) if_statement -> IF . LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (40) if_statement -> IF . LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    LPAREN          shift and go to state 68


state 52

    (41) while_statement -> WHILE . LPAREN expression RPAREN DO LBRACE statement_list RBRACE

    LPAREN          shift and go to state 69


state 53

    (42) for_statement -> FOR . ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    ID              shift and go to state 70


state 54

    (43) return_statement -> RETURN . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 71


state 55

    (17) param_list -> type ID .

    RPAREN          reduce using rule 17 (param_list -> type ID .)
    COMMA           reduce using rule 17 (param_list -> type ID .)


state 56

    (14) function -> FUNCTION type ID LPAREN param_list RPAREN . vars LBRACE statement_list return_statement RBRACE
    (15) function -> FUNCTION type ID LPAREN param_list RPAREN . LBRACE statement_list return_statement RBRACE
    (3) vars -> . VARS var_list

    LBRACE          shift and go to state 73
    VARS            shift and go to state 6

    vars                           shift and go to state 72

state 57

    (16) param_list -> param_list COMMA . type ID
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOL
    (9) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    BOOL            shift and go to state 13
    CHAR            shift and go to state 14

    type                           shift and go to state 74

state 58

    (21) statement -> assignment SEMICOLON .

    RBRACE          reduce using rule 21 (statement -> assignment SEMICOLON .)
    ID              reduce using rule 21 (statement -> assignment SEMICOLON .)
    READ            reduce using rule 21 (statement -> assignment SEMICOLON .)
    WRITE           reduce using rule 21 (statement -> assignment SEMICOLON .)
    IF              reduce using rule 21 (statement -> assignment SEMICOLON .)
    WHILE           reduce using rule 21 (statement -> assignment SEMICOLON .)
    FOR             reduce using rule 21 (statement -> assignment SEMICOLON .)
    RETURN          reduce using rule 21 (statement -> assignment SEMICOLON .)


state 59

    (22) statement -> function_call SEMICOLON .

    RBRACE          reduce using rule 22 (statement -> function_call SEMICOLON .)
    ID              reduce using rule 22 (statement -> function_call SEMICOLON .)
    READ            reduce using rule 22 (statement -> function_call SEMICOLON .)
    WRITE           reduce using rule 22 (statement -> function_call SEMICOLON .)
    IF              reduce using rule 22 (statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 22 (statement -> function_call SEMICOLON .)
    FOR             reduce using rule 22 (statement -> function_call SEMICOLON .)
    RETURN          reduce using rule 22 (statement -> function_call SEMICOLON .)


state 60

    (23) statement -> read_statement SEMICOLON .

    RBRACE          reduce using rule 23 (statement -> read_statement SEMICOLON .)
    ID              reduce using rule 23 (statement -> read_statement SEMICOLON .)
    READ            reduce using rule 23 (statement -> read_statement SEMICOLON .)
    WRITE           reduce using rule 23 (statement -> read_statement SEMICOLON .)
    IF              reduce using rule 23 (statement -> read_statement SEMICOLON .)
    WHILE           reduce using rule 23 (statement -> read_statement SEMICOLON .)
    FOR             reduce using rule 23 (statement -> read_statement SEMICOLON .)
    RETURN          reduce using rule 23 (statement -> read_statement SEMICOLON .)


state 61

    (24) statement -> write_statement SEMICOLON .

    RBRACE          reduce using rule 24 (statement -> write_statement SEMICOLON .)
    ID              reduce using rule 24 (statement -> write_statement SEMICOLON .)
    READ            reduce using rule 24 (statement -> write_statement SEMICOLON .)
    WRITE           reduce using rule 24 (statement -> write_statement SEMICOLON .)
    IF              reduce using rule 24 (statement -> write_statement SEMICOLON .)
    WHILE           reduce using rule 24 (statement -> write_statement SEMICOLON .)
    FOR             reduce using rule 24 (statement -> write_statement SEMICOLON .)
    RETURN          reduce using rule 24 (statement -> write_statement SEMICOLON .)


state 62

    (28) statement -> return_statement SEMICOLON .

    RBRACE          reduce using rule 28 (statement -> return_statement SEMICOLON .)
    ID              reduce using rule 28 (statement -> return_statement SEMICOLON .)
    READ            reduce using rule 28 (statement -> return_statement SEMICOLON .)
    WRITE           reduce using rule 28 (statement -> return_statement SEMICOLON .)
    IF              reduce using rule 28 (statement -> return_statement SEMICOLON .)
    WHILE           reduce using rule 28 (statement -> return_statement SEMICOLON .)
    FOR             reduce using rule 28 (statement -> return_statement SEMICOLON .)
    RETURN          reduce using rule 28 (statement -> return_statement SEMICOLON .)


state 63

    (29) assignment -> ID ASSIGN . expression
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (46) expression -> . expression EQ term
    (47) expression -> . expression NE term
    (48) expression -> . expression LT term
    (49) expression -> . expression LE term
    (50) expression -> . expression GT term
    (51) expression -> . expression GE term
    (52) expression -> . expression AND term
    (53) expression -> . expression OR term
    (54) expression -> . term
    (55) expression -> . STRING
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    STRING          shift and go to state 78
    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    expression                     shift and go to state 76
    term                           shift and go to state 77
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 64

    (30) assignment -> ID LBRACKET . expression RBRACKET ASSIGN expression
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (46) expression -> . expression EQ term
    (47) expression -> . expression NE term
    (48) expression -> . expression LT term
    (49) expression -> . expression LE term
    (50) expression -> . expression GT term
    (51) expression -> . expression GE term
    (52) expression -> . expression AND term
    (53) expression -> . expression OR term
    (54) expression -> . term
    (55) expression -> . STRING
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    STRING          shift and go to state 78
    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    expression                     shift and go to state 84
    term                           shift and go to state 77
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 65

    (31) function_call -> ID LPAREN . arg_list RPAREN
    (32) arg_list -> . arg_list COMMA expression
    (33) arg_list -> . expression
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (46) expression -> . expression EQ term
    (47) expression -> . expression NE term
    (48) expression -> . expression LT term
    (49) expression -> . expression LE term
    (50) expression -> . expression GT term
    (51) expression -> . expression GE term
    (52) expression -> . expression AND term
    (53) expression -> . expression OR term
    (54) expression -> . term
    (55) expression -> . STRING
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    STRING          shift and go to state 78
    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    arg_list                       shift and go to state 85
    expression                     shift and go to state 86
    term                           shift and go to state 77
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 66

    (34) read_statement -> READ id_list .
    (10) id_list -> id_list . COMMA ID

    SEMICOLON       reduce using rule 34 (read_statement -> READ id_list .)
    COMMA           shift and go to state 27


state 67

    (35) write_statement -> WRITE LPAREN . write_list RPAREN
    (36) write_list -> . write_list COMMA expression
    (37) write_list -> . STRING
    (38) write_list -> . ID COMMA expression

    STRING          shift and go to state 88
    ID              shift and go to state 89

    write_list                     shift and go to state 87

state 68

    (39) if_statement -> IF LPAREN . expression RPAREN THEN LBRACE statement_list RBRACE
    (40) if_statement -> IF LPAREN . expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (46) expression -> . expression EQ term
    (47) expression -> . expression NE term
    (48) expression -> . expression LT term
    (49) expression -> . expression LE term
    (50) expression -> . expression GT term
    (51) expression -> . expression GE term
    (52) expression -> . expression AND term
    (53) expression -> . expression OR term
    (54) expression -> . term
    (55) expression -> . STRING
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    STRING          shift and go to state 78
    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    expression                     shift and go to state 90
    term                           shift and go to state 77
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 69

    (41) while_statement -> WHILE LPAREN . expression RPAREN DO LBRACE statement_list RBRACE
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (46) expression -> . expression EQ term
    (47) expression -> . expression NE term
    (48) expression -> . expression LT term
    (49) expression -> . expression LE term
    (50) expression -> . expression GT term
    (51) expression -> . expression GE term
    (52) expression -> . expression AND term
    (53) expression -> . expression OR term
    (54) expression -> . term
    (55) expression -> . STRING
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    STRING          shift and go to state 78
    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    expression                     shift and go to state 91
    term                           shift and go to state 77
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 70

    (42) for_statement -> FOR ID . LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    LBRACKET        shift and go to state 92


state 71

    (43) return_statement -> RETURN LPAREN . expression RPAREN SEMICOLON
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (46) expression -> . expression EQ term
    (47) expression -> . expression NE term
    (48) expression -> . expression LT term
    (49) expression -> . expression LE term
    (50) expression -> . expression GT term
    (51) expression -> . expression GE term
    (52) expression -> . expression AND term
    (53) expression -> . expression OR term
    (54) expression -> . term
    (55) expression -> . STRING
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    STRING          shift and go to state 78
    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    expression                     shift and go to state 93
    term                           shift and go to state 77
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 72

    (14) function -> FUNCTION type ID LPAREN param_list RPAREN vars . LBRACE statement_list return_statement RBRACE

    LBRACE          shift and go to state 94


state 73

    (15) function -> FUNCTION type ID LPAREN param_list RPAREN LBRACE . statement_list return_statement RBRACE
    (19) statement_list -> . statement_list statement
    (20) statement_list -> . empty
    (65) empty -> .

    RETURN          reduce using rule 65 (empty -> .)
    ID              reduce using rule 65 (empty -> .)
    READ            reduce using rule 65 (empty -> .)
    WRITE           reduce using rule 65 (empty -> .)
    IF              reduce using rule 65 (empty -> .)
    WHILE           reduce using rule 65 (empty -> .)
    FOR             reduce using rule 65 (empty -> .)

    statement_list                 shift and go to state 95
    empty                          shift and go to state 35

state 74

    (16) param_list -> param_list COMMA type . ID

    ID              shift and go to state 96


state 75

    (31) function_call -> ID . LPAREN arg_list RPAREN
    (61) factor -> ID .
    (62) factor -> ID . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 65
    TIMES           reduce using rule 61 (factor -> ID .)
    DIVIDE          reduce using rule 61 (factor -> ID .)
    PLUS            reduce using rule 61 (factor -> ID .)
    MINUS           reduce using rule 61 (factor -> ID .)
    EQ              reduce using rule 61 (factor -> ID .)
    NE              reduce using rule 61 (factor -> ID .)
    LT              reduce using rule 61 (factor -> ID .)
    LE              reduce using rule 61 (factor -> ID .)
    GT              reduce using rule 61 (factor -> ID .)
    GE              reduce using rule 61 (factor -> ID .)
    AND             reduce using rule 61 (factor -> ID .)
    OR              reduce using rule 61 (factor -> ID .)
    SEMICOLON       reduce using rule 61 (factor -> ID .)
    RBRACKET        reduce using rule 61 (factor -> ID .)
    RPAREN          reduce using rule 61 (factor -> ID .)
    COMMA           reduce using rule 61 (factor -> ID .)
    TO              reduce using rule 61 (factor -> ID .)
    LBRACKET        shift and go to state 97


state 76

    (29) assignment -> ID ASSIGN expression .
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term
    (46) expression -> expression . EQ term
    (47) expression -> expression . NE term
    (48) expression -> expression . LT term
    (49) expression -> expression . LE term
    (50) expression -> expression . GT term
    (51) expression -> expression . GE term
    (52) expression -> expression . AND term
    (53) expression -> expression . OR term

    SEMICOLON       reduce using rule 29 (assignment -> ID ASSIGN expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    EQ              shift and go to state 100
    NE              shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    AND             shift and go to state 106
    OR              shift and go to state 107


state 77

    (54) expression -> term .
    (56) term -> term . TIMES factor
    (57) term -> term . DIVIDE factor

    PLUS            reduce using rule 54 (expression -> term .)
    MINUS           reduce using rule 54 (expression -> term .)
    EQ              reduce using rule 54 (expression -> term .)
    NE              reduce using rule 54 (expression -> term .)
    LT              reduce using rule 54 (expression -> term .)
    LE              reduce using rule 54 (expression -> term .)
    GT              reduce using rule 54 (expression -> term .)
    GE              reduce using rule 54 (expression -> term .)
    AND             reduce using rule 54 (expression -> term .)
    OR              reduce using rule 54 (expression -> term .)
    SEMICOLON       reduce using rule 54 (expression -> term .)
    RBRACKET        reduce using rule 54 (expression -> term .)
    RPAREN          reduce using rule 54 (expression -> term .)
    COMMA           reduce using rule 54 (expression -> term .)
    TO              reduce using rule 54 (expression -> term .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109


state 78

    (55) expression -> STRING .

    PLUS            reduce using rule 55 (expression -> STRING .)
    MINUS           reduce using rule 55 (expression -> STRING .)
    EQ              reduce using rule 55 (expression -> STRING .)
    NE              reduce using rule 55 (expression -> STRING .)
    LT              reduce using rule 55 (expression -> STRING .)
    LE              reduce using rule 55 (expression -> STRING .)
    GT              reduce using rule 55 (expression -> STRING .)
    GE              reduce using rule 55 (expression -> STRING .)
    AND             reduce using rule 55 (expression -> STRING .)
    OR              reduce using rule 55 (expression -> STRING .)
    SEMICOLON       reduce using rule 55 (expression -> STRING .)
    RBRACKET        reduce using rule 55 (expression -> STRING .)
    RPAREN          reduce using rule 55 (expression -> STRING .)
    COMMA           reduce using rule 55 (expression -> STRING .)
    TO              reduce using rule 55 (expression -> STRING .)


state 79

    (59) term -> factor .

    TIMES           reduce using rule 59 (term -> factor .)
    DIVIDE          reduce using rule 59 (term -> factor .)
    PLUS            reduce using rule 59 (term -> factor .)
    MINUS           reduce using rule 59 (term -> factor .)
    EQ              reduce using rule 59 (term -> factor .)
    NE              reduce using rule 59 (term -> factor .)
    LT              reduce using rule 59 (term -> factor .)
    LE              reduce using rule 59 (term -> factor .)
    GT              reduce using rule 59 (term -> factor .)
    GE              reduce using rule 59 (term -> factor .)
    AND             reduce using rule 59 (term -> factor .)
    OR              reduce using rule 59 (term -> factor .)
    SEMICOLON       reduce using rule 59 (term -> factor .)
    RBRACKET        reduce using rule 59 (term -> factor .)
    RPAREN          reduce using rule 59 (term -> factor .)
    COMMA           reduce using rule 59 (term -> factor .)
    TO              reduce using rule 59 (term -> factor .)


state 80

    (58) term -> function_call .

    TIMES           reduce using rule 58 (term -> function_call .)
    DIVIDE          reduce using rule 58 (term -> function_call .)
    PLUS            reduce using rule 58 (term -> function_call .)
    MINUS           reduce using rule 58 (term -> function_call .)
    EQ              reduce using rule 58 (term -> function_call .)
    NE              reduce using rule 58 (term -> function_call .)
    LT              reduce using rule 58 (term -> function_call .)
    LE              reduce using rule 58 (term -> function_call .)
    GT              reduce using rule 58 (term -> function_call .)
    GE              reduce using rule 58 (term -> function_call .)
    AND             reduce using rule 58 (term -> function_call .)
    OR              reduce using rule 58 (term -> function_call .)
    SEMICOLON       reduce using rule 58 (term -> function_call .)
    RBRACKET        reduce using rule 58 (term -> function_call .)
    RPAREN          reduce using rule 58 (term -> function_call .)
    COMMA           reduce using rule 58 (term -> function_call .)
    TO              reduce using rule 58 (term -> function_call .)


state 81

    (60) factor -> LPAREN . expression RPAREN
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (46) expression -> . expression EQ term
    (47) expression -> . expression NE term
    (48) expression -> . expression LT term
    (49) expression -> . expression LE term
    (50) expression -> . expression GT term
    (51) expression -> . expression GE term
    (52) expression -> . expression AND term
    (53) expression -> . expression OR term
    (54) expression -> . term
    (55) expression -> . STRING
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    STRING          shift and go to state 78
    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    expression                     shift and go to state 110
    term                           shift and go to state 77
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 82

    (63) factor -> INTEGER .

    TIMES           reduce using rule 63 (factor -> INTEGER .)
    DIVIDE          reduce using rule 63 (factor -> INTEGER .)
    PLUS            reduce using rule 63 (factor -> INTEGER .)
    MINUS           reduce using rule 63 (factor -> INTEGER .)
    EQ              reduce using rule 63 (factor -> INTEGER .)
    NE              reduce using rule 63 (factor -> INTEGER .)
    LT              reduce using rule 63 (factor -> INTEGER .)
    LE              reduce using rule 63 (factor -> INTEGER .)
    GT              reduce using rule 63 (factor -> INTEGER .)
    GE              reduce using rule 63 (factor -> INTEGER .)
    AND             reduce using rule 63 (factor -> INTEGER .)
    OR              reduce using rule 63 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 63 (factor -> INTEGER .)
    RBRACKET        reduce using rule 63 (factor -> INTEGER .)
    RPAREN          reduce using rule 63 (factor -> INTEGER .)
    COMMA           reduce using rule 63 (factor -> INTEGER .)
    TO              reduce using rule 63 (factor -> INTEGER .)


state 83

    (64) factor -> FLOATING_POINT .

    TIMES           reduce using rule 64 (factor -> FLOATING_POINT .)
    DIVIDE          reduce using rule 64 (factor -> FLOATING_POINT .)
    PLUS            reduce using rule 64 (factor -> FLOATING_POINT .)
    MINUS           reduce using rule 64 (factor -> FLOATING_POINT .)
    EQ              reduce using rule 64 (factor -> FLOATING_POINT .)
    NE              reduce using rule 64 (factor -> FLOATING_POINT .)
    LT              reduce using rule 64 (factor -> FLOATING_POINT .)
    LE              reduce using rule 64 (factor -> FLOATING_POINT .)
    GT              reduce using rule 64 (factor -> FLOATING_POINT .)
    GE              reduce using rule 64 (factor -> FLOATING_POINT .)
    AND             reduce using rule 64 (factor -> FLOATING_POINT .)
    OR              reduce using rule 64 (factor -> FLOATING_POINT .)
    SEMICOLON       reduce using rule 64 (factor -> FLOATING_POINT .)
    RBRACKET        reduce using rule 64 (factor -> FLOATING_POINT .)
    RPAREN          reduce using rule 64 (factor -> FLOATING_POINT .)
    COMMA           reduce using rule 64 (factor -> FLOATING_POINT .)
    TO              reduce using rule 64 (factor -> FLOATING_POINT .)


state 84

    (30) assignment -> ID LBRACKET expression . RBRACKET ASSIGN expression
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term
    (46) expression -> expression . EQ term
    (47) expression -> expression . NE term
    (48) expression -> expression . LT term
    (49) expression -> expression . LE term
    (50) expression -> expression . GT term
    (51) expression -> expression . GE term
    (52) expression -> expression . AND term
    (53) expression -> expression . OR term

    RBRACKET        shift and go to state 111
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    EQ              shift and go to state 100
    NE              shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    AND             shift and go to state 106
    OR              shift and go to state 107


state 85

    (31) function_call -> ID LPAREN arg_list . RPAREN
    (32) arg_list -> arg_list . COMMA expression

    RPAREN          shift and go to state 112
    COMMA           shift and go to state 113


state 86

    (33) arg_list -> expression .
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term
    (46) expression -> expression . EQ term
    (47) expression -> expression . NE term
    (48) expression -> expression . LT term
    (49) expression -> expression . LE term
    (50) expression -> expression . GT term
    (51) expression -> expression . GE term
    (52) expression -> expression . AND term
    (53) expression -> expression . OR term

    RPAREN          reduce using rule 33 (arg_list -> expression .)
    COMMA           reduce using rule 33 (arg_list -> expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    EQ              shift and go to state 100
    NE              shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    AND             shift and go to state 106
    OR              shift and go to state 107


state 87

    (35) write_statement -> WRITE LPAREN write_list . RPAREN
    (36) write_list -> write_list . COMMA expression

    RPAREN          shift and go to state 114
    COMMA           shift and go to state 115


state 88

    (37) write_list -> STRING .

    RPAREN          reduce using rule 37 (write_list -> STRING .)
    COMMA           reduce using rule 37 (write_list -> STRING .)


state 89

    (38) write_list -> ID . COMMA expression

    COMMA           shift and go to state 116


state 90

    (39) if_statement -> IF LPAREN expression . RPAREN THEN LBRACE statement_list RBRACE
    (40) if_statement -> IF LPAREN expression . RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term
    (46) expression -> expression . EQ term
    (47) expression -> expression . NE term
    (48) expression -> expression . LT term
    (49) expression -> expression . LE term
    (50) expression -> expression . GT term
    (51) expression -> expression . GE term
    (52) expression -> expression . AND term
    (53) expression -> expression . OR term

    RPAREN          shift and go to state 117
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    EQ              shift and go to state 100
    NE              shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    AND             shift and go to state 106
    OR              shift and go to state 107


state 91

    (41) while_statement -> WHILE LPAREN expression . RPAREN DO LBRACE statement_list RBRACE
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term
    (46) expression -> expression . EQ term
    (47) expression -> expression . NE term
    (48) expression -> expression . LT term
    (49) expression -> expression . LE term
    (50) expression -> expression . GT term
    (51) expression -> expression . GE term
    (52) expression -> expression . AND term
    (53) expression -> expression . OR term

    RPAREN          shift and go to state 118
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    EQ              shift and go to state 100
    NE              shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    AND             shift and go to state 106
    OR              shift and go to state 107


state 92

    (42) for_statement -> FOR ID LBRACKET . expression TO expression RBRACKET DO LBRACE statement_list RBRACE
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (46) expression -> . expression EQ term
    (47) expression -> . expression NE term
    (48) expression -> . expression LT term
    (49) expression -> . expression LE term
    (50) expression -> . expression GT term
    (51) expression -> . expression GE term
    (52) expression -> . expression AND term
    (53) expression -> . expression OR term
    (54) expression -> . term
    (55) expression -> . STRING
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    STRING          shift and go to state 78
    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    expression                     shift and go to state 119
    term                           shift and go to state 77
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 93

    (43) return_statement -> RETURN LPAREN expression . RPAREN SEMICOLON
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term
    (46) expression -> expression . EQ term
    (47) expression -> expression . NE term
    (48) expression -> expression . LT term
    (49) expression -> expression . LE term
    (50) expression -> expression . GT term
    (51) expression -> expression . GE term
    (52) expression -> expression . AND term
    (53) expression -> expression . OR term

    RPAREN          shift and go to state 120
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    EQ              shift and go to state 100
    NE              shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    AND             shift and go to state 106
    OR              shift and go to state 107


state 94

    (14) function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE . statement_list return_statement RBRACE
    (19) statement_list -> . statement_list statement
    (20) statement_list -> . empty
    (65) empty -> .

    RETURN          reduce using rule 65 (empty -> .)
    ID              reduce using rule 65 (empty -> .)
    READ            reduce using rule 65 (empty -> .)
    WRITE           reduce using rule 65 (empty -> .)
    IF              reduce using rule 65 (empty -> .)
    WHILE           reduce using rule 65 (empty -> .)
    FOR             reduce using rule 65 (empty -> .)

    statement_list                 shift and go to state 121
    empty                          shift and go to state 35

state 95

    (15) function -> FUNCTION type ID LPAREN param_list RPAREN LBRACE statement_list . return_statement RBRACE
    (19) statement_list -> statement_list . statement
    (43) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (21) statement -> . assignment SEMICOLON
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . read_statement SEMICOLON
    (24) statement -> . write_statement SEMICOLON
    (25) statement -> . if_statement
    (26) statement -> . while_statement
    (27) statement -> . for_statement
    (28) statement -> . return_statement SEMICOLON
    (29) assignment -> . ID ASSIGN expression
    (30) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (34) read_statement -> . READ id_list
    (35) write_statement -> . WRITE LPAREN write_list RPAREN
    (39) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (40) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (41) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (42) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RETURN          shift and go to state 54
    ID              shift and go to state 48
    READ            shift and go to state 49
    WRITE           shift and go to state 50
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53

    return_statement               shift and go to state 122
    statement                      shift and go to state 39
    assignment                     shift and go to state 40
    function_call                  shift and go to state 41
    read_statement                 shift and go to state 42
    write_statement                shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    for_statement                  shift and go to state 46

state 96

    (16) param_list -> param_list COMMA type ID .

    RPAREN          reduce using rule 16 (param_list -> param_list COMMA type ID .)
    COMMA           reduce using rule 16 (param_list -> param_list COMMA type ID .)


state 97

    (62) factor -> ID LBRACKET . expression RBRACKET
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (46) expression -> . expression EQ term
    (47) expression -> . expression NE term
    (48) expression -> . expression LT term
    (49) expression -> . expression LE term
    (50) expression -> . expression GT term
    (51) expression -> . expression GE term
    (52) expression -> . expression AND term
    (53) expression -> . expression OR term
    (54) expression -> . term
    (55) expression -> . STRING
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    STRING          shift and go to state 78
    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    expression                     shift and go to state 123
    term                           shift and go to state 77
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 98

    (44) expression -> expression PLUS . term
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    term                           shift and go to state 124
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 99

    (45) expression -> expression MINUS . term
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    term                           shift and go to state 125
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 100

    (46) expression -> expression EQ . term
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    term                           shift and go to state 126
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 101

    (47) expression -> expression NE . term
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    term                           shift and go to state 127
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 102

    (48) expression -> expression LT . term
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    term                           shift and go to state 128
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 103

    (49) expression -> expression LE . term
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    term                           shift and go to state 129
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 104

    (50) expression -> expression GT . term
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    term                           shift and go to state 130
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 105

    (51) expression -> expression GE . term
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    term                           shift and go to state 131
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 106

    (52) expression -> expression AND . term
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    term                           shift and go to state 132
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 107

    (53) expression -> expression OR . term
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    term                           shift and go to state 133
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 108

    (56) term -> term TIMES . factor
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    LPAREN          shift and go to state 81
    ID              shift and go to state 135
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    factor                         shift and go to state 134

state 109

    (57) term -> term DIVIDE . factor
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    LPAREN          shift and go to state 81
    ID              shift and go to state 135
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    factor                         shift and go to state 136

state 110

    (60) factor -> LPAREN expression . RPAREN
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term
    (46) expression -> expression . EQ term
    (47) expression -> expression . NE term
    (48) expression -> expression . LT term
    (49) expression -> expression . LE term
    (50) expression -> expression . GT term
    (51) expression -> expression . GE term
    (52) expression -> expression . AND term
    (53) expression -> expression . OR term

    RPAREN          shift and go to state 137
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    EQ              shift and go to state 100
    NE              shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    AND             shift and go to state 106
    OR              shift and go to state 107


state 111

    (30) assignment -> ID LBRACKET expression RBRACKET . ASSIGN expression

    ASSIGN          shift and go to state 138


state 112

    (31) function_call -> ID LPAREN arg_list RPAREN .

    SEMICOLON       reduce using rule 31 (function_call -> ID LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 31 (function_call -> ID LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 31 (function_call -> ID LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 31 (function_call -> ID LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 31 (function_call -> ID LPAREN arg_list RPAREN .)
    EQ              reduce using rule 31 (function_call -> ID LPAREN arg_list RPAREN .)
    NE              reduce using rule 31 (function_call -> ID LPAREN arg_list RPAREN .)
    LT              reduce using rule 31 (function_call -> ID LPAREN arg_list RPAREN .)
    LE              reduce using rule 31 (function_call -> ID LPAREN arg_list RPAREN .)
    GT              reduce using rule 31 (function_call -> ID LPAREN arg_list RPAREN .)
    GE              reduce using rule 31 (function_call -> ID LPAREN arg_list RPAREN .)
    AND             reduce using rule 31 (function_call -> ID LPAREN arg_list RPAREN .)
    OR              reduce using rule 31 (function_call -> ID LPAREN arg_list RPAREN .)
    RBRACKET        reduce using rule 31 (function_call -> ID LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 31 (function_call -> ID LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 31 (function_call -> ID LPAREN arg_list RPAREN .)
    TO              reduce using rule 31 (function_call -> ID LPAREN arg_list RPAREN .)


state 113

    (32) arg_list -> arg_list COMMA . expression
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (46) expression -> . expression EQ term
    (47) expression -> . expression NE term
    (48) expression -> . expression LT term
    (49) expression -> . expression LE term
    (50) expression -> . expression GT term
    (51) expression -> . expression GE term
    (52) expression -> . expression AND term
    (53) expression -> . expression OR term
    (54) expression -> . term
    (55) expression -> . STRING
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    STRING          shift and go to state 78
    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    expression                     shift and go to state 139
    term                           shift and go to state 77
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 114

    (35) write_statement -> WRITE LPAREN write_list RPAREN .

    SEMICOLON       reduce using rule 35 (write_statement -> WRITE LPAREN write_list RPAREN .)


state 115

    (36) write_list -> write_list COMMA . expression
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (46) expression -> . expression EQ term
    (47) expression -> . expression NE term
    (48) expression -> . expression LT term
    (49) expression -> . expression LE term
    (50) expression -> . expression GT term
    (51) expression -> . expression GE term
    (52) expression -> . expression AND term
    (53) expression -> . expression OR term
    (54) expression -> . term
    (55) expression -> . STRING
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    STRING          shift and go to state 78
    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    expression                     shift and go to state 140
    term                           shift and go to state 77
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 116

    (38) write_list -> ID COMMA . expression
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (46) expression -> . expression EQ term
    (47) expression -> . expression NE term
    (48) expression -> . expression LT term
    (49) expression -> . expression LE term
    (50) expression -> . expression GT term
    (51) expression -> . expression GE term
    (52) expression -> . expression AND term
    (53) expression -> . expression OR term
    (54) expression -> . term
    (55) expression -> . STRING
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    STRING          shift and go to state 78
    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    expression                     shift and go to state 141
    term                           shift and go to state 77
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 117

    (39) if_statement -> IF LPAREN expression RPAREN . THEN LBRACE statement_list RBRACE
    (40) if_statement -> IF LPAREN expression RPAREN . THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    THEN            shift and go to state 142


state 118

    (41) while_statement -> WHILE LPAREN expression RPAREN . DO LBRACE statement_list RBRACE

    DO              shift and go to state 143


state 119

    (42) for_statement -> FOR ID LBRACKET expression . TO expression RBRACKET DO LBRACE statement_list RBRACE
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term
    (46) expression -> expression . EQ term
    (47) expression -> expression . NE term
    (48) expression -> expression . LT term
    (49) expression -> expression . LE term
    (50) expression -> expression . GT term
    (51) expression -> expression . GE term
    (52) expression -> expression . AND term
    (53) expression -> expression . OR term

    TO              shift and go to state 144
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    EQ              shift and go to state 100
    NE              shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    AND             shift and go to state 106
    OR              shift and go to state 107


state 120

    (43) return_statement -> RETURN LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 145


state 121

    (14) function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list . return_statement RBRACE
    (19) statement_list -> statement_list . statement
    (43) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (21) statement -> . assignment SEMICOLON
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . read_statement SEMICOLON
    (24) statement -> . write_statement SEMICOLON
    (25) statement -> . if_statement
    (26) statement -> . while_statement
    (27) statement -> . for_statement
    (28) statement -> . return_statement SEMICOLON
    (29) assignment -> . ID ASSIGN expression
    (30) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (34) read_statement -> . READ id_list
    (35) write_statement -> . WRITE LPAREN write_list RPAREN
    (39) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (40) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (41) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (42) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RETURN          shift and go to state 54
    ID              shift and go to state 48
    READ            shift and go to state 49
    WRITE           shift and go to state 50
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53

    return_statement               shift and go to state 146
    statement                      shift and go to state 39
    assignment                     shift and go to state 40
    function_call                  shift and go to state 41
    read_statement                 shift and go to state 42
    write_statement                shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    for_statement                  shift and go to state 46

state 122

    (15) function -> FUNCTION type ID LPAREN param_list RPAREN LBRACE statement_list return_statement . RBRACE
    (28) statement -> return_statement . SEMICOLON

    RBRACE          shift and go to state 147
    SEMICOLON       shift and go to state 62


state 123

    (62) factor -> ID LBRACKET expression . RBRACKET
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term
    (46) expression -> expression . EQ term
    (47) expression -> expression . NE term
    (48) expression -> expression . LT term
    (49) expression -> expression . LE term
    (50) expression -> expression . GT term
    (51) expression -> expression . GE term
    (52) expression -> expression . AND term
    (53) expression -> expression . OR term

    RBRACKET        shift and go to state 148
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    EQ              shift and go to state 100
    NE              shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    AND             shift and go to state 106
    OR              shift and go to state 107


state 124

    (44) expression -> expression PLUS term .
    (56) term -> term . TIMES factor
    (57) term -> term . DIVIDE factor

    PLUS            reduce using rule 44 (expression -> expression PLUS term .)
    MINUS           reduce using rule 44 (expression -> expression PLUS term .)
    EQ              reduce using rule 44 (expression -> expression PLUS term .)
    NE              reduce using rule 44 (expression -> expression PLUS term .)
    LT              reduce using rule 44 (expression -> expression PLUS term .)
    LE              reduce using rule 44 (expression -> expression PLUS term .)
    GT              reduce using rule 44 (expression -> expression PLUS term .)
    GE              reduce using rule 44 (expression -> expression PLUS term .)
    AND             reduce using rule 44 (expression -> expression PLUS term .)
    OR              reduce using rule 44 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 44 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 44 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 44 (expression -> expression PLUS term .)
    COMMA           reduce using rule 44 (expression -> expression PLUS term .)
    TO              reduce using rule 44 (expression -> expression PLUS term .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109


state 125

    (45) expression -> expression MINUS term .
    (56) term -> term . TIMES factor
    (57) term -> term . DIVIDE factor

    PLUS            reduce using rule 45 (expression -> expression MINUS term .)
    MINUS           reduce using rule 45 (expression -> expression MINUS term .)
    EQ              reduce using rule 45 (expression -> expression MINUS term .)
    NE              reduce using rule 45 (expression -> expression MINUS term .)
    LT              reduce using rule 45 (expression -> expression MINUS term .)
    LE              reduce using rule 45 (expression -> expression MINUS term .)
    GT              reduce using rule 45 (expression -> expression MINUS term .)
    GE              reduce using rule 45 (expression -> expression MINUS term .)
    AND             reduce using rule 45 (expression -> expression MINUS term .)
    OR              reduce using rule 45 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 45 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 45 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 45 (expression -> expression MINUS term .)
    COMMA           reduce using rule 45 (expression -> expression MINUS term .)
    TO              reduce using rule 45 (expression -> expression MINUS term .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109


state 126

    (46) expression -> expression EQ term .
    (56) term -> term . TIMES factor
    (57) term -> term . DIVIDE factor

    PLUS            reduce using rule 46 (expression -> expression EQ term .)
    MINUS           reduce using rule 46 (expression -> expression EQ term .)
    EQ              reduce using rule 46 (expression -> expression EQ term .)
    NE              reduce using rule 46 (expression -> expression EQ term .)
    LT              reduce using rule 46 (expression -> expression EQ term .)
    LE              reduce using rule 46 (expression -> expression EQ term .)
    GT              reduce using rule 46 (expression -> expression EQ term .)
    GE              reduce using rule 46 (expression -> expression EQ term .)
    AND             reduce using rule 46 (expression -> expression EQ term .)
    OR              reduce using rule 46 (expression -> expression EQ term .)
    SEMICOLON       reduce using rule 46 (expression -> expression EQ term .)
    RBRACKET        reduce using rule 46 (expression -> expression EQ term .)
    RPAREN          reduce using rule 46 (expression -> expression EQ term .)
    COMMA           reduce using rule 46 (expression -> expression EQ term .)
    TO              reduce using rule 46 (expression -> expression EQ term .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109


state 127

    (47) expression -> expression NE term .
    (56) term -> term . TIMES factor
    (57) term -> term . DIVIDE factor

    PLUS            reduce using rule 47 (expression -> expression NE term .)
    MINUS           reduce using rule 47 (expression -> expression NE term .)
    EQ              reduce using rule 47 (expression -> expression NE term .)
    NE              reduce using rule 47 (expression -> expression NE term .)
    LT              reduce using rule 47 (expression -> expression NE term .)
    LE              reduce using rule 47 (expression -> expression NE term .)
    GT              reduce using rule 47 (expression -> expression NE term .)
    GE              reduce using rule 47 (expression -> expression NE term .)
    AND             reduce using rule 47 (expression -> expression NE term .)
    OR              reduce using rule 47 (expression -> expression NE term .)
    SEMICOLON       reduce using rule 47 (expression -> expression NE term .)
    RBRACKET        reduce using rule 47 (expression -> expression NE term .)
    RPAREN          reduce using rule 47 (expression -> expression NE term .)
    COMMA           reduce using rule 47 (expression -> expression NE term .)
    TO              reduce using rule 47 (expression -> expression NE term .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109


state 128

    (48) expression -> expression LT term .
    (56) term -> term . TIMES factor
    (57) term -> term . DIVIDE factor

    PLUS            reduce using rule 48 (expression -> expression LT term .)
    MINUS           reduce using rule 48 (expression -> expression LT term .)
    EQ              reduce using rule 48 (expression -> expression LT term .)
    NE              reduce using rule 48 (expression -> expression LT term .)
    LT              reduce using rule 48 (expression -> expression LT term .)
    LE              reduce using rule 48 (expression -> expression LT term .)
    GT              reduce using rule 48 (expression -> expression LT term .)
    GE              reduce using rule 48 (expression -> expression LT term .)
    AND             reduce using rule 48 (expression -> expression LT term .)
    OR              reduce using rule 48 (expression -> expression LT term .)
    SEMICOLON       reduce using rule 48 (expression -> expression LT term .)
    RBRACKET        reduce using rule 48 (expression -> expression LT term .)
    RPAREN          reduce using rule 48 (expression -> expression LT term .)
    COMMA           reduce using rule 48 (expression -> expression LT term .)
    TO              reduce using rule 48 (expression -> expression LT term .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109


state 129

    (49) expression -> expression LE term .
    (56) term -> term . TIMES factor
    (57) term -> term . DIVIDE factor

    PLUS            reduce using rule 49 (expression -> expression LE term .)
    MINUS           reduce using rule 49 (expression -> expression LE term .)
    EQ              reduce using rule 49 (expression -> expression LE term .)
    NE              reduce using rule 49 (expression -> expression LE term .)
    LT              reduce using rule 49 (expression -> expression LE term .)
    LE              reduce using rule 49 (expression -> expression LE term .)
    GT              reduce using rule 49 (expression -> expression LE term .)
    GE              reduce using rule 49 (expression -> expression LE term .)
    AND             reduce using rule 49 (expression -> expression LE term .)
    OR              reduce using rule 49 (expression -> expression LE term .)
    SEMICOLON       reduce using rule 49 (expression -> expression LE term .)
    RBRACKET        reduce using rule 49 (expression -> expression LE term .)
    RPAREN          reduce using rule 49 (expression -> expression LE term .)
    COMMA           reduce using rule 49 (expression -> expression LE term .)
    TO              reduce using rule 49 (expression -> expression LE term .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109


state 130

    (50) expression -> expression GT term .
    (56) term -> term . TIMES factor
    (57) term -> term . DIVIDE factor

    PLUS            reduce using rule 50 (expression -> expression GT term .)
    MINUS           reduce using rule 50 (expression -> expression GT term .)
    EQ              reduce using rule 50 (expression -> expression GT term .)
    NE              reduce using rule 50 (expression -> expression GT term .)
    LT              reduce using rule 50 (expression -> expression GT term .)
    LE              reduce using rule 50 (expression -> expression GT term .)
    GT              reduce using rule 50 (expression -> expression GT term .)
    GE              reduce using rule 50 (expression -> expression GT term .)
    AND             reduce using rule 50 (expression -> expression GT term .)
    OR              reduce using rule 50 (expression -> expression GT term .)
    SEMICOLON       reduce using rule 50 (expression -> expression GT term .)
    RBRACKET        reduce using rule 50 (expression -> expression GT term .)
    RPAREN          reduce using rule 50 (expression -> expression GT term .)
    COMMA           reduce using rule 50 (expression -> expression GT term .)
    TO              reduce using rule 50 (expression -> expression GT term .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109


state 131

    (51) expression -> expression GE term .
    (56) term -> term . TIMES factor
    (57) term -> term . DIVIDE factor

    PLUS            reduce using rule 51 (expression -> expression GE term .)
    MINUS           reduce using rule 51 (expression -> expression GE term .)
    EQ              reduce using rule 51 (expression -> expression GE term .)
    NE              reduce using rule 51 (expression -> expression GE term .)
    LT              reduce using rule 51 (expression -> expression GE term .)
    LE              reduce using rule 51 (expression -> expression GE term .)
    GT              reduce using rule 51 (expression -> expression GE term .)
    GE              reduce using rule 51 (expression -> expression GE term .)
    AND             reduce using rule 51 (expression -> expression GE term .)
    OR              reduce using rule 51 (expression -> expression GE term .)
    SEMICOLON       reduce using rule 51 (expression -> expression GE term .)
    RBRACKET        reduce using rule 51 (expression -> expression GE term .)
    RPAREN          reduce using rule 51 (expression -> expression GE term .)
    COMMA           reduce using rule 51 (expression -> expression GE term .)
    TO              reduce using rule 51 (expression -> expression GE term .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109


state 132

    (52) expression -> expression AND term .
    (56) term -> term . TIMES factor
    (57) term -> term . DIVIDE factor

    PLUS            reduce using rule 52 (expression -> expression AND term .)
    MINUS           reduce using rule 52 (expression -> expression AND term .)
    EQ              reduce using rule 52 (expression -> expression AND term .)
    NE              reduce using rule 52 (expression -> expression AND term .)
    LT              reduce using rule 52 (expression -> expression AND term .)
    LE              reduce using rule 52 (expression -> expression AND term .)
    GT              reduce using rule 52 (expression -> expression AND term .)
    GE              reduce using rule 52 (expression -> expression AND term .)
    AND             reduce using rule 52 (expression -> expression AND term .)
    OR              reduce using rule 52 (expression -> expression AND term .)
    SEMICOLON       reduce using rule 52 (expression -> expression AND term .)
    RBRACKET        reduce using rule 52 (expression -> expression AND term .)
    RPAREN          reduce using rule 52 (expression -> expression AND term .)
    COMMA           reduce using rule 52 (expression -> expression AND term .)
    TO              reduce using rule 52 (expression -> expression AND term .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109


state 133

    (53) expression -> expression OR term .
    (56) term -> term . TIMES factor
    (57) term -> term . DIVIDE factor

    PLUS            reduce using rule 53 (expression -> expression OR term .)
    MINUS           reduce using rule 53 (expression -> expression OR term .)
    EQ              reduce using rule 53 (expression -> expression OR term .)
    NE              reduce using rule 53 (expression -> expression OR term .)
    LT              reduce using rule 53 (expression -> expression OR term .)
    LE              reduce using rule 53 (expression -> expression OR term .)
    GT              reduce using rule 53 (expression -> expression OR term .)
    GE              reduce using rule 53 (expression -> expression OR term .)
    AND             reduce using rule 53 (expression -> expression OR term .)
    OR              reduce using rule 53 (expression -> expression OR term .)
    SEMICOLON       reduce using rule 53 (expression -> expression OR term .)
    RBRACKET        reduce using rule 53 (expression -> expression OR term .)
    RPAREN          reduce using rule 53 (expression -> expression OR term .)
    COMMA           reduce using rule 53 (expression -> expression OR term .)
    TO              reduce using rule 53 (expression -> expression OR term .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109


state 134

    (56) term -> term TIMES factor .

    TIMES           reduce using rule 56 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 56 (term -> term TIMES factor .)
    PLUS            reduce using rule 56 (term -> term TIMES factor .)
    MINUS           reduce using rule 56 (term -> term TIMES factor .)
    EQ              reduce using rule 56 (term -> term TIMES factor .)
    NE              reduce using rule 56 (term -> term TIMES factor .)
    LT              reduce using rule 56 (term -> term TIMES factor .)
    LE              reduce using rule 56 (term -> term TIMES factor .)
    GT              reduce using rule 56 (term -> term TIMES factor .)
    GE              reduce using rule 56 (term -> term TIMES factor .)
    AND             reduce using rule 56 (term -> term TIMES factor .)
    OR              reduce using rule 56 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 56 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 56 (term -> term TIMES factor .)
    RPAREN          reduce using rule 56 (term -> term TIMES factor .)
    COMMA           reduce using rule 56 (term -> term TIMES factor .)
    TO              reduce using rule 56 (term -> term TIMES factor .)


state 135

    (61) factor -> ID .
    (62) factor -> ID . LBRACKET expression RBRACKET

    TIMES           reduce using rule 61 (factor -> ID .)
    DIVIDE          reduce using rule 61 (factor -> ID .)
    PLUS            reduce using rule 61 (factor -> ID .)
    MINUS           reduce using rule 61 (factor -> ID .)
    EQ              reduce using rule 61 (factor -> ID .)
    NE              reduce using rule 61 (factor -> ID .)
    LT              reduce using rule 61 (factor -> ID .)
    LE              reduce using rule 61 (factor -> ID .)
    GT              reduce using rule 61 (factor -> ID .)
    GE              reduce using rule 61 (factor -> ID .)
    AND             reduce using rule 61 (factor -> ID .)
    OR              reduce using rule 61 (factor -> ID .)
    SEMICOLON       reduce using rule 61 (factor -> ID .)
    RBRACKET        reduce using rule 61 (factor -> ID .)
    RPAREN          reduce using rule 61 (factor -> ID .)
    COMMA           reduce using rule 61 (factor -> ID .)
    TO              reduce using rule 61 (factor -> ID .)
    LBRACKET        shift and go to state 97


state 136

    (57) term -> term DIVIDE factor .

    TIMES           reduce using rule 57 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 57 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 57 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 57 (term -> term DIVIDE factor .)
    EQ              reduce using rule 57 (term -> term DIVIDE factor .)
    NE              reduce using rule 57 (term -> term DIVIDE factor .)
    LT              reduce using rule 57 (term -> term DIVIDE factor .)
    LE              reduce using rule 57 (term -> term DIVIDE factor .)
    GT              reduce using rule 57 (term -> term DIVIDE factor .)
    GE              reduce using rule 57 (term -> term DIVIDE factor .)
    AND             reduce using rule 57 (term -> term DIVIDE factor .)
    OR              reduce using rule 57 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 57 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 57 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 57 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 57 (term -> term DIVIDE factor .)
    TO              reduce using rule 57 (term -> term DIVIDE factor .)


state 137

    (60) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 60 (factor -> LPAREN expression RPAREN .)


state 138

    (30) assignment -> ID LBRACKET expression RBRACKET ASSIGN . expression
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (46) expression -> . expression EQ term
    (47) expression -> . expression NE term
    (48) expression -> . expression LT term
    (49) expression -> . expression LE term
    (50) expression -> . expression GT term
    (51) expression -> . expression GE term
    (52) expression -> . expression AND term
    (53) expression -> . expression OR term
    (54) expression -> . term
    (55) expression -> . STRING
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    STRING          shift and go to state 78
    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    expression                     shift and go to state 149
    term                           shift and go to state 77
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 139

    (32) arg_list -> arg_list COMMA expression .
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term
    (46) expression -> expression . EQ term
    (47) expression -> expression . NE term
    (48) expression -> expression . LT term
    (49) expression -> expression . LE term
    (50) expression -> expression . GT term
    (51) expression -> expression . GE term
    (52) expression -> expression . AND term
    (53) expression -> expression . OR term

    RPAREN          reduce using rule 32 (arg_list -> arg_list COMMA expression .)
    COMMA           reduce using rule 32 (arg_list -> arg_list COMMA expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    EQ              shift and go to state 100
    NE              shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    AND             shift and go to state 106
    OR              shift and go to state 107


state 140

    (36) write_list -> write_list COMMA expression .
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term
    (46) expression -> expression . EQ term
    (47) expression -> expression . NE term
    (48) expression -> expression . LT term
    (49) expression -> expression . LE term
    (50) expression -> expression . GT term
    (51) expression -> expression . GE term
    (52) expression -> expression . AND term
    (53) expression -> expression . OR term

    RPAREN          reduce using rule 36 (write_list -> write_list COMMA expression .)
    COMMA           reduce using rule 36 (write_list -> write_list COMMA expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    EQ              shift and go to state 100
    NE              shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    AND             shift and go to state 106
    OR              shift and go to state 107


state 141

    (38) write_list -> ID COMMA expression .
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term
    (46) expression -> expression . EQ term
    (47) expression -> expression . NE term
    (48) expression -> expression . LT term
    (49) expression -> expression . LE term
    (50) expression -> expression . GT term
    (51) expression -> expression . GE term
    (52) expression -> expression . AND term
    (53) expression -> expression . OR term

    RPAREN          reduce using rule 38 (write_list -> ID COMMA expression .)
    COMMA           reduce using rule 38 (write_list -> ID COMMA expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    EQ              shift and go to state 100
    NE              shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    AND             shift and go to state 106
    OR              shift and go to state 107


state 142

    (39) if_statement -> IF LPAREN expression RPAREN THEN . LBRACE statement_list RBRACE
    (40) if_statement -> IF LPAREN expression RPAREN THEN . LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    LBRACE          shift and go to state 150


state 143

    (41) while_statement -> WHILE LPAREN expression RPAREN DO . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 151


state 144

    (42) for_statement -> FOR ID LBRACKET expression TO . expression RBRACKET DO LBRACE statement_list RBRACE
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (46) expression -> . expression EQ term
    (47) expression -> . expression NE term
    (48) expression -> . expression LT term
    (49) expression -> . expression LE term
    (50) expression -> . expression GT term
    (51) expression -> . expression GE term
    (52) expression -> . expression AND term
    (53) expression -> . expression OR term
    (54) expression -> . term
    (55) expression -> . STRING
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . function_call
    (59) term -> . factor
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (60) factor -> . LPAREN expression RPAREN
    (61) factor -> . ID
    (62) factor -> . ID LBRACKET expression RBRACKET
    (63) factor -> . INTEGER
    (64) factor -> . FLOATING_POINT

    STRING          shift and go to state 78
    ID              shift and go to state 75
    LPAREN          shift and go to state 81
    INTEGER         shift and go to state 82
    FLOATING_POINT  shift and go to state 83

    expression                     shift and go to state 152
    term                           shift and go to state 77
    factor                         shift and go to state 79
    function_call                  shift and go to state 80

state 145

    (43) return_statement -> RETURN LPAREN expression RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 43 (return_statement -> RETURN LPAREN expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 43 (return_statement -> RETURN LPAREN expression RPAREN SEMICOLON .)


state 146

    (14) function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list return_statement . RBRACE
    (28) statement -> return_statement . SEMICOLON

    RBRACE          shift and go to state 153
    SEMICOLON       shift and go to state 62


state 147

    (15) function -> FUNCTION type ID LPAREN param_list RPAREN LBRACE statement_list return_statement RBRACE .

    MAIN            reduce using rule 15 (function -> FUNCTION type ID LPAREN param_list RPAREN LBRACE statement_list return_statement RBRACE .)
    FUNCTION        reduce using rule 15 (function -> FUNCTION type ID LPAREN param_list RPAREN LBRACE statement_list return_statement RBRACE .)


state 148

    (62) factor -> ID LBRACKET expression RBRACKET .

    TIMES           reduce using rule 62 (factor -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 62 (factor -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 62 (factor -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 62 (factor -> ID LBRACKET expression RBRACKET .)
    EQ              reduce using rule 62 (factor -> ID LBRACKET expression RBRACKET .)
    NE              reduce using rule 62 (factor -> ID LBRACKET expression RBRACKET .)
    LT              reduce using rule 62 (factor -> ID LBRACKET expression RBRACKET .)
    LE              reduce using rule 62 (factor -> ID LBRACKET expression RBRACKET .)
    GT              reduce using rule 62 (factor -> ID LBRACKET expression RBRACKET .)
    GE              reduce using rule 62 (factor -> ID LBRACKET expression RBRACKET .)
    AND             reduce using rule 62 (factor -> ID LBRACKET expression RBRACKET .)
    OR              reduce using rule 62 (factor -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 62 (factor -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 62 (factor -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 62 (factor -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 62 (factor -> ID LBRACKET expression RBRACKET .)
    TO              reduce using rule 62 (factor -> ID LBRACKET expression RBRACKET .)


state 149

    (30) assignment -> ID LBRACKET expression RBRACKET ASSIGN expression .
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term
    (46) expression -> expression . EQ term
    (47) expression -> expression . NE term
    (48) expression -> expression . LT term
    (49) expression -> expression . LE term
    (50) expression -> expression . GT term
    (51) expression -> expression . GE term
    (52) expression -> expression . AND term
    (53) expression -> expression . OR term

    SEMICOLON       reduce using rule 30 (assignment -> ID LBRACKET expression RBRACKET ASSIGN expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    EQ              shift and go to state 100
    NE              shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    AND             shift and go to state 106
    OR              shift and go to state 107


state 150

    (39) if_statement -> IF LPAREN expression RPAREN THEN LBRACE . statement_list RBRACE
    (40) if_statement -> IF LPAREN expression RPAREN THEN LBRACE . statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (19) statement_list -> . statement_list statement
    (20) statement_list -> . empty
    (65) empty -> .

    RBRACE          reduce using rule 65 (empty -> .)
    ID              reduce using rule 65 (empty -> .)
    READ            reduce using rule 65 (empty -> .)
    WRITE           reduce using rule 65 (empty -> .)
    IF              reduce using rule 65 (empty -> .)
    WHILE           reduce using rule 65 (empty -> .)
    FOR             reduce using rule 65 (empty -> .)
    RETURN          reduce using rule 65 (empty -> .)

    statement_list                 shift and go to state 154
    empty                          shift and go to state 35

state 151

    (41) while_statement -> WHILE LPAREN expression RPAREN DO LBRACE . statement_list RBRACE
    (19) statement_list -> . statement_list statement
    (20) statement_list -> . empty
    (65) empty -> .

    RBRACE          reduce using rule 65 (empty -> .)
    ID              reduce using rule 65 (empty -> .)
    READ            reduce using rule 65 (empty -> .)
    WRITE           reduce using rule 65 (empty -> .)
    IF              reduce using rule 65 (empty -> .)
    WHILE           reduce using rule 65 (empty -> .)
    FOR             reduce using rule 65 (empty -> .)
    RETURN          reduce using rule 65 (empty -> .)

    statement_list                 shift and go to state 155
    empty                          shift and go to state 35

state 152

    (42) for_statement -> FOR ID LBRACKET expression TO expression . RBRACKET DO LBRACE statement_list RBRACE
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term
    (46) expression -> expression . EQ term
    (47) expression -> expression . NE term
    (48) expression -> expression . LT term
    (49) expression -> expression . LE term
    (50) expression -> expression . GT term
    (51) expression -> expression . GE term
    (52) expression -> expression . AND term
    (53) expression -> expression . OR term

    RBRACKET        shift and go to state 156
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    EQ              shift and go to state 100
    NE              shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    AND             shift and go to state 106
    OR              shift and go to state 107


state 153

    (14) function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list return_statement RBRACE .

    MAIN            reduce using rule 14 (function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list return_statement RBRACE .)
    FUNCTION        reduce using rule 14 (function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list return_statement RBRACE .)


state 154

    (39) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list . RBRACE
    (40) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list . RBRACE ELSE LBRACE statement_list RBRACE
    (19) statement_list -> statement_list . statement
    (21) statement -> . assignment SEMICOLON
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . read_statement SEMICOLON
    (24) statement -> . write_statement SEMICOLON
    (25) statement -> . if_statement
    (26) statement -> . while_statement
    (27) statement -> . for_statement
    (28) statement -> . return_statement SEMICOLON
    (29) assignment -> . ID ASSIGN expression
    (30) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (34) read_statement -> . READ id_list
    (35) write_statement -> . WRITE LPAREN write_list RPAREN
    (39) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (40) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (41) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (42) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE
    (43) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON

    RBRACE          shift and go to state 157
    ID              shift and go to state 48
    READ            shift and go to state 49
    WRITE           shift and go to state 50
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    RETURN          shift and go to state 54

    statement                      shift and go to state 39
    assignment                     shift and go to state 40
    function_call                  shift and go to state 41
    read_statement                 shift and go to state 42
    write_statement                shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    for_statement                  shift and go to state 46
    return_statement               shift and go to state 47

state 155

    (41) while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list . RBRACE
    (19) statement_list -> statement_list . statement
    (21) statement -> . assignment SEMICOLON
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . read_statement SEMICOLON
    (24) statement -> . write_statement SEMICOLON
    (25) statement -> . if_statement
    (26) statement -> . while_statement
    (27) statement -> . for_statement
    (28) statement -> . return_statement SEMICOLON
    (29) assignment -> . ID ASSIGN expression
    (30) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (34) read_statement -> . READ id_list
    (35) write_statement -> . WRITE LPAREN write_list RPAREN
    (39) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (40) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (41) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (42) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE
    (43) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON

    RBRACE          shift and go to state 158
    ID              shift and go to state 48
    READ            shift and go to state 49
    WRITE           shift and go to state 50
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    RETURN          shift and go to state 54

    statement                      shift and go to state 39
    assignment                     shift and go to state 40
    function_call                  shift and go to state 41
    read_statement                 shift and go to state 42
    write_statement                shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    for_statement                  shift and go to state 46
    return_statement               shift and go to state 47

state 156

    (42) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET . DO LBRACE statement_list RBRACE

    DO              shift and go to state 159


state 157

    (39) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .
    (40) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE . ELSE LBRACE statement_list RBRACE

    RBRACE          reduce using rule 39 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    ID              reduce using rule 39 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    READ            reduce using rule 39 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 39 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    IF              reduce using rule 39 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 39 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    FOR             reduce using rule 39 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 39 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    ELSE            shift and go to state 160


state 158

    (41) while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 41 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    ID              reduce using rule 41 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    READ            reduce using rule 41 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 41 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    IF              reduce using rule 41 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 41 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    FOR             reduce using rule 41 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 41 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)


state 159

    (42) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 161


state 160

    (40) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 162


state 161

    (42) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE . statement_list RBRACE
    (19) statement_list -> . statement_list statement
    (20) statement_list -> . empty
    (65) empty -> .

    RBRACE          reduce using rule 65 (empty -> .)
    ID              reduce using rule 65 (empty -> .)
    READ            reduce using rule 65 (empty -> .)
    WRITE           reduce using rule 65 (empty -> .)
    IF              reduce using rule 65 (empty -> .)
    WHILE           reduce using rule 65 (empty -> .)
    FOR             reduce using rule 65 (empty -> .)
    RETURN          reduce using rule 65 (empty -> .)

    statement_list                 shift and go to state 163
    empty                          shift and go to state 35

state 162

    (40) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE . statement_list RBRACE
    (19) statement_list -> . statement_list statement
    (20) statement_list -> . empty
    (65) empty -> .

    RBRACE          reduce using rule 65 (empty -> .)
    ID              reduce using rule 65 (empty -> .)
    READ            reduce using rule 65 (empty -> .)
    WRITE           reduce using rule 65 (empty -> .)
    IF              reduce using rule 65 (empty -> .)
    WHILE           reduce using rule 65 (empty -> .)
    FOR             reduce using rule 65 (empty -> .)
    RETURN          reduce using rule 65 (empty -> .)

    statement_list                 shift and go to state 164
    empty                          shift and go to state 35

state 163

    (42) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list . RBRACE
    (19) statement_list -> statement_list . statement
    (21) statement -> . assignment SEMICOLON
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . read_statement SEMICOLON
    (24) statement -> . write_statement SEMICOLON
    (25) statement -> . if_statement
    (26) statement -> . while_statement
    (27) statement -> . for_statement
    (28) statement -> . return_statement SEMICOLON
    (29) assignment -> . ID ASSIGN expression
    (30) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (34) read_statement -> . READ id_list
    (35) write_statement -> . WRITE LPAREN write_list RPAREN
    (39) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (40) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (41) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (42) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE
    (43) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON

    RBRACE          shift and go to state 165
    ID              shift and go to state 48
    READ            shift and go to state 49
    WRITE           shift and go to state 50
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    RETURN          shift and go to state 54

    statement                      shift and go to state 39
    assignment                     shift and go to state 40
    function_call                  shift and go to state 41
    read_statement                 shift and go to state 42
    write_statement                shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    for_statement                  shift and go to state 46
    return_statement               shift and go to state 47

state 164

    (40) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list . RBRACE
    (19) statement_list -> statement_list . statement
    (21) statement -> . assignment SEMICOLON
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . read_statement SEMICOLON
    (24) statement -> . write_statement SEMICOLON
    (25) statement -> . if_statement
    (26) statement -> . while_statement
    (27) statement -> . for_statement
    (28) statement -> . return_statement SEMICOLON
    (29) assignment -> . ID ASSIGN expression
    (30) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (31) function_call -> . ID LPAREN arg_list RPAREN
    (34) read_statement -> . READ id_list
    (35) write_statement -> . WRITE LPAREN write_list RPAREN
    (39) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (40) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (41) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (42) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE
    (43) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON

    RBRACE          shift and go to state 166
    ID              shift and go to state 48
    READ            shift and go to state 49
    WRITE           shift and go to state 50
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    RETURN          shift and go to state 54

    statement                      shift and go to state 39
    assignment                     shift and go to state 40
    function_call                  shift and go to state 41
    read_statement                 shift and go to state 42
    write_statement                shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    for_statement                  shift and go to state 46
    return_statement               shift and go to state 47

state 165

    (42) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 42 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    ID              reduce using rule 42 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    READ            reduce using rule 42 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 42 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    IF              reduce using rule 42 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 42 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    FOR             reduce using rule 42 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 42 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)


state 166

    (40) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    ID              reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    READ            reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    IF              reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    FOR             reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 8 resolved as shift
