Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARC
    CIRCLE
    COLOR
    LINE
    NOT
    PENDOWN
    PENUP
    POINT
    THICKNESS
    VOID

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON vars function_list main_function
Rule 2     program -> PROGRAM ID SEMICOLON vars empty main_function
Rule 3     vars -> VARS var_list
Rule 4     var_list -> var_list type id_list SEMICOLON
Rule 5     var_list -> type id_list SEMICOLON
Rule 6     type -> INT
Rule 7     type -> FLOAT
Rule 8     type -> BOOL
Rule 9     type -> CHAR
Rule 10    id_list -> id_list COMMA ID
Rule 11    id_list -> ID
Rule 12    function_list -> function_list function
Rule 13    function_list -> empty
Rule 14    function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list return_statement RBRACE
Rule 15    param_list -> param_list COMMA type ID
Rule 16    param_list -> type ID
Rule 17    main_function -> MAIN LPAREN RPAREN LBRACE statement_list RBRACE
Rule 18    statement_list -> statement_list statement
Rule 19    statement_list -> empty
Rule 20    statement -> assignment SEMICOLON
Rule 21    statement -> function_call SEMICOLON
Rule 22    statement -> read_statement SEMICOLON
Rule 23    statement -> write_statement SEMICOLON
Rule 24    statement -> if_statement
Rule 25    statement -> while_statement
Rule 26    statement -> for_statement
Rule 27    statement -> return_statement SEMICOLON
Rule 28    assignment -> ID ASSIGN expression
Rule 29    assignment -> ID LBRACKET expression RBRACKET ASSIGN expression
Rule 30    function_call -> ID LPAREN arg_list RPAREN
Rule 31    arg_list -> arg_list COMMA expression
Rule 32    arg_list -> expression
Rule 33    read_statement -> READ id_list
Rule 34    write_statement -> WRITE LPAREN write_list RPAREN
Rule 35    write_list -> write_list COMMA expression
Rule 36    write_list -> STRING
Rule 37    write_list -> ID COMMA expression
Rule 38    if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
Rule 39    if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
Rule 40    while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
Rule 41    for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE
Rule 42    return_statement -> RETURN LPAREN expression RPAREN SEMICOLON
Rule 43    expression -> expression PLUS term
Rule 44    expression -> expression MINUS term
Rule 45    expression -> expression EQ term
Rule 46    expression -> expression NE term
Rule 47    expression -> expression LT term
Rule 48    expression -> expression LE term
Rule 49    expression -> expression GT term
Rule 50    expression -> expression GE term
Rule 51    expression -> expression AND term
Rule 52    expression -> expression OR term
Rule 53    expression -> term
Rule 54    expression -> STRING
Rule 55    term -> term TIMES factor
Rule 56    term -> term DIVIDE factor
Rule 57    term -> function_call
Rule 58    term -> factor
Rule 59    factor -> LPAREN expression RPAREN
Rule 60    factor -> ID
Rule 61    factor -> ID LBRACKET expression RBRACKET
Rule 62    factor -> INTEGER
Rule 63    factor -> FLOATING_POINT
Rule 64    empty -> <empty>

Terminals, with rules where they appear

AND                  : 51
ARC                  : 
ASSIGN               : 28 29
BOOL                 : 8
CHAR                 : 9
CIRCLE               : 
COLOR                : 
COMMA                : 10 15 31 35 37
DIVIDE               : 56
DO                   : 40 41
ELSE                 : 39
EQ                   : 45
FLOAT                : 7
FLOATING_POINT       : 63
FOR                  : 41
FUNCTION             : 14
GE                   : 50
GT                   : 49
ID                   : 1 2 10 11 14 15 16 28 29 30 37 41 60 61
IF                   : 38 39
INT                  : 6
INTEGER              : 62
LBRACE               : 14 17 38 39 39 40 41
LBRACKET             : 29 41 61
LE                   : 48
LINE                 : 
LPAREN               : 14 17 30 34 38 39 40 42 59
LT                   : 47
MAIN                 : 17
MINUS                : 44
NE                   : 46
NOT                  : 
OR                   : 52
PENDOWN              : 
PENUP                : 
PLUS                 : 43
POINT                : 
PROGRAM              : 1 2
RBRACE               : 14 17 38 39 39 40 41
RBRACKET             : 29 41 61
READ                 : 33
RETURN               : 42
RPAREN               : 14 17 30 34 38 39 40 42 59
SEMICOLON            : 1 2 4 5 20 21 22 23 27 42
STRING               : 36 54
THEN                 : 38 39
THICKNESS            : 
TIMES                : 55
TO                   : 41
VARS                 : 3
VOID                 : 
WHILE                : 40
WRITE                : 34
error                : 

Nonterminals, with rules where they appear

arg_list             : 30 31
assignment           : 20
empty                : 2 13 19
expression           : 28 29 29 31 32 35 37 38 39 40 41 41 42 43 44 45 46 47 48 49 50 51 52 59 61
factor               : 55 56 58
for_statement        : 26
function             : 12
function_call        : 21 57
function_list        : 1 12
id_list              : 4 5 10 33
if_statement         : 24
main_function        : 1 2
param_list           : 14 15
program              : 0
read_statement       : 22
return_statement     : 14 27
statement            : 18
statement_list       : 14 17 18 38 39 39 40 41
term                 : 43 44 45 46 47 48 49 50 51 52 53 55 56
type                 : 4 5 14 15 16
var_list             : 3 4
vars                 : 1 2 14
while_statement      : 25
write_list           : 34 35
write_statement      : 23

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON vars function_list main_function
    (2) program -> . PROGRAM ID SEMICOLON vars empty main_function

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON vars function_list main_function
    (2) program -> PROGRAM . ID SEMICOLON vars empty main_function

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON vars function_list main_function
    (2) program -> PROGRAM ID . SEMICOLON vars empty main_function

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . vars function_list main_function
    (2) program -> PROGRAM ID SEMICOLON . vars empty main_function
    (3) vars -> . VARS var_list

    VARS            shift and go to state 6

    vars                           shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMICOLON vars . function_list main_function
    (2) program -> PROGRAM ID SEMICOLON vars . empty main_function
    (12) function_list -> . function_list function
    (13) function_list -> . empty
    (64) empty -> .

    MAIN            reduce using rule 64 (empty -> .)
    FUNCTION        reduce using rule 64 (empty -> .)

    function_list                  shift and go to state 7
    empty                          shift and go to state 8

state 6

    (3) vars -> VARS . var_list
    (4) var_list -> . var_list type id_list SEMICOLON
    (5) var_list -> . type id_list SEMICOLON
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOL
    (9) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    BOOL            shift and go to state 13
    CHAR            shift and go to state 14

    var_list                       shift and go to state 9
    type                           shift and go to state 10

state 7

    (1) program -> PROGRAM ID SEMICOLON vars function_list . main_function
    (12) function_list -> function_list . function
    (17) main_function -> . MAIN LPAREN RPAREN LBRACE statement_list RBRACE
    (14) function -> . FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list return_statement RBRACE

    MAIN            shift and go to state 17
    FUNCTION        shift and go to state 18

    main_function                  shift and go to state 15
    function                       shift and go to state 16

state 8

    (2) program -> PROGRAM ID SEMICOLON vars empty . main_function
    (13) function_list -> empty .
    (17) main_function -> . MAIN LPAREN RPAREN LBRACE statement_list RBRACE

  ! shift/reduce conflict for MAIN resolved as shift
    FUNCTION        reduce using rule 13 (function_list -> empty .)
    MAIN            shift and go to state 17

  ! MAIN            [ reduce using rule 13 (function_list -> empty .) ]

    main_function                  shift and go to state 19

state 9

    (3) vars -> VARS var_list .
    (4) var_list -> var_list . type id_list SEMICOLON
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOL
    (9) type -> . CHAR

    MAIN            reduce using rule 3 (vars -> VARS var_list .)
    FUNCTION        reduce using rule 3 (vars -> VARS var_list .)
    LBRACE          reduce using rule 3 (vars -> VARS var_list .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    BOOL            shift and go to state 13
    CHAR            shift and go to state 14

    type                           shift and go to state 20

state 10

    (5) var_list -> type . id_list SEMICOLON
    (10) id_list -> . id_list COMMA ID
    (11) id_list -> . ID

    ID              shift and go to state 22

    id_list                        shift and go to state 21

state 11

    (6) type -> INT .

    ID              reduce using rule 6 (type -> INT .)


state 12

    (7) type -> FLOAT .

    ID              reduce using rule 7 (type -> FLOAT .)


state 13

    (8) type -> BOOL .

    ID              reduce using rule 8 (type -> BOOL .)


state 14

    (9) type -> CHAR .

    ID              reduce using rule 9 (type -> CHAR .)


state 15

    (1) program -> PROGRAM ID SEMICOLON vars function_list main_function .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON vars function_list main_function .)


state 16

    (12) function_list -> function_list function .

    MAIN            reduce using rule 12 (function_list -> function_list function .)
    FUNCTION        reduce using rule 12 (function_list -> function_list function .)


state 17

    (17) main_function -> MAIN . LPAREN RPAREN LBRACE statement_list RBRACE

    LPAREN          shift and go to state 23


state 18

    (14) function -> FUNCTION . type ID LPAREN param_list RPAREN vars LBRACE statement_list return_statement RBRACE
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOL
    (9) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    BOOL            shift and go to state 13
    CHAR            shift and go to state 14

    type                           shift and go to state 24

state 19

    (2) program -> PROGRAM ID SEMICOLON vars empty main_function .

    $end            reduce using rule 2 (program -> PROGRAM ID SEMICOLON vars empty main_function .)


state 20

    (4) var_list -> var_list type . id_list SEMICOLON
    (10) id_list -> . id_list COMMA ID
    (11) id_list -> . ID

    ID              shift and go to state 22

    id_list                        shift and go to state 25

state 21

    (5) var_list -> type id_list . SEMICOLON
    (10) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 26
    COMMA           shift and go to state 27


state 22

    (11) id_list -> ID .

    SEMICOLON       reduce using rule 11 (id_list -> ID .)
    COMMA           reduce using rule 11 (id_list -> ID .)


state 23

    (17) main_function -> MAIN LPAREN . RPAREN LBRACE statement_list RBRACE

    RPAREN          shift and go to state 28


state 24

    (14) function -> FUNCTION type . ID LPAREN param_list RPAREN vars LBRACE statement_list return_statement RBRACE

    ID              shift and go to state 29


state 25

    (4) var_list -> var_list type id_list . SEMICOLON
    (10) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 30
    COMMA           shift and go to state 27


state 26

    (5) var_list -> type id_list SEMICOLON .

    INT             reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    FLOAT           reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    BOOL            reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    CHAR            reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    MAIN            reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    FUNCTION        reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    LBRACE          reduce using rule 5 (var_list -> type id_list SEMICOLON .)


state 27

    (10) id_list -> id_list COMMA . ID

    ID              shift and go to state 31


state 28

    (17) main_function -> MAIN LPAREN RPAREN . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 32


state 29

    (14) function -> FUNCTION type ID . LPAREN param_list RPAREN vars LBRACE statement_list return_statement RBRACE

    LPAREN          shift and go to state 33


state 30

    (4) var_list -> var_list type id_list SEMICOLON .

    INT             reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    FLOAT           reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    BOOL            reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    CHAR            reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    MAIN            reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    FUNCTION        reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    LBRACE          reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)


state 31

    (10) id_list -> id_list COMMA ID .

    SEMICOLON       reduce using rule 10 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 10 (id_list -> id_list COMMA ID .)


state 32

    (17) main_function -> MAIN LPAREN RPAREN LBRACE . statement_list RBRACE
    (18) statement_list -> . statement_list statement
    (19) statement_list -> . empty
    (64) empty -> .

    RBRACE          reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)
    READ            reduce using rule 64 (empty -> .)
    WRITE           reduce using rule 64 (empty -> .)
    IF              reduce using rule 64 (empty -> .)
    WHILE           reduce using rule 64 (empty -> .)
    FOR             reduce using rule 64 (empty -> .)
    RETURN          reduce using rule 64 (empty -> .)

    statement_list                 shift and go to state 34
    empty                          shift and go to state 35

state 33

    (14) function -> FUNCTION type ID LPAREN . param_list RPAREN vars LBRACE statement_list return_statement RBRACE
    (15) param_list -> . param_list COMMA type ID
    (16) param_list -> . type ID
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOL
    (9) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    BOOL            shift and go to state 13
    CHAR            shift and go to state 14

    type                           shift and go to state 36
    param_list                     shift and go to state 37

state 34

    (17) main_function -> MAIN LPAREN RPAREN LBRACE statement_list . RBRACE
    (18) statement_list -> statement_list . statement
    (20) statement -> . assignment SEMICOLON
    (21) statement -> . function_call SEMICOLON
    (22) statement -> . read_statement SEMICOLON
    (23) statement -> . write_statement SEMICOLON
    (24) statement -> . if_statement
    (25) statement -> . while_statement
    (26) statement -> . for_statement
    (27) statement -> . return_statement SEMICOLON
    (28) assignment -> . ID ASSIGN expression
    (29) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (33) read_statement -> . READ id_list
    (34) write_statement -> . WRITE LPAREN write_list RPAREN
    (38) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (39) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (40) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (41) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE
    (42) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON

    RBRACE          shift and go to state 38
    ID              shift and go to state 48
    READ            shift and go to state 49
    WRITE           shift and go to state 50
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    RETURN          shift and go to state 54

    statement                      shift and go to state 39
    assignment                     shift and go to state 40
    function_call                  shift and go to state 41
    read_statement                 shift and go to state 42
    write_statement                shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    for_statement                  shift and go to state 46
    return_statement               shift and go to state 47

state 35

    (19) statement_list -> empty .

    RBRACE          reduce using rule 19 (statement_list -> empty .)
    ID              reduce using rule 19 (statement_list -> empty .)
    READ            reduce using rule 19 (statement_list -> empty .)
    WRITE           reduce using rule 19 (statement_list -> empty .)
    IF              reduce using rule 19 (statement_list -> empty .)
    WHILE           reduce using rule 19 (statement_list -> empty .)
    FOR             reduce using rule 19 (statement_list -> empty .)
    RETURN          reduce using rule 19 (statement_list -> empty .)


state 36

    (16) param_list -> type . ID

    ID              shift and go to state 55


state 37

    (14) function -> FUNCTION type ID LPAREN param_list . RPAREN vars LBRACE statement_list return_statement RBRACE
    (15) param_list -> param_list . COMMA type ID

    RPAREN          shift and go to state 56
    COMMA           shift and go to state 57


state 38

    (17) main_function -> MAIN LPAREN RPAREN LBRACE statement_list RBRACE .

    $end            reduce using rule 17 (main_function -> MAIN LPAREN RPAREN LBRACE statement_list RBRACE .)


state 39

    (18) statement_list -> statement_list statement .

    RBRACE          reduce using rule 18 (statement_list -> statement_list statement .)
    ID              reduce using rule 18 (statement_list -> statement_list statement .)
    READ            reduce using rule 18 (statement_list -> statement_list statement .)
    WRITE           reduce using rule 18 (statement_list -> statement_list statement .)
    IF              reduce using rule 18 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 18 (statement_list -> statement_list statement .)
    FOR             reduce using rule 18 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 18 (statement_list -> statement_list statement .)


state 40

    (20) statement -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 58


state 41

    (21) statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 59


state 42

    (22) statement -> read_statement . SEMICOLON

    SEMICOLON       shift and go to state 60


state 43

    (23) statement -> write_statement . SEMICOLON

    SEMICOLON       shift and go to state 61


state 44

    (24) statement -> if_statement .

    RBRACE          reduce using rule 24 (statement -> if_statement .)
    ID              reduce using rule 24 (statement -> if_statement .)
    READ            reduce using rule 24 (statement -> if_statement .)
    WRITE           reduce using rule 24 (statement -> if_statement .)
    IF              reduce using rule 24 (statement -> if_statement .)
    WHILE           reduce using rule 24 (statement -> if_statement .)
    FOR             reduce using rule 24 (statement -> if_statement .)
    RETURN          reduce using rule 24 (statement -> if_statement .)


state 45

    (25) statement -> while_statement .

    RBRACE          reduce using rule 25 (statement -> while_statement .)
    ID              reduce using rule 25 (statement -> while_statement .)
    READ            reduce using rule 25 (statement -> while_statement .)
    WRITE           reduce using rule 25 (statement -> while_statement .)
    IF              reduce using rule 25 (statement -> while_statement .)
    WHILE           reduce using rule 25 (statement -> while_statement .)
    FOR             reduce using rule 25 (statement -> while_statement .)
    RETURN          reduce using rule 25 (statement -> while_statement .)


state 46

    (26) statement -> for_statement .

    RBRACE          reduce using rule 26 (statement -> for_statement .)
    ID              reduce using rule 26 (statement -> for_statement .)
    READ            reduce using rule 26 (statement -> for_statement .)
    WRITE           reduce using rule 26 (statement -> for_statement .)
    IF              reduce using rule 26 (statement -> for_statement .)
    WHILE           reduce using rule 26 (statement -> for_statement .)
    FOR             reduce using rule 26 (statement -> for_statement .)
    RETURN          reduce using rule 26 (statement -> for_statement .)


state 47

    (27) statement -> return_statement . SEMICOLON

    SEMICOLON       shift and go to state 62


state 48

    (28) assignment -> ID . ASSIGN expression
    (29) assignment -> ID . LBRACKET expression RBRACKET ASSIGN expression
    (30) function_call -> ID . LPAREN arg_list RPAREN

    ASSIGN          shift and go to state 63
    LBRACKET        shift and go to state 64
    LPAREN          shift and go to state 65


state 49

    (33) read_statement -> READ . id_list
    (10) id_list -> . id_list COMMA ID
    (11) id_list -> . ID

    ID              shift and go to state 22

    id_list                        shift and go to state 66

state 50

    (34) write_statement -> WRITE . LPAREN write_list RPAREN

    LPAREN          shift and go to state 67


state 51

    (38) if_statement -> IF . LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (39) if_statement -> IF . LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    LPAREN          shift and go to state 68


state 52

    (40) while_statement -> WHILE . LPAREN expression RPAREN DO LBRACE statement_list RBRACE

    LPAREN          shift and go to state 69


state 53

    (41) for_statement -> FOR . ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    ID              shift and go to state 70


state 54

    (42) return_statement -> RETURN . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 71


state 55

    (16) param_list -> type ID .

    RPAREN          reduce using rule 16 (param_list -> type ID .)
    COMMA           reduce using rule 16 (param_list -> type ID .)


state 56

    (14) function -> FUNCTION type ID LPAREN param_list RPAREN . vars LBRACE statement_list return_statement RBRACE
    (3) vars -> . VARS var_list

    VARS            shift and go to state 6

    vars                           shift and go to state 72

state 57

    (15) param_list -> param_list COMMA . type ID
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOL
    (9) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    BOOL            shift and go to state 13
    CHAR            shift and go to state 14

    type                           shift and go to state 73

state 58

    (20) statement -> assignment SEMICOLON .

    RBRACE          reduce using rule 20 (statement -> assignment SEMICOLON .)
    ID              reduce using rule 20 (statement -> assignment SEMICOLON .)
    READ            reduce using rule 20 (statement -> assignment SEMICOLON .)
    WRITE           reduce using rule 20 (statement -> assignment SEMICOLON .)
    IF              reduce using rule 20 (statement -> assignment SEMICOLON .)
    WHILE           reduce using rule 20 (statement -> assignment SEMICOLON .)
    FOR             reduce using rule 20 (statement -> assignment SEMICOLON .)
    RETURN          reduce using rule 20 (statement -> assignment SEMICOLON .)


state 59

    (21) statement -> function_call SEMICOLON .

    RBRACE          reduce using rule 21 (statement -> function_call SEMICOLON .)
    ID              reduce using rule 21 (statement -> function_call SEMICOLON .)
    READ            reduce using rule 21 (statement -> function_call SEMICOLON .)
    WRITE           reduce using rule 21 (statement -> function_call SEMICOLON .)
    IF              reduce using rule 21 (statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 21 (statement -> function_call SEMICOLON .)
    FOR             reduce using rule 21 (statement -> function_call SEMICOLON .)
    RETURN          reduce using rule 21 (statement -> function_call SEMICOLON .)


state 60

    (22) statement -> read_statement SEMICOLON .

    RBRACE          reduce using rule 22 (statement -> read_statement SEMICOLON .)
    ID              reduce using rule 22 (statement -> read_statement SEMICOLON .)
    READ            reduce using rule 22 (statement -> read_statement SEMICOLON .)
    WRITE           reduce using rule 22 (statement -> read_statement SEMICOLON .)
    IF              reduce using rule 22 (statement -> read_statement SEMICOLON .)
    WHILE           reduce using rule 22 (statement -> read_statement SEMICOLON .)
    FOR             reduce using rule 22 (statement -> read_statement SEMICOLON .)
    RETURN          reduce using rule 22 (statement -> read_statement SEMICOLON .)


state 61

    (23) statement -> write_statement SEMICOLON .

    RBRACE          reduce using rule 23 (statement -> write_statement SEMICOLON .)
    ID              reduce using rule 23 (statement -> write_statement SEMICOLON .)
    READ            reduce using rule 23 (statement -> write_statement SEMICOLON .)
    WRITE           reduce using rule 23 (statement -> write_statement SEMICOLON .)
    IF              reduce using rule 23 (statement -> write_statement SEMICOLON .)
    WHILE           reduce using rule 23 (statement -> write_statement SEMICOLON .)
    FOR             reduce using rule 23 (statement -> write_statement SEMICOLON .)
    RETURN          reduce using rule 23 (statement -> write_statement SEMICOLON .)


state 62

    (27) statement -> return_statement SEMICOLON .

    RBRACE          reduce using rule 27 (statement -> return_statement SEMICOLON .)
    ID              reduce using rule 27 (statement -> return_statement SEMICOLON .)
    READ            reduce using rule 27 (statement -> return_statement SEMICOLON .)
    WRITE           reduce using rule 27 (statement -> return_statement SEMICOLON .)
    IF              reduce using rule 27 (statement -> return_statement SEMICOLON .)
    WHILE           reduce using rule 27 (statement -> return_statement SEMICOLON .)
    FOR             reduce using rule 27 (statement -> return_statement SEMICOLON .)
    RETURN          reduce using rule 27 (statement -> return_statement SEMICOLON .)


state 63

    (28) assignment -> ID ASSIGN . expression
    (43) expression -> . expression PLUS term
    (44) expression -> . expression MINUS term
    (45) expression -> . expression EQ term
    (46) expression -> . expression NE term
    (47) expression -> . expression LT term
    (48) expression -> . expression LE term
    (49) expression -> . expression GT term
    (50) expression -> . expression GE term
    (51) expression -> . expression AND term
    (52) expression -> . expression OR term
    (53) expression -> . term
    (54) expression -> . STRING
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    STRING          shift and go to state 77
    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    expression                     shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 64

    (29) assignment -> ID LBRACKET . expression RBRACKET ASSIGN expression
    (43) expression -> . expression PLUS term
    (44) expression -> . expression MINUS term
    (45) expression -> . expression EQ term
    (46) expression -> . expression NE term
    (47) expression -> . expression LT term
    (48) expression -> . expression LE term
    (49) expression -> . expression GT term
    (50) expression -> . expression GE term
    (51) expression -> . expression AND term
    (52) expression -> . expression OR term
    (53) expression -> . term
    (54) expression -> . STRING
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    STRING          shift and go to state 77
    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    expression                     shift and go to state 83
    term                           shift and go to state 76
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 65

    (30) function_call -> ID LPAREN . arg_list RPAREN
    (31) arg_list -> . arg_list COMMA expression
    (32) arg_list -> . expression
    (43) expression -> . expression PLUS term
    (44) expression -> . expression MINUS term
    (45) expression -> . expression EQ term
    (46) expression -> . expression NE term
    (47) expression -> . expression LT term
    (48) expression -> . expression LE term
    (49) expression -> . expression GT term
    (50) expression -> . expression GE term
    (51) expression -> . expression AND term
    (52) expression -> . expression OR term
    (53) expression -> . term
    (54) expression -> . STRING
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    STRING          shift and go to state 77
    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    arg_list                       shift and go to state 84
    expression                     shift and go to state 85
    term                           shift and go to state 76
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 66

    (33) read_statement -> READ id_list .
    (10) id_list -> id_list . COMMA ID

    SEMICOLON       reduce using rule 33 (read_statement -> READ id_list .)
    COMMA           shift and go to state 27


state 67

    (34) write_statement -> WRITE LPAREN . write_list RPAREN
    (35) write_list -> . write_list COMMA expression
    (36) write_list -> . STRING
    (37) write_list -> . ID COMMA expression

    STRING          shift and go to state 87
    ID              shift and go to state 88

    write_list                     shift and go to state 86

state 68

    (38) if_statement -> IF LPAREN . expression RPAREN THEN LBRACE statement_list RBRACE
    (39) if_statement -> IF LPAREN . expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (43) expression -> . expression PLUS term
    (44) expression -> . expression MINUS term
    (45) expression -> . expression EQ term
    (46) expression -> . expression NE term
    (47) expression -> . expression LT term
    (48) expression -> . expression LE term
    (49) expression -> . expression GT term
    (50) expression -> . expression GE term
    (51) expression -> . expression AND term
    (52) expression -> . expression OR term
    (53) expression -> . term
    (54) expression -> . STRING
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    STRING          shift and go to state 77
    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    expression                     shift and go to state 89
    term                           shift and go to state 76
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 69

    (40) while_statement -> WHILE LPAREN . expression RPAREN DO LBRACE statement_list RBRACE
    (43) expression -> . expression PLUS term
    (44) expression -> . expression MINUS term
    (45) expression -> . expression EQ term
    (46) expression -> . expression NE term
    (47) expression -> . expression LT term
    (48) expression -> . expression LE term
    (49) expression -> . expression GT term
    (50) expression -> . expression GE term
    (51) expression -> . expression AND term
    (52) expression -> . expression OR term
    (53) expression -> . term
    (54) expression -> . STRING
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    STRING          shift and go to state 77
    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    expression                     shift and go to state 90
    term                           shift and go to state 76
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 70

    (41) for_statement -> FOR ID . LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    LBRACKET        shift and go to state 91


state 71

    (42) return_statement -> RETURN LPAREN . expression RPAREN SEMICOLON
    (43) expression -> . expression PLUS term
    (44) expression -> . expression MINUS term
    (45) expression -> . expression EQ term
    (46) expression -> . expression NE term
    (47) expression -> . expression LT term
    (48) expression -> . expression LE term
    (49) expression -> . expression GT term
    (50) expression -> . expression GE term
    (51) expression -> . expression AND term
    (52) expression -> . expression OR term
    (53) expression -> . term
    (54) expression -> . STRING
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    STRING          shift and go to state 77
    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    expression                     shift and go to state 92
    term                           shift and go to state 76
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 72

    (14) function -> FUNCTION type ID LPAREN param_list RPAREN vars . LBRACE statement_list return_statement RBRACE

    LBRACE          shift and go to state 93


state 73

    (15) param_list -> param_list COMMA type . ID

    ID              shift and go to state 94


state 74

    (30) function_call -> ID . LPAREN arg_list RPAREN
    (60) factor -> ID .
    (61) factor -> ID . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 65
    TIMES           reduce using rule 60 (factor -> ID .)
    DIVIDE          reduce using rule 60 (factor -> ID .)
    PLUS            reduce using rule 60 (factor -> ID .)
    MINUS           reduce using rule 60 (factor -> ID .)
    EQ              reduce using rule 60 (factor -> ID .)
    NE              reduce using rule 60 (factor -> ID .)
    LT              reduce using rule 60 (factor -> ID .)
    LE              reduce using rule 60 (factor -> ID .)
    GT              reduce using rule 60 (factor -> ID .)
    GE              reduce using rule 60 (factor -> ID .)
    AND             reduce using rule 60 (factor -> ID .)
    OR              reduce using rule 60 (factor -> ID .)
    SEMICOLON       reduce using rule 60 (factor -> ID .)
    RBRACKET        reduce using rule 60 (factor -> ID .)
    RPAREN          reduce using rule 60 (factor -> ID .)
    COMMA           reduce using rule 60 (factor -> ID .)
    TO              reduce using rule 60 (factor -> ID .)
    LBRACKET        shift and go to state 95


state 75

    (28) assignment -> ID ASSIGN expression .
    (43) expression -> expression . PLUS term
    (44) expression -> expression . MINUS term
    (45) expression -> expression . EQ term
    (46) expression -> expression . NE term
    (47) expression -> expression . LT term
    (48) expression -> expression . LE term
    (49) expression -> expression . GT term
    (50) expression -> expression . GE term
    (51) expression -> expression . AND term
    (52) expression -> expression . OR term

    SEMICOLON       reduce using rule 28 (assignment -> ID ASSIGN expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    EQ              shift and go to state 98
    NE              shift and go to state 99
    LT              shift and go to state 100
    LE              shift and go to state 101
    GT              shift and go to state 102
    GE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105


state 76

    (53) expression -> term .
    (55) term -> term . TIMES factor
    (56) term -> term . DIVIDE factor

    PLUS            reduce using rule 53 (expression -> term .)
    MINUS           reduce using rule 53 (expression -> term .)
    EQ              reduce using rule 53 (expression -> term .)
    NE              reduce using rule 53 (expression -> term .)
    LT              reduce using rule 53 (expression -> term .)
    LE              reduce using rule 53 (expression -> term .)
    GT              reduce using rule 53 (expression -> term .)
    GE              reduce using rule 53 (expression -> term .)
    AND             reduce using rule 53 (expression -> term .)
    OR              reduce using rule 53 (expression -> term .)
    SEMICOLON       reduce using rule 53 (expression -> term .)
    RBRACKET        reduce using rule 53 (expression -> term .)
    RPAREN          reduce using rule 53 (expression -> term .)
    COMMA           reduce using rule 53 (expression -> term .)
    TO              reduce using rule 53 (expression -> term .)
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 77

    (54) expression -> STRING .

    PLUS            reduce using rule 54 (expression -> STRING .)
    MINUS           reduce using rule 54 (expression -> STRING .)
    EQ              reduce using rule 54 (expression -> STRING .)
    NE              reduce using rule 54 (expression -> STRING .)
    LT              reduce using rule 54 (expression -> STRING .)
    LE              reduce using rule 54 (expression -> STRING .)
    GT              reduce using rule 54 (expression -> STRING .)
    GE              reduce using rule 54 (expression -> STRING .)
    AND             reduce using rule 54 (expression -> STRING .)
    OR              reduce using rule 54 (expression -> STRING .)
    SEMICOLON       reduce using rule 54 (expression -> STRING .)
    RBRACKET        reduce using rule 54 (expression -> STRING .)
    RPAREN          reduce using rule 54 (expression -> STRING .)
    COMMA           reduce using rule 54 (expression -> STRING .)
    TO              reduce using rule 54 (expression -> STRING .)


state 78

    (58) term -> factor .

    TIMES           reduce using rule 58 (term -> factor .)
    DIVIDE          reduce using rule 58 (term -> factor .)
    PLUS            reduce using rule 58 (term -> factor .)
    MINUS           reduce using rule 58 (term -> factor .)
    EQ              reduce using rule 58 (term -> factor .)
    NE              reduce using rule 58 (term -> factor .)
    LT              reduce using rule 58 (term -> factor .)
    LE              reduce using rule 58 (term -> factor .)
    GT              reduce using rule 58 (term -> factor .)
    GE              reduce using rule 58 (term -> factor .)
    AND             reduce using rule 58 (term -> factor .)
    OR              reduce using rule 58 (term -> factor .)
    SEMICOLON       reduce using rule 58 (term -> factor .)
    RBRACKET        reduce using rule 58 (term -> factor .)
    RPAREN          reduce using rule 58 (term -> factor .)
    COMMA           reduce using rule 58 (term -> factor .)
    TO              reduce using rule 58 (term -> factor .)


state 79

    (57) term -> function_call .

    TIMES           reduce using rule 57 (term -> function_call .)
    DIVIDE          reduce using rule 57 (term -> function_call .)
    PLUS            reduce using rule 57 (term -> function_call .)
    MINUS           reduce using rule 57 (term -> function_call .)
    EQ              reduce using rule 57 (term -> function_call .)
    NE              reduce using rule 57 (term -> function_call .)
    LT              reduce using rule 57 (term -> function_call .)
    LE              reduce using rule 57 (term -> function_call .)
    GT              reduce using rule 57 (term -> function_call .)
    GE              reduce using rule 57 (term -> function_call .)
    AND             reduce using rule 57 (term -> function_call .)
    OR              reduce using rule 57 (term -> function_call .)
    SEMICOLON       reduce using rule 57 (term -> function_call .)
    RBRACKET        reduce using rule 57 (term -> function_call .)
    RPAREN          reduce using rule 57 (term -> function_call .)
    COMMA           reduce using rule 57 (term -> function_call .)
    TO              reduce using rule 57 (term -> function_call .)


state 80

    (59) factor -> LPAREN . expression RPAREN
    (43) expression -> . expression PLUS term
    (44) expression -> . expression MINUS term
    (45) expression -> . expression EQ term
    (46) expression -> . expression NE term
    (47) expression -> . expression LT term
    (48) expression -> . expression LE term
    (49) expression -> . expression GT term
    (50) expression -> . expression GE term
    (51) expression -> . expression AND term
    (52) expression -> . expression OR term
    (53) expression -> . term
    (54) expression -> . STRING
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    STRING          shift and go to state 77
    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    expression                     shift and go to state 108
    term                           shift and go to state 76
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 81

    (62) factor -> INTEGER .

    TIMES           reduce using rule 62 (factor -> INTEGER .)
    DIVIDE          reduce using rule 62 (factor -> INTEGER .)
    PLUS            reduce using rule 62 (factor -> INTEGER .)
    MINUS           reduce using rule 62 (factor -> INTEGER .)
    EQ              reduce using rule 62 (factor -> INTEGER .)
    NE              reduce using rule 62 (factor -> INTEGER .)
    LT              reduce using rule 62 (factor -> INTEGER .)
    LE              reduce using rule 62 (factor -> INTEGER .)
    GT              reduce using rule 62 (factor -> INTEGER .)
    GE              reduce using rule 62 (factor -> INTEGER .)
    AND             reduce using rule 62 (factor -> INTEGER .)
    OR              reduce using rule 62 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 62 (factor -> INTEGER .)
    RBRACKET        reduce using rule 62 (factor -> INTEGER .)
    RPAREN          reduce using rule 62 (factor -> INTEGER .)
    COMMA           reduce using rule 62 (factor -> INTEGER .)
    TO              reduce using rule 62 (factor -> INTEGER .)


state 82

    (63) factor -> FLOATING_POINT .

    TIMES           reduce using rule 63 (factor -> FLOATING_POINT .)
    DIVIDE          reduce using rule 63 (factor -> FLOATING_POINT .)
    PLUS            reduce using rule 63 (factor -> FLOATING_POINT .)
    MINUS           reduce using rule 63 (factor -> FLOATING_POINT .)
    EQ              reduce using rule 63 (factor -> FLOATING_POINT .)
    NE              reduce using rule 63 (factor -> FLOATING_POINT .)
    LT              reduce using rule 63 (factor -> FLOATING_POINT .)
    LE              reduce using rule 63 (factor -> FLOATING_POINT .)
    GT              reduce using rule 63 (factor -> FLOATING_POINT .)
    GE              reduce using rule 63 (factor -> FLOATING_POINT .)
    AND             reduce using rule 63 (factor -> FLOATING_POINT .)
    OR              reduce using rule 63 (factor -> FLOATING_POINT .)
    SEMICOLON       reduce using rule 63 (factor -> FLOATING_POINT .)
    RBRACKET        reduce using rule 63 (factor -> FLOATING_POINT .)
    RPAREN          reduce using rule 63 (factor -> FLOATING_POINT .)
    COMMA           reduce using rule 63 (factor -> FLOATING_POINT .)
    TO              reduce using rule 63 (factor -> FLOATING_POINT .)


state 83

    (29) assignment -> ID LBRACKET expression . RBRACKET ASSIGN expression
    (43) expression -> expression . PLUS term
    (44) expression -> expression . MINUS term
    (45) expression -> expression . EQ term
    (46) expression -> expression . NE term
    (47) expression -> expression . LT term
    (48) expression -> expression . LE term
    (49) expression -> expression . GT term
    (50) expression -> expression . GE term
    (51) expression -> expression . AND term
    (52) expression -> expression . OR term

    RBRACKET        shift and go to state 109
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    EQ              shift and go to state 98
    NE              shift and go to state 99
    LT              shift and go to state 100
    LE              shift and go to state 101
    GT              shift and go to state 102
    GE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105


state 84

    (30) function_call -> ID LPAREN arg_list . RPAREN
    (31) arg_list -> arg_list . COMMA expression

    RPAREN          shift and go to state 110
    COMMA           shift and go to state 111


state 85

    (32) arg_list -> expression .
    (43) expression -> expression . PLUS term
    (44) expression -> expression . MINUS term
    (45) expression -> expression . EQ term
    (46) expression -> expression . NE term
    (47) expression -> expression . LT term
    (48) expression -> expression . LE term
    (49) expression -> expression . GT term
    (50) expression -> expression . GE term
    (51) expression -> expression . AND term
    (52) expression -> expression . OR term

    RPAREN          reduce using rule 32 (arg_list -> expression .)
    COMMA           reduce using rule 32 (arg_list -> expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    EQ              shift and go to state 98
    NE              shift and go to state 99
    LT              shift and go to state 100
    LE              shift and go to state 101
    GT              shift and go to state 102
    GE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105


state 86

    (34) write_statement -> WRITE LPAREN write_list . RPAREN
    (35) write_list -> write_list . COMMA expression

    RPAREN          shift and go to state 112
    COMMA           shift and go to state 113


state 87

    (36) write_list -> STRING .

    RPAREN          reduce using rule 36 (write_list -> STRING .)
    COMMA           reduce using rule 36 (write_list -> STRING .)


state 88

    (37) write_list -> ID . COMMA expression

    COMMA           shift and go to state 114


state 89

    (38) if_statement -> IF LPAREN expression . RPAREN THEN LBRACE statement_list RBRACE
    (39) if_statement -> IF LPAREN expression . RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (43) expression -> expression . PLUS term
    (44) expression -> expression . MINUS term
    (45) expression -> expression . EQ term
    (46) expression -> expression . NE term
    (47) expression -> expression . LT term
    (48) expression -> expression . LE term
    (49) expression -> expression . GT term
    (50) expression -> expression . GE term
    (51) expression -> expression . AND term
    (52) expression -> expression . OR term

    RPAREN          shift and go to state 115
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    EQ              shift and go to state 98
    NE              shift and go to state 99
    LT              shift and go to state 100
    LE              shift and go to state 101
    GT              shift and go to state 102
    GE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105


state 90

    (40) while_statement -> WHILE LPAREN expression . RPAREN DO LBRACE statement_list RBRACE
    (43) expression -> expression . PLUS term
    (44) expression -> expression . MINUS term
    (45) expression -> expression . EQ term
    (46) expression -> expression . NE term
    (47) expression -> expression . LT term
    (48) expression -> expression . LE term
    (49) expression -> expression . GT term
    (50) expression -> expression . GE term
    (51) expression -> expression . AND term
    (52) expression -> expression . OR term

    RPAREN          shift and go to state 116
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    EQ              shift and go to state 98
    NE              shift and go to state 99
    LT              shift and go to state 100
    LE              shift and go to state 101
    GT              shift and go to state 102
    GE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105


state 91

    (41) for_statement -> FOR ID LBRACKET . expression TO expression RBRACKET DO LBRACE statement_list RBRACE
    (43) expression -> . expression PLUS term
    (44) expression -> . expression MINUS term
    (45) expression -> . expression EQ term
    (46) expression -> . expression NE term
    (47) expression -> . expression LT term
    (48) expression -> . expression LE term
    (49) expression -> . expression GT term
    (50) expression -> . expression GE term
    (51) expression -> . expression AND term
    (52) expression -> . expression OR term
    (53) expression -> . term
    (54) expression -> . STRING
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    STRING          shift and go to state 77
    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    expression                     shift and go to state 117
    term                           shift and go to state 76
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 92

    (42) return_statement -> RETURN LPAREN expression . RPAREN SEMICOLON
    (43) expression -> expression . PLUS term
    (44) expression -> expression . MINUS term
    (45) expression -> expression . EQ term
    (46) expression -> expression . NE term
    (47) expression -> expression . LT term
    (48) expression -> expression . LE term
    (49) expression -> expression . GT term
    (50) expression -> expression . GE term
    (51) expression -> expression . AND term
    (52) expression -> expression . OR term

    RPAREN          shift and go to state 118
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    EQ              shift and go to state 98
    NE              shift and go to state 99
    LT              shift and go to state 100
    LE              shift and go to state 101
    GT              shift and go to state 102
    GE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105


state 93

    (14) function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE . statement_list return_statement RBRACE
    (18) statement_list -> . statement_list statement
    (19) statement_list -> . empty
    (64) empty -> .

    RETURN          reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)
    READ            reduce using rule 64 (empty -> .)
    WRITE           reduce using rule 64 (empty -> .)
    IF              reduce using rule 64 (empty -> .)
    WHILE           reduce using rule 64 (empty -> .)
    FOR             reduce using rule 64 (empty -> .)

    statement_list                 shift and go to state 119
    empty                          shift and go to state 35

state 94

    (15) param_list -> param_list COMMA type ID .

    RPAREN          reduce using rule 15 (param_list -> param_list COMMA type ID .)
    COMMA           reduce using rule 15 (param_list -> param_list COMMA type ID .)


state 95

    (61) factor -> ID LBRACKET . expression RBRACKET
    (43) expression -> . expression PLUS term
    (44) expression -> . expression MINUS term
    (45) expression -> . expression EQ term
    (46) expression -> . expression NE term
    (47) expression -> . expression LT term
    (48) expression -> . expression LE term
    (49) expression -> . expression GT term
    (50) expression -> . expression GE term
    (51) expression -> . expression AND term
    (52) expression -> . expression OR term
    (53) expression -> . term
    (54) expression -> . STRING
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    STRING          shift and go to state 77
    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    expression                     shift and go to state 120
    term                           shift and go to state 76
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 96

    (43) expression -> expression PLUS . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    term                           shift and go to state 121
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 97

    (44) expression -> expression MINUS . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    term                           shift and go to state 122
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 98

    (45) expression -> expression EQ . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    term                           shift and go to state 123
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 99

    (46) expression -> expression NE . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    term                           shift and go to state 124
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 100

    (47) expression -> expression LT . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    term                           shift and go to state 125
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 101

    (48) expression -> expression LE . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    term                           shift and go to state 126
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 102

    (49) expression -> expression GT . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    term                           shift and go to state 127
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 103

    (50) expression -> expression GE . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    term                           shift and go to state 128
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 104

    (51) expression -> expression AND . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    term                           shift and go to state 129
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 105

    (52) expression -> expression OR . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    term                           shift and go to state 130
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 106

    (55) term -> term TIMES . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    LPAREN          shift and go to state 80
    ID              shift and go to state 132
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    factor                         shift and go to state 131

state 107

    (56) term -> term DIVIDE . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    LPAREN          shift and go to state 80
    ID              shift and go to state 132
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    factor                         shift and go to state 133

state 108

    (59) factor -> LPAREN expression . RPAREN
    (43) expression -> expression . PLUS term
    (44) expression -> expression . MINUS term
    (45) expression -> expression . EQ term
    (46) expression -> expression . NE term
    (47) expression -> expression . LT term
    (48) expression -> expression . LE term
    (49) expression -> expression . GT term
    (50) expression -> expression . GE term
    (51) expression -> expression . AND term
    (52) expression -> expression . OR term

    RPAREN          shift and go to state 134
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    EQ              shift and go to state 98
    NE              shift and go to state 99
    LT              shift and go to state 100
    LE              shift and go to state 101
    GT              shift and go to state 102
    GE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105


state 109

    (29) assignment -> ID LBRACKET expression RBRACKET . ASSIGN expression

    ASSIGN          shift and go to state 135


state 110

    (30) function_call -> ID LPAREN arg_list RPAREN .

    SEMICOLON       reduce using rule 30 (function_call -> ID LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 30 (function_call -> ID LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 30 (function_call -> ID LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 30 (function_call -> ID LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 30 (function_call -> ID LPAREN arg_list RPAREN .)
    EQ              reduce using rule 30 (function_call -> ID LPAREN arg_list RPAREN .)
    NE              reduce using rule 30 (function_call -> ID LPAREN arg_list RPAREN .)
    LT              reduce using rule 30 (function_call -> ID LPAREN arg_list RPAREN .)
    LE              reduce using rule 30 (function_call -> ID LPAREN arg_list RPAREN .)
    GT              reduce using rule 30 (function_call -> ID LPAREN arg_list RPAREN .)
    GE              reduce using rule 30 (function_call -> ID LPAREN arg_list RPAREN .)
    AND             reduce using rule 30 (function_call -> ID LPAREN arg_list RPAREN .)
    OR              reduce using rule 30 (function_call -> ID LPAREN arg_list RPAREN .)
    RBRACKET        reduce using rule 30 (function_call -> ID LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 30 (function_call -> ID LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 30 (function_call -> ID LPAREN arg_list RPAREN .)
    TO              reduce using rule 30 (function_call -> ID LPAREN arg_list RPAREN .)


state 111

    (31) arg_list -> arg_list COMMA . expression
    (43) expression -> . expression PLUS term
    (44) expression -> . expression MINUS term
    (45) expression -> . expression EQ term
    (46) expression -> . expression NE term
    (47) expression -> . expression LT term
    (48) expression -> . expression LE term
    (49) expression -> . expression GT term
    (50) expression -> . expression GE term
    (51) expression -> . expression AND term
    (52) expression -> . expression OR term
    (53) expression -> . term
    (54) expression -> . STRING
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    STRING          shift and go to state 77
    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    expression                     shift and go to state 136
    term                           shift and go to state 76
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 112

    (34) write_statement -> WRITE LPAREN write_list RPAREN .

    SEMICOLON       reduce using rule 34 (write_statement -> WRITE LPAREN write_list RPAREN .)


state 113

    (35) write_list -> write_list COMMA . expression
    (43) expression -> . expression PLUS term
    (44) expression -> . expression MINUS term
    (45) expression -> . expression EQ term
    (46) expression -> . expression NE term
    (47) expression -> . expression LT term
    (48) expression -> . expression LE term
    (49) expression -> . expression GT term
    (50) expression -> . expression GE term
    (51) expression -> . expression AND term
    (52) expression -> . expression OR term
    (53) expression -> . term
    (54) expression -> . STRING
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    STRING          shift and go to state 77
    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    expression                     shift and go to state 137
    term                           shift and go to state 76
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 114

    (37) write_list -> ID COMMA . expression
    (43) expression -> . expression PLUS term
    (44) expression -> . expression MINUS term
    (45) expression -> . expression EQ term
    (46) expression -> . expression NE term
    (47) expression -> . expression LT term
    (48) expression -> . expression LE term
    (49) expression -> . expression GT term
    (50) expression -> . expression GE term
    (51) expression -> . expression AND term
    (52) expression -> . expression OR term
    (53) expression -> . term
    (54) expression -> . STRING
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    STRING          shift and go to state 77
    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    expression                     shift and go to state 138
    term                           shift and go to state 76
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 115

    (38) if_statement -> IF LPAREN expression RPAREN . THEN LBRACE statement_list RBRACE
    (39) if_statement -> IF LPAREN expression RPAREN . THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    THEN            shift and go to state 139


state 116

    (40) while_statement -> WHILE LPAREN expression RPAREN . DO LBRACE statement_list RBRACE

    DO              shift and go to state 140


state 117

    (41) for_statement -> FOR ID LBRACKET expression . TO expression RBRACKET DO LBRACE statement_list RBRACE
    (43) expression -> expression . PLUS term
    (44) expression -> expression . MINUS term
    (45) expression -> expression . EQ term
    (46) expression -> expression . NE term
    (47) expression -> expression . LT term
    (48) expression -> expression . LE term
    (49) expression -> expression . GT term
    (50) expression -> expression . GE term
    (51) expression -> expression . AND term
    (52) expression -> expression . OR term

    TO              shift and go to state 141
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    EQ              shift and go to state 98
    NE              shift and go to state 99
    LT              shift and go to state 100
    LE              shift and go to state 101
    GT              shift and go to state 102
    GE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105


state 118

    (42) return_statement -> RETURN LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 142


state 119

    (14) function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list . return_statement RBRACE
    (18) statement_list -> statement_list . statement
    (42) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (20) statement -> . assignment SEMICOLON
    (21) statement -> . function_call SEMICOLON
    (22) statement -> . read_statement SEMICOLON
    (23) statement -> . write_statement SEMICOLON
    (24) statement -> . if_statement
    (25) statement -> . while_statement
    (26) statement -> . for_statement
    (27) statement -> . return_statement SEMICOLON
    (28) assignment -> . ID ASSIGN expression
    (29) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (33) read_statement -> . READ id_list
    (34) write_statement -> . WRITE LPAREN write_list RPAREN
    (38) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (39) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (40) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (41) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RETURN          shift and go to state 54
    ID              shift and go to state 48
    READ            shift and go to state 49
    WRITE           shift and go to state 50
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53

    return_statement               shift and go to state 143
    statement                      shift and go to state 39
    assignment                     shift and go to state 40
    function_call                  shift and go to state 41
    read_statement                 shift and go to state 42
    write_statement                shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    for_statement                  shift and go to state 46

state 120

    (61) factor -> ID LBRACKET expression . RBRACKET
    (43) expression -> expression . PLUS term
    (44) expression -> expression . MINUS term
    (45) expression -> expression . EQ term
    (46) expression -> expression . NE term
    (47) expression -> expression . LT term
    (48) expression -> expression . LE term
    (49) expression -> expression . GT term
    (50) expression -> expression . GE term
    (51) expression -> expression . AND term
    (52) expression -> expression . OR term

    RBRACKET        shift and go to state 144
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    EQ              shift and go to state 98
    NE              shift and go to state 99
    LT              shift and go to state 100
    LE              shift and go to state 101
    GT              shift and go to state 102
    GE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105


state 121

    (43) expression -> expression PLUS term .
    (55) term -> term . TIMES factor
    (56) term -> term . DIVIDE factor

    PLUS            reduce using rule 43 (expression -> expression PLUS term .)
    MINUS           reduce using rule 43 (expression -> expression PLUS term .)
    EQ              reduce using rule 43 (expression -> expression PLUS term .)
    NE              reduce using rule 43 (expression -> expression PLUS term .)
    LT              reduce using rule 43 (expression -> expression PLUS term .)
    LE              reduce using rule 43 (expression -> expression PLUS term .)
    GT              reduce using rule 43 (expression -> expression PLUS term .)
    GE              reduce using rule 43 (expression -> expression PLUS term .)
    AND             reduce using rule 43 (expression -> expression PLUS term .)
    OR              reduce using rule 43 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 43 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 43 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 43 (expression -> expression PLUS term .)
    COMMA           reduce using rule 43 (expression -> expression PLUS term .)
    TO              reduce using rule 43 (expression -> expression PLUS term .)
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 122

    (44) expression -> expression MINUS term .
    (55) term -> term . TIMES factor
    (56) term -> term . DIVIDE factor

    PLUS            reduce using rule 44 (expression -> expression MINUS term .)
    MINUS           reduce using rule 44 (expression -> expression MINUS term .)
    EQ              reduce using rule 44 (expression -> expression MINUS term .)
    NE              reduce using rule 44 (expression -> expression MINUS term .)
    LT              reduce using rule 44 (expression -> expression MINUS term .)
    LE              reduce using rule 44 (expression -> expression MINUS term .)
    GT              reduce using rule 44 (expression -> expression MINUS term .)
    GE              reduce using rule 44 (expression -> expression MINUS term .)
    AND             reduce using rule 44 (expression -> expression MINUS term .)
    OR              reduce using rule 44 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 44 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 44 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 44 (expression -> expression MINUS term .)
    COMMA           reduce using rule 44 (expression -> expression MINUS term .)
    TO              reduce using rule 44 (expression -> expression MINUS term .)
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 123

    (45) expression -> expression EQ term .
    (55) term -> term . TIMES factor
    (56) term -> term . DIVIDE factor

    PLUS            reduce using rule 45 (expression -> expression EQ term .)
    MINUS           reduce using rule 45 (expression -> expression EQ term .)
    EQ              reduce using rule 45 (expression -> expression EQ term .)
    NE              reduce using rule 45 (expression -> expression EQ term .)
    LT              reduce using rule 45 (expression -> expression EQ term .)
    LE              reduce using rule 45 (expression -> expression EQ term .)
    GT              reduce using rule 45 (expression -> expression EQ term .)
    GE              reduce using rule 45 (expression -> expression EQ term .)
    AND             reduce using rule 45 (expression -> expression EQ term .)
    OR              reduce using rule 45 (expression -> expression EQ term .)
    SEMICOLON       reduce using rule 45 (expression -> expression EQ term .)
    RBRACKET        reduce using rule 45 (expression -> expression EQ term .)
    RPAREN          reduce using rule 45 (expression -> expression EQ term .)
    COMMA           reduce using rule 45 (expression -> expression EQ term .)
    TO              reduce using rule 45 (expression -> expression EQ term .)
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 124

    (46) expression -> expression NE term .
    (55) term -> term . TIMES factor
    (56) term -> term . DIVIDE factor

    PLUS            reduce using rule 46 (expression -> expression NE term .)
    MINUS           reduce using rule 46 (expression -> expression NE term .)
    EQ              reduce using rule 46 (expression -> expression NE term .)
    NE              reduce using rule 46 (expression -> expression NE term .)
    LT              reduce using rule 46 (expression -> expression NE term .)
    LE              reduce using rule 46 (expression -> expression NE term .)
    GT              reduce using rule 46 (expression -> expression NE term .)
    GE              reduce using rule 46 (expression -> expression NE term .)
    AND             reduce using rule 46 (expression -> expression NE term .)
    OR              reduce using rule 46 (expression -> expression NE term .)
    SEMICOLON       reduce using rule 46 (expression -> expression NE term .)
    RBRACKET        reduce using rule 46 (expression -> expression NE term .)
    RPAREN          reduce using rule 46 (expression -> expression NE term .)
    COMMA           reduce using rule 46 (expression -> expression NE term .)
    TO              reduce using rule 46 (expression -> expression NE term .)
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 125

    (47) expression -> expression LT term .
    (55) term -> term . TIMES factor
    (56) term -> term . DIVIDE factor

    PLUS            reduce using rule 47 (expression -> expression LT term .)
    MINUS           reduce using rule 47 (expression -> expression LT term .)
    EQ              reduce using rule 47 (expression -> expression LT term .)
    NE              reduce using rule 47 (expression -> expression LT term .)
    LT              reduce using rule 47 (expression -> expression LT term .)
    LE              reduce using rule 47 (expression -> expression LT term .)
    GT              reduce using rule 47 (expression -> expression LT term .)
    GE              reduce using rule 47 (expression -> expression LT term .)
    AND             reduce using rule 47 (expression -> expression LT term .)
    OR              reduce using rule 47 (expression -> expression LT term .)
    SEMICOLON       reduce using rule 47 (expression -> expression LT term .)
    RBRACKET        reduce using rule 47 (expression -> expression LT term .)
    RPAREN          reduce using rule 47 (expression -> expression LT term .)
    COMMA           reduce using rule 47 (expression -> expression LT term .)
    TO              reduce using rule 47 (expression -> expression LT term .)
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 126

    (48) expression -> expression LE term .
    (55) term -> term . TIMES factor
    (56) term -> term . DIVIDE factor

    PLUS            reduce using rule 48 (expression -> expression LE term .)
    MINUS           reduce using rule 48 (expression -> expression LE term .)
    EQ              reduce using rule 48 (expression -> expression LE term .)
    NE              reduce using rule 48 (expression -> expression LE term .)
    LT              reduce using rule 48 (expression -> expression LE term .)
    LE              reduce using rule 48 (expression -> expression LE term .)
    GT              reduce using rule 48 (expression -> expression LE term .)
    GE              reduce using rule 48 (expression -> expression LE term .)
    AND             reduce using rule 48 (expression -> expression LE term .)
    OR              reduce using rule 48 (expression -> expression LE term .)
    SEMICOLON       reduce using rule 48 (expression -> expression LE term .)
    RBRACKET        reduce using rule 48 (expression -> expression LE term .)
    RPAREN          reduce using rule 48 (expression -> expression LE term .)
    COMMA           reduce using rule 48 (expression -> expression LE term .)
    TO              reduce using rule 48 (expression -> expression LE term .)
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 127

    (49) expression -> expression GT term .
    (55) term -> term . TIMES factor
    (56) term -> term . DIVIDE factor

    PLUS            reduce using rule 49 (expression -> expression GT term .)
    MINUS           reduce using rule 49 (expression -> expression GT term .)
    EQ              reduce using rule 49 (expression -> expression GT term .)
    NE              reduce using rule 49 (expression -> expression GT term .)
    LT              reduce using rule 49 (expression -> expression GT term .)
    LE              reduce using rule 49 (expression -> expression GT term .)
    GT              reduce using rule 49 (expression -> expression GT term .)
    GE              reduce using rule 49 (expression -> expression GT term .)
    AND             reduce using rule 49 (expression -> expression GT term .)
    OR              reduce using rule 49 (expression -> expression GT term .)
    SEMICOLON       reduce using rule 49 (expression -> expression GT term .)
    RBRACKET        reduce using rule 49 (expression -> expression GT term .)
    RPAREN          reduce using rule 49 (expression -> expression GT term .)
    COMMA           reduce using rule 49 (expression -> expression GT term .)
    TO              reduce using rule 49 (expression -> expression GT term .)
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 128

    (50) expression -> expression GE term .
    (55) term -> term . TIMES factor
    (56) term -> term . DIVIDE factor

    PLUS            reduce using rule 50 (expression -> expression GE term .)
    MINUS           reduce using rule 50 (expression -> expression GE term .)
    EQ              reduce using rule 50 (expression -> expression GE term .)
    NE              reduce using rule 50 (expression -> expression GE term .)
    LT              reduce using rule 50 (expression -> expression GE term .)
    LE              reduce using rule 50 (expression -> expression GE term .)
    GT              reduce using rule 50 (expression -> expression GE term .)
    GE              reduce using rule 50 (expression -> expression GE term .)
    AND             reduce using rule 50 (expression -> expression GE term .)
    OR              reduce using rule 50 (expression -> expression GE term .)
    SEMICOLON       reduce using rule 50 (expression -> expression GE term .)
    RBRACKET        reduce using rule 50 (expression -> expression GE term .)
    RPAREN          reduce using rule 50 (expression -> expression GE term .)
    COMMA           reduce using rule 50 (expression -> expression GE term .)
    TO              reduce using rule 50 (expression -> expression GE term .)
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 129

    (51) expression -> expression AND term .
    (55) term -> term . TIMES factor
    (56) term -> term . DIVIDE factor

    PLUS            reduce using rule 51 (expression -> expression AND term .)
    MINUS           reduce using rule 51 (expression -> expression AND term .)
    EQ              reduce using rule 51 (expression -> expression AND term .)
    NE              reduce using rule 51 (expression -> expression AND term .)
    LT              reduce using rule 51 (expression -> expression AND term .)
    LE              reduce using rule 51 (expression -> expression AND term .)
    GT              reduce using rule 51 (expression -> expression AND term .)
    GE              reduce using rule 51 (expression -> expression AND term .)
    AND             reduce using rule 51 (expression -> expression AND term .)
    OR              reduce using rule 51 (expression -> expression AND term .)
    SEMICOLON       reduce using rule 51 (expression -> expression AND term .)
    RBRACKET        reduce using rule 51 (expression -> expression AND term .)
    RPAREN          reduce using rule 51 (expression -> expression AND term .)
    COMMA           reduce using rule 51 (expression -> expression AND term .)
    TO              reduce using rule 51 (expression -> expression AND term .)
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 130

    (52) expression -> expression OR term .
    (55) term -> term . TIMES factor
    (56) term -> term . DIVIDE factor

    PLUS            reduce using rule 52 (expression -> expression OR term .)
    MINUS           reduce using rule 52 (expression -> expression OR term .)
    EQ              reduce using rule 52 (expression -> expression OR term .)
    NE              reduce using rule 52 (expression -> expression OR term .)
    LT              reduce using rule 52 (expression -> expression OR term .)
    LE              reduce using rule 52 (expression -> expression OR term .)
    GT              reduce using rule 52 (expression -> expression OR term .)
    GE              reduce using rule 52 (expression -> expression OR term .)
    AND             reduce using rule 52 (expression -> expression OR term .)
    OR              reduce using rule 52 (expression -> expression OR term .)
    SEMICOLON       reduce using rule 52 (expression -> expression OR term .)
    RBRACKET        reduce using rule 52 (expression -> expression OR term .)
    RPAREN          reduce using rule 52 (expression -> expression OR term .)
    COMMA           reduce using rule 52 (expression -> expression OR term .)
    TO              reduce using rule 52 (expression -> expression OR term .)
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 131

    (55) term -> term TIMES factor .

    TIMES           reduce using rule 55 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 55 (term -> term TIMES factor .)
    PLUS            reduce using rule 55 (term -> term TIMES factor .)
    MINUS           reduce using rule 55 (term -> term TIMES factor .)
    EQ              reduce using rule 55 (term -> term TIMES factor .)
    NE              reduce using rule 55 (term -> term TIMES factor .)
    LT              reduce using rule 55 (term -> term TIMES factor .)
    LE              reduce using rule 55 (term -> term TIMES factor .)
    GT              reduce using rule 55 (term -> term TIMES factor .)
    GE              reduce using rule 55 (term -> term TIMES factor .)
    AND             reduce using rule 55 (term -> term TIMES factor .)
    OR              reduce using rule 55 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 55 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 55 (term -> term TIMES factor .)
    RPAREN          reduce using rule 55 (term -> term TIMES factor .)
    COMMA           reduce using rule 55 (term -> term TIMES factor .)
    TO              reduce using rule 55 (term -> term TIMES factor .)


state 132

    (60) factor -> ID .
    (61) factor -> ID . LBRACKET expression RBRACKET

    TIMES           reduce using rule 60 (factor -> ID .)
    DIVIDE          reduce using rule 60 (factor -> ID .)
    PLUS            reduce using rule 60 (factor -> ID .)
    MINUS           reduce using rule 60 (factor -> ID .)
    EQ              reduce using rule 60 (factor -> ID .)
    NE              reduce using rule 60 (factor -> ID .)
    LT              reduce using rule 60 (factor -> ID .)
    LE              reduce using rule 60 (factor -> ID .)
    GT              reduce using rule 60 (factor -> ID .)
    GE              reduce using rule 60 (factor -> ID .)
    AND             reduce using rule 60 (factor -> ID .)
    OR              reduce using rule 60 (factor -> ID .)
    SEMICOLON       reduce using rule 60 (factor -> ID .)
    RBRACKET        reduce using rule 60 (factor -> ID .)
    RPAREN          reduce using rule 60 (factor -> ID .)
    COMMA           reduce using rule 60 (factor -> ID .)
    TO              reduce using rule 60 (factor -> ID .)
    LBRACKET        shift and go to state 95


state 133

    (56) term -> term DIVIDE factor .

    TIMES           reduce using rule 56 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 56 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 56 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 56 (term -> term DIVIDE factor .)
    EQ              reduce using rule 56 (term -> term DIVIDE factor .)
    NE              reduce using rule 56 (term -> term DIVIDE factor .)
    LT              reduce using rule 56 (term -> term DIVIDE factor .)
    LE              reduce using rule 56 (term -> term DIVIDE factor .)
    GT              reduce using rule 56 (term -> term DIVIDE factor .)
    GE              reduce using rule 56 (term -> term DIVIDE factor .)
    AND             reduce using rule 56 (term -> term DIVIDE factor .)
    OR              reduce using rule 56 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 56 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 56 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 56 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 56 (term -> term DIVIDE factor .)
    TO              reduce using rule 56 (term -> term DIVIDE factor .)


state 134

    (59) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 59 (factor -> LPAREN expression RPAREN .)


state 135

    (29) assignment -> ID LBRACKET expression RBRACKET ASSIGN . expression
    (43) expression -> . expression PLUS term
    (44) expression -> . expression MINUS term
    (45) expression -> . expression EQ term
    (46) expression -> . expression NE term
    (47) expression -> . expression LT term
    (48) expression -> . expression LE term
    (49) expression -> . expression GT term
    (50) expression -> . expression GE term
    (51) expression -> . expression AND term
    (52) expression -> . expression OR term
    (53) expression -> . term
    (54) expression -> . STRING
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    STRING          shift and go to state 77
    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    expression                     shift and go to state 145
    term                           shift and go to state 76
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 136

    (31) arg_list -> arg_list COMMA expression .
    (43) expression -> expression . PLUS term
    (44) expression -> expression . MINUS term
    (45) expression -> expression . EQ term
    (46) expression -> expression . NE term
    (47) expression -> expression . LT term
    (48) expression -> expression . LE term
    (49) expression -> expression . GT term
    (50) expression -> expression . GE term
    (51) expression -> expression . AND term
    (52) expression -> expression . OR term

    RPAREN          reduce using rule 31 (arg_list -> arg_list COMMA expression .)
    COMMA           reduce using rule 31 (arg_list -> arg_list COMMA expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    EQ              shift and go to state 98
    NE              shift and go to state 99
    LT              shift and go to state 100
    LE              shift and go to state 101
    GT              shift and go to state 102
    GE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105


state 137

    (35) write_list -> write_list COMMA expression .
    (43) expression -> expression . PLUS term
    (44) expression -> expression . MINUS term
    (45) expression -> expression . EQ term
    (46) expression -> expression . NE term
    (47) expression -> expression . LT term
    (48) expression -> expression . LE term
    (49) expression -> expression . GT term
    (50) expression -> expression . GE term
    (51) expression -> expression . AND term
    (52) expression -> expression . OR term

    RPAREN          reduce using rule 35 (write_list -> write_list COMMA expression .)
    COMMA           reduce using rule 35 (write_list -> write_list COMMA expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    EQ              shift and go to state 98
    NE              shift and go to state 99
    LT              shift and go to state 100
    LE              shift and go to state 101
    GT              shift and go to state 102
    GE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105


state 138

    (37) write_list -> ID COMMA expression .
    (43) expression -> expression . PLUS term
    (44) expression -> expression . MINUS term
    (45) expression -> expression . EQ term
    (46) expression -> expression . NE term
    (47) expression -> expression . LT term
    (48) expression -> expression . LE term
    (49) expression -> expression . GT term
    (50) expression -> expression . GE term
    (51) expression -> expression . AND term
    (52) expression -> expression . OR term

    RPAREN          reduce using rule 37 (write_list -> ID COMMA expression .)
    COMMA           reduce using rule 37 (write_list -> ID COMMA expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    EQ              shift and go to state 98
    NE              shift and go to state 99
    LT              shift and go to state 100
    LE              shift and go to state 101
    GT              shift and go to state 102
    GE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105


state 139

    (38) if_statement -> IF LPAREN expression RPAREN THEN . LBRACE statement_list RBRACE
    (39) if_statement -> IF LPAREN expression RPAREN THEN . LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    LBRACE          shift and go to state 146


state 140

    (40) while_statement -> WHILE LPAREN expression RPAREN DO . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 147


state 141

    (41) for_statement -> FOR ID LBRACKET expression TO . expression RBRACKET DO LBRACE statement_list RBRACE
    (43) expression -> . expression PLUS term
    (44) expression -> . expression MINUS term
    (45) expression -> . expression EQ term
    (46) expression -> . expression NE term
    (47) expression -> . expression LT term
    (48) expression -> . expression LE term
    (49) expression -> . expression GT term
    (50) expression -> . expression GE term
    (51) expression -> . expression AND term
    (52) expression -> . expression OR term
    (53) expression -> . term
    (54) expression -> . STRING
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . function_call
    (58) term -> . factor
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . ID
    (61) factor -> . ID LBRACKET expression RBRACKET
    (62) factor -> . INTEGER
    (63) factor -> . FLOATING_POINT

    STRING          shift and go to state 77
    ID              shift and go to state 74
    LPAREN          shift and go to state 80
    INTEGER         shift and go to state 81
    FLOATING_POINT  shift and go to state 82

    expression                     shift and go to state 148
    term                           shift and go to state 76
    factor                         shift and go to state 78
    function_call                  shift and go to state 79

state 142

    (42) return_statement -> RETURN LPAREN expression RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 42 (return_statement -> RETURN LPAREN expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 42 (return_statement -> RETURN LPAREN expression RPAREN SEMICOLON .)


state 143

    (14) function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list return_statement . RBRACE
    (27) statement -> return_statement . SEMICOLON

    RBRACE          shift and go to state 149
    SEMICOLON       shift and go to state 62


state 144

    (61) factor -> ID LBRACKET expression RBRACKET .

    TIMES           reduce using rule 61 (factor -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 61 (factor -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 61 (factor -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 61 (factor -> ID LBRACKET expression RBRACKET .)
    EQ              reduce using rule 61 (factor -> ID LBRACKET expression RBRACKET .)
    NE              reduce using rule 61 (factor -> ID LBRACKET expression RBRACKET .)
    LT              reduce using rule 61 (factor -> ID LBRACKET expression RBRACKET .)
    LE              reduce using rule 61 (factor -> ID LBRACKET expression RBRACKET .)
    GT              reduce using rule 61 (factor -> ID LBRACKET expression RBRACKET .)
    GE              reduce using rule 61 (factor -> ID LBRACKET expression RBRACKET .)
    AND             reduce using rule 61 (factor -> ID LBRACKET expression RBRACKET .)
    OR              reduce using rule 61 (factor -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 61 (factor -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 61 (factor -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 61 (factor -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 61 (factor -> ID LBRACKET expression RBRACKET .)
    TO              reduce using rule 61 (factor -> ID LBRACKET expression RBRACKET .)


state 145

    (29) assignment -> ID LBRACKET expression RBRACKET ASSIGN expression .
    (43) expression -> expression . PLUS term
    (44) expression -> expression . MINUS term
    (45) expression -> expression . EQ term
    (46) expression -> expression . NE term
    (47) expression -> expression . LT term
    (48) expression -> expression . LE term
    (49) expression -> expression . GT term
    (50) expression -> expression . GE term
    (51) expression -> expression . AND term
    (52) expression -> expression . OR term

    SEMICOLON       reduce using rule 29 (assignment -> ID LBRACKET expression RBRACKET ASSIGN expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    EQ              shift and go to state 98
    NE              shift and go to state 99
    LT              shift and go to state 100
    LE              shift and go to state 101
    GT              shift and go to state 102
    GE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105


state 146

    (38) if_statement -> IF LPAREN expression RPAREN THEN LBRACE . statement_list RBRACE
    (39) if_statement -> IF LPAREN expression RPAREN THEN LBRACE . statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (18) statement_list -> . statement_list statement
    (19) statement_list -> . empty
    (64) empty -> .

    RBRACE          reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)
    READ            reduce using rule 64 (empty -> .)
    WRITE           reduce using rule 64 (empty -> .)
    IF              reduce using rule 64 (empty -> .)
    WHILE           reduce using rule 64 (empty -> .)
    FOR             reduce using rule 64 (empty -> .)
    RETURN          reduce using rule 64 (empty -> .)

    statement_list                 shift and go to state 150
    empty                          shift and go to state 35

state 147

    (40) while_statement -> WHILE LPAREN expression RPAREN DO LBRACE . statement_list RBRACE
    (18) statement_list -> . statement_list statement
    (19) statement_list -> . empty
    (64) empty -> .

    RBRACE          reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)
    READ            reduce using rule 64 (empty -> .)
    WRITE           reduce using rule 64 (empty -> .)
    IF              reduce using rule 64 (empty -> .)
    WHILE           reduce using rule 64 (empty -> .)
    FOR             reduce using rule 64 (empty -> .)
    RETURN          reduce using rule 64 (empty -> .)

    statement_list                 shift and go to state 151
    empty                          shift and go to state 35

state 148

    (41) for_statement -> FOR ID LBRACKET expression TO expression . RBRACKET DO LBRACE statement_list RBRACE
    (43) expression -> expression . PLUS term
    (44) expression -> expression . MINUS term
    (45) expression -> expression . EQ term
    (46) expression -> expression . NE term
    (47) expression -> expression . LT term
    (48) expression -> expression . LE term
    (49) expression -> expression . GT term
    (50) expression -> expression . GE term
    (51) expression -> expression . AND term
    (52) expression -> expression . OR term

    RBRACKET        shift and go to state 152
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    EQ              shift and go to state 98
    NE              shift and go to state 99
    LT              shift and go to state 100
    LE              shift and go to state 101
    GT              shift and go to state 102
    GE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105


state 149

    (14) function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list return_statement RBRACE .

    MAIN            reduce using rule 14 (function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list return_statement RBRACE .)
    FUNCTION        reduce using rule 14 (function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list return_statement RBRACE .)


state 150

    (38) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list . RBRACE
    (39) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list . RBRACE ELSE LBRACE statement_list RBRACE
    (18) statement_list -> statement_list . statement
    (20) statement -> . assignment SEMICOLON
    (21) statement -> . function_call SEMICOLON
    (22) statement -> . read_statement SEMICOLON
    (23) statement -> . write_statement SEMICOLON
    (24) statement -> . if_statement
    (25) statement -> . while_statement
    (26) statement -> . for_statement
    (27) statement -> . return_statement SEMICOLON
    (28) assignment -> . ID ASSIGN expression
    (29) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (33) read_statement -> . READ id_list
    (34) write_statement -> . WRITE LPAREN write_list RPAREN
    (38) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (39) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (40) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (41) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE
    (42) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON

    RBRACE          shift and go to state 153
    ID              shift and go to state 48
    READ            shift and go to state 49
    WRITE           shift and go to state 50
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    RETURN          shift and go to state 54

    statement                      shift and go to state 39
    assignment                     shift and go to state 40
    function_call                  shift and go to state 41
    read_statement                 shift and go to state 42
    write_statement                shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    for_statement                  shift and go to state 46
    return_statement               shift and go to state 47

state 151

    (40) while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list . RBRACE
    (18) statement_list -> statement_list . statement
    (20) statement -> . assignment SEMICOLON
    (21) statement -> . function_call SEMICOLON
    (22) statement -> . read_statement SEMICOLON
    (23) statement -> . write_statement SEMICOLON
    (24) statement -> . if_statement
    (25) statement -> . while_statement
    (26) statement -> . for_statement
    (27) statement -> . return_statement SEMICOLON
    (28) assignment -> . ID ASSIGN expression
    (29) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (33) read_statement -> . READ id_list
    (34) write_statement -> . WRITE LPAREN write_list RPAREN
    (38) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (39) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (40) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (41) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE
    (42) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON

    RBRACE          shift and go to state 154
    ID              shift and go to state 48
    READ            shift and go to state 49
    WRITE           shift and go to state 50
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    RETURN          shift and go to state 54

    statement                      shift and go to state 39
    assignment                     shift and go to state 40
    function_call                  shift and go to state 41
    read_statement                 shift and go to state 42
    write_statement                shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    for_statement                  shift and go to state 46
    return_statement               shift and go to state 47

state 152

    (41) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET . DO LBRACE statement_list RBRACE

    DO              shift and go to state 155


state 153

    (38) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .
    (39) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE . ELSE LBRACE statement_list RBRACE

    RBRACE          reduce using rule 38 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    ID              reduce using rule 38 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    READ            reduce using rule 38 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 38 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    IF              reduce using rule 38 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 38 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    FOR             reduce using rule 38 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 38 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    ELSE            shift and go to state 156


state 154

    (40) while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 40 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    ID              reduce using rule 40 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    READ            reduce using rule 40 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 40 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    IF              reduce using rule 40 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 40 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    FOR             reduce using rule 40 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 40 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)


state 155

    (41) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 157


state 156

    (39) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 158


state 157

    (41) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE . statement_list RBRACE
    (18) statement_list -> . statement_list statement
    (19) statement_list -> . empty
    (64) empty -> .

    RBRACE          reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)
    READ            reduce using rule 64 (empty -> .)
    WRITE           reduce using rule 64 (empty -> .)
    IF              reduce using rule 64 (empty -> .)
    WHILE           reduce using rule 64 (empty -> .)
    FOR             reduce using rule 64 (empty -> .)
    RETURN          reduce using rule 64 (empty -> .)

    statement_list                 shift and go to state 159
    empty                          shift and go to state 35

state 158

    (39) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE . statement_list RBRACE
    (18) statement_list -> . statement_list statement
    (19) statement_list -> . empty
    (64) empty -> .

    RBRACE          reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)
    READ            reduce using rule 64 (empty -> .)
    WRITE           reduce using rule 64 (empty -> .)
    IF              reduce using rule 64 (empty -> .)
    WHILE           reduce using rule 64 (empty -> .)
    FOR             reduce using rule 64 (empty -> .)
    RETURN          reduce using rule 64 (empty -> .)

    statement_list                 shift and go to state 160
    empty                          shift and go to state 35

state 159

    (41) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list . RBRACE
    (18) statement_list -> statement_list . statement
    (20) statement -> . assignment SEMICOLON
    (21) statement -> . function_call SEMICOLON
    (22) statement -> . read_statement SEMICOLON
    (23) statement -> . write_statement SEMICOLON
    (24) statement -> . if_statement
    (25) statement -> . while_statement
    (26) statement -> . for_statement
    (27) statement -> . return_statement SEMICOLON
    (28) assignment -> . ID ASSIGN expression
    (29) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (33) read_statement -> . READ id_list
    (34) write_statement -> . WRITE LPAREN write_list RPAREN
    (38) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (39) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (40) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (41) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE
    (42) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON

    RBRACE          shift and go to state 161
    ID              shift and go to state 48
    READ            shift and go to state 49
    WRITE           shift and go to state 50
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    RETURN          shift and go to state 54

    statement                      shift and go to state 39
    assignment                     shift and go to state 40
    function_call                  shift and go to state 41
    read_statement                 shift and go to state 42
    write_statement                shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    for_statement                  shift and go to state 46
    return_statement               shift and go to state 47

state 160

    (39) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list . RBRACE
    (18) statement_list -> statement_list . statement
    (20) statement -> . assignment SEMICOLON
    (21) statement -> . function_call SEMICOLON
    (22) statement -> . read_statement SEMICOLON
    (23) statement -> . write_statement SEMICOLON
    (24) statement -> . if_statement
    (25) statement -> . while_statement
    (26) statement -> . for_statement
    (27) statement -> . return_statement SEMICOLON
    (28) assignment -> . ID ASSIGN expression
    (29) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (30) function_call -> . ID LPAREN arg_list RPAREN
    (33) read_statement -> . READ id_list
    (34) write_statement -> . WRITE LPAREN write_list RPAREN
    (38) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (39) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (40) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (41) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE
    (42) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON

    RBRACE          shift and go to state 162
    ID              shift and go to state 48
    READ            shift and go to state 49
    WRITE           shift and go to state 50
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    RETURN          shift and go to state 54

    statement                      shift and go to state 39
    assignment                     shift and go to state 40
    function_call                  shift and go to state 41
    read_statement                 shift and go to state 42
    write_statement                shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    for_statement                  shift and go to state 46
    return_statement               shift and go to state 47

state 161

    (41) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 41 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    ID              reduce using rule 41 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    READ            reduce using rule 41 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 41 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    IF              reduce using rule 41 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 41 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    FOR             reduce using rule 41 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 41 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)


state 162

    (39) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 39 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    ID              reduce using rule 39 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    READ            reduce using rule 39 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 39 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    IF              reduce using rule 39 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 39 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    FOR             reduce using rule 39 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 39 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 8 resolved as shift
