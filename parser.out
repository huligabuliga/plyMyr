Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARC
    CIRCLE
    COLOR
    LINE
    NOT
    PENDOWN
    PENUP
    POINT
    THICKNESS

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON vars function_list main_function
Rule 2     program -> PROGRAM ID SEMICOLON vars empty main_function
Rule 3     vars -> VARS var_list
Rule 4     var_list -> var_list type id_list SEMICOLON
Rule 5     var_list -> type id_list SEMICOLON
Rule 6     type -> INT
Rule 7     type -> FLOAT
Rule 8     type -> BOOL
Rule 9     type -> CHAR
Rule 10    id_list -> id_list COMMA ID
Rule 11    id_list -> ID
Rule 12    function_list -> function_list function
Rule 13    function_list -> empty
Rule 14    function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list RBRACE
Rule 15    function -> FUNCTION type ID LPAREN param_list RPAREN LBRACE statement_list RBRACE
Rule 16    function -> FUNCTION VOID ID LPAREN param_list RPAREN vars LBRACE statement_list RBRACE
Rule 17    function -> FUNCTION VOID ID LPAREN param_list RPAREN LBRACE statement_list RBRACE
Rule 18    param_list -> param_list COMMA type ID
Rule 19    param_list -> type ID
Rule 20    param_list -> empty
Rule 21    main_function -> MAIN LPAREN RPAREN LBRACE statement_list RBRACE
Rule 22    statement_list -> statement_list statement
Rule 23    statement_list -> statement_list return_statement
Rule 24    statement_list -> statement
Rule 25    statement_list -> return_statement
Rule 26    statement_list -> empty
Rule 27    statement -> assignment SEMICOLON
Rule 28    statement -> function_call SEMICOLON
Rule 29    statement -> read_statement SEMICOLON
Rule 30    statement -> write_statement SEMICOLON
Rule 31    statement -> if_statement
Rule 32    statement -> while_statement
Rule 33    statement -> for_statement
Rule 34    assignment -> ID ASSIGN expression
Rule 35    assignment -> ID LBRACKET expression RBRACKET ASSIGN expression
Rule 36    function_call -> ID LPAREN arg_list RPAREN
Rule 37    arg_list -> arg_list COMMA expression
Rule 38    arg_list -> expression
Rule 39    read_statement -> READ id_list
Rule 40    write_statement -> WRITE LPAREN write_list RPAREN
Rule 41    write_list -> write_list COMMA expression
Rule 42    write_list -> STRING
Rule 43    write_list -> ID COMMA expression
Rule 44    if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
Rule 45    if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
Rule 46    if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
Rule 47    if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
Rule 48    if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
Rule 49    if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
Rule 50    while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
Rule 51    for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE
Rule 52    return_statement -> RETURN LPAREN expression RPAREN SEMICOLON
Rule 53    expression -> expression PLUS term
Rule 54    expression -> expression MINUS term
Rule 55    expression -> expression EQ term
Rule 56    expression -> expression NE term
Rule 57    expression -> expression LT term
Rule 58    expression -> expression LE term
Rule 59    expression -> expression GT term
Rule 60    expression -> expression GE term
Rule 61    expression -> expression AND term
Rule 62    expression -> expression OR term
Rule 63    expression -> term
Rule 64    expression -> function_call
Rule 65    expression -> STRING
Rule 66    term -> term TIMES factor
Rule 67    term -> term DIVIDE factor
Rule 68    term -> function_call
Rule 69    term -> factor
Rule 70    factor -> LPAREN expression RPAREN
Rule 71    factor -> ID
Rule 72    factor -> ID LBRACKET expression RBRACKET
Rule 73    factor -> INTEGER
Rule 74    factor -> function_call
Rule 75    factor -> FLOATING_POINT
Rule 76    empty -> <empty>

Terminals, with rules where they appear

AND                  : 61
ARC                  : 
ASSIGN               : 34 35
BOOL                 : 8
CHAR                 : 9
CIRCLE               : 
COLOR                : 
COMMA                : 10 18 37 41 43
DIVIDE               : 67
DO                   : 50 51
ELSE                 : 46 47 48 49
EQ                   : 55
FLOAT                : 7
FLOATING_POINT       : 75
FOR                  : 51
FUNCTION             : 14 15 16 17
GE                   : 60
GT                   : 59
ID                   : 1 2 10 11 14 15 16 17 18 19 34 35 36 43 51 71 72
IF                   : 44 45 46 47 48 49
INT                  : 6
INTEGER              : 73
LBRACE               : 14 15 16 17 21 44 45 46 46 47 47 48 48 49 49 50 51
LBRACKET             : 35 51 72
LE                   : 58
LINE                 : 
LPAREN               : 14 15 16 17 21 36 40 44 45 46 47 48 49 50 52 70
LT                   : 57
MAIN                 : 21
MINUS                : 54
NE                   : 56
NOT                  : 
OR                   : 62
PENDOWN              : 
PENUP                : 
PLUS                 : 53
POINT                : 
PROGRAM              : 1 2
RBRACE               : 14 15 16 17 21 44 45 46 46 47 47 48 48 49 49 50 51
RBRACKET             : 35 51 72
READ                 : 39
RETURN               : 52
RPAREN               : 14 15 16 17 21 36 40 44 45 46 47 48 49 50 52 70
SEMICOLON            : 1 2 4 5 27 28 29 30 52
STRING               : 42 65
THEN                 : 44 45 46 47 48 49
THICKNESS            : 
TIMES                : 66
TO                   : 51
VARS                 : 3
VOID                 : 16 17
WHILE                : 50
WRITE                : 40
error                : 

Nonterminals, with rules where they appear

arg_list             : 36 37
assignment           : 27
empty                : 2 13 20 26
expression           : 34 35 35 37 38 41 43 44 45 46 47 48 49 50 51 51 52 53 54 55 56 57 58 59 60 61 62 70 72
factor               : 66 67 69
for_statement        : 33
function             : 12
function_call        : 28 64 68 74
function_list        : 1 12
id_list              : 4 5 10 39
if_statement         : 31
main_function        : 1 2
param_list           : 14 15 16 17 18
program              : 0
read_statement       : 29
return_statement     : 23 25 45 47 48 49 49
statement            : 22 24
statement_list       : 14 15 16 17 21 22 23 44 46 46 47 48 50 51
term                 : 53 54 55 56 57 58 59 60 61 62 63 66 67
type                 : 4 5 14 15 18 19
var_list             : 3 4
vars                 : 1 2 14 16
while_statement      : 32
write_list           : 40 41
write_statement      : 30

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON vars function_list main_function
    (2) program -> . PROGRAM ID SEMICOLON vars empty main_function

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON vars function_list main_function
    (2) program -> PROGRAM . ID SEMICOLON vars empty main_function

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON vars function_list main_function
    (2) program -> PROGRAM ID . SEMICOLON vars empty main_function

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . vars function_list main_function
    (2) program -> PROGRAM ID SEMICOLON . vars empty main_function
    (3) vars -> . VARS var_list

    VARS            shift and go to state 6

    vars                           shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMICOLON vars . function_list main_function
    (2) program -> PROGRAM ID SEMICOLON vars . empty main_function
    (12) function_list -> . function_list function
    (13) function_list -> . empty
    (76) empty -> .

    MAIN            reduce using rule 76 (empty -> .)
    FUNCTION        reduce using rule 76 (empty -> .)

    function_list                  shift and go to state 7
    empty                          shift and go to state 8

state 6

    (3) vars -> VARS . var_list
    (4) var_list -> . var_list type id_list SEMICOLON
    (5) var_list -> . type id_list SEMICOLON
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOL
    (9) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    BOOL            shift and go to state 13
    CHAR            shift and go to state 14

    var_list                       shift and go to state 9
    type                           shift and go to state 10

state 7

    (1) program -> PROGRAM ID SEMICOLON vars function_list . main_function
    (12) function_list -> function_list . function
    (21) main_function -> . MAIN LPAREN RPAREN LBRACE statement_list RBRACE
    (14) function -> . FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list RBRACE
    (15) function -> . FUNCTION type ID LPAREN param_list RPAREN LBRACE statement_list RBRACE
    (16) function -> . FUNCTION VOID ID LPAREN param_list RPAREN vars LBRACE statement_list RBRACE
    (17) function -> . FUNCTION VOID ID LPAREN param_list RPAREN LBRACE statement_list RBRACE

    MAIN            shift and go to state 17
    FUNCTION        shift and go to state 18

    main_function                  shift and go to state 15
    function                       shift and go to state 16

state 8

    (2) program -> PROGRAM ID SEMICOLON vars empty . main_function
    (13) function_list -> empty .
    (21) main_function -> . MAIN LPAREN RPAREN LBRACE statement_list RBRACE

  ! shift/reduce conflict for MAIN resolved as shift
    FUNCTION        reduce using rule 13 (function_list -> empty .)
    MAIN            shift and go to state 17

  ! MAIN            [ reduce using rule 13 (function_list -> empty .) ]

    main_function                  shift and go to state 19

state 9

    (3) vars -> VARS var_list .
    (4) var_list -> var_list . type id_list SEMICOLON
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOL
    (9) type -> . CHAR

    MAIN            reduce using rule 3 (vars -> VARS var_list .)
    FUNCTION        reduce using rule 3 (vars -> VARS var_list .)
    LBRACE          reduce using rule 3 (vars -> VARS var_list .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    BOOL            shift and go to state 13
    CHAR            shift and go to state 14

    type                           shift and go to state 20

state 10

    (5) var_list -> type . id_list SEMICOLON
    (10) id_list -> . id_list COMMA ID
    (11) id_list -> . ID

    ID              shift and go to state 22

    id_list                        shift and go to state 21

state 11

    (6) type -> INT .

    ID              reduce using rule 6 (type -> INT .)


state 12

    (7) type -> FLOAT .

    ID              reduce using rule 7 (type -> FLOAT .)


state 13

    (8) type -> BOOL .

    ID              reduce using rule 8 (type -> BOOL .)


state 14

    (9) type -> CHAR .

    ID              reduce using rule 9 (type -> CHAR .)


state 15

    (1) program -> PROGRAM ID SEMICOLON vars function_list main_function .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON vars function_list main_function .)


state 16

    (12) function_list -> function_list function .

    MAIN            reduce using rule 12 (function_list -> function_list function .)
    FUNCTION        reduce using rule 12 (function_list -> function_list function .)


state 17

    (21) main_function -> MAIN . LPAREN RPAREN LBRACE statement_list RBRACE

    LPAREN          shift and go to state 23


state 18

    (14) function -> FUNCTION . type ID LPAREN param_list RPAREN vars LBRACE statement_list RBRACE
    (15) function -> FUNCTION . type ID LPAREN param_list RPAREN LBRACE statement_list RBRACE
    (16) function -> FUNCTION . VOID ID LPAREN param_list RPAREN vars LBRACE statement_list RBRACE
    (17) function -> FUNCTION . VOID ID LPAREN param_list RPAREN LBRACE statement_list RBRACE
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOL
    (9) type -> . CHAR

    VOID            shift and go to state 25
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    BOOL            shift and go to state 13
    CHAR            shift and go to state 14

    type                           shift and go to state 24

state 19

    (2) program -> PROGRAM ID SEMICOLON vars empty main_function .

    $end            reduce using rule 2 (program -> PROGRAM ID SEMICOLON vars empty main_function .)


state 20

    (4) var_list -> var_list type . id_list SEMICOLON
    (10) id_list -> . id_list COMMA ID
    (11) id_list -> . ID

    ID              shift and go to state 22

    id_list                        shift and go to state 26

state 21

    (5) var_list -> type id_list . SEMICOLON
    (10) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 27
    COMMA           shift and go to state 28


state 22

    (11) id_list -> ID .

    SEMICOLON       reduce using rule 11 (id_list -> ID .)
    COMMA           reduce using rule 11 (id_list -> ID .)


state 23

    (21) main_function -> MAIN LPAREN . RPAREN LBRACE statement_list RBRACE

    RPAREN          shift and go to state 29


state 24

    (14) function -> FUNCTION type . ID LPAREN param_list RPAREN vars LBRACE statement_list RBRACE
    (15) function -> FUNCTION type . ID LPAREN param_list RPAREN LBRACE statement_list RBRACE

    ID              shift and go to state 30


state 25

    (16) function -> FUNCTION VOID . ID LPAREN param_list RPAREN vars LBRACE statement_list RBRACE
    (17) function -> FUNCTION VOID . ID LPAREN param_list RPAREN LBRACE statement_list RBRACE

    ID              shift and go to state 31


state 26

    (4) var_list -> var_list type id_list . SEMICOLON
    (10) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 32
    COMMA           shift and go to state 28


state 27

    (5) var_list -> type id_list SEMICOLON .

    INT             reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    FLOAT           reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    BOOL            reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    CHAR            reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    MAIN            reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    FUNCTION        reduce using rule 5 (var_list -> type id_list SEMICOLON .)
    LBRACE          reduce using rule 5 (var_list -> type id_list SEMICOLON .)


state 28

    (10) id_list -> id_list COMMA . ID

    ID              shift and go to state 33


state 29

    (21) main_function -> MAIN LPAREN RPAREN . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 34


state 30

    (14) function -> FUNCTION type ID . LPAREN param_list RPAREN vars LBRACE statement_list RBRACE
    (15) function -> FUNCTION type ID . LPAREN param_list RPAREN LBRACE statement_list RBRACE

    LPAREN          shift and go to state 35


state 31

    (16) function -> FUNCTION VOID ID . LPAREN param_list RPAREN vars LBRACE statement_list RBRACE
    (17) function -> FUNCTION VOID ID . LPAREN param_list RPAREN LBRACE statement_list RBRACE

    LPAREN          shift and go to state 36


state 32

    (4) var_list -> var_list type id_list SEMICOLON .

    INT             reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    FLOAT           reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    BOOL            reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    CHAR            reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    MAIN            reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    FUNCTION        reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)
    LBRACE          reduce using rule 4 (var_list -> var_list type id_list SEMICOLON .)


state 33

    (10) id_list -> id_list COMMA ID .

    SEMICOLON       reduce using rule 10 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 10 (id_list -> id_list COMMA ID .)


state 34

    (21) main_function -> MAIN LPAREN RPAREN LBRACE . statement_list RBRACE
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement_list return_statement
    (24) statement_list -> . statement
    (25) statement_list -> . return_statement
    (26) statement_list -> . empty
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (76) empty -> .
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    RETURN          shift and go to state 48
    RBRACE          reduce using rule 76 (empty -> .)
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

  ! RETURN          [ reduce using rule 76 (empty -> .) ]
  ! ID              [ reduce using rule 76 (empty -> .) ]
  ! READ            [ reduce using rule 76 (empty -> .) ]
  ! WRITE           [ reduce using rule 76 (empty -> .) ]
  ! IF              [ reduce using rule 76 (empty -> .) ]
  ! WHILE           [ reduce using rule 76 (empty -> .) ]
  ! FOR             [ reduce using rule 76 (empty -> .) ]

    statement_list                 shift and go to state 37
    statement                      shift and go to state 38
    return_statement               shift and go to state 39
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 35

    (14) function -> FUNCTION type ID LPAREN . param_list RPAREN vars LBRACE statement_list RBRACE
    (15) function -> FUNCTION type ID LPAREN . param_list RPAREN LBRACE statement_list RBRACE
    (18) param_list -> . param_list COMMA type ID
    (19) param_list -> . type ID
    (20) param_list -> . empty
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOL
    (9) type -> . CHAR
    (76) empty -> .

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    BOOL            shift and go to state 13
    CHAR            shift and go to state 14
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    type                           shift and go to state 55
    param_list                     shift and go to state 56
    empty                          shift and go to state 57

state 36

    (16) function -> FUNCTION VOID ID LPAREN . param_list RPAREN vars LBRACE statement_list RBRACE
    (17) function -> FUNCTION VOID ID LPAREN . param_list RPAREN LBRACE statement_list RBRACE
    (18) param_list -> . param_list COMMA type ID
    (19) param_list -> . type ID
    (20) param_list -> . empty
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOL
    (9) type -> . CHAR
    (76) empty -> .

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    BOOL            shift and go to state 13
    CHAR            shift and go to state 14
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    param_list                     shift and go to state 58
    type                           shift and go to state 55
    empty                          shift and go to state 57

state 37

    (21) main_function -> MAIN LPAREN RPAREN LBRACE statement_list . RBRACE
    (22) statement_list -> statement_list . statement
    (23) statement_list -> statement_list . return_statement
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 59
    RETURN          shift and go to state 48
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

    statement                      shift and go to state 60
    return_statement               shift and go to state 61
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 38

    (24) statement_list -> statement .

    RBRACE          reduce using rule 24 (statement_list -> statement .)
    RETURN          reduce using rule 24 (statement_list -> statement .)
    ID              reduce using rule 24 (statement_list -> statement .)
    READ            reduce using rule 24 (statement_list -> statement .)
    WRITE           reduce using rule 24 (statement_list -> statement .)
    IF              reduce using rule 24 (statement_list -> statement .)
    WHILE           reduce using rule 24 (statement_list -> statement .)
    FOR             reduce using rule 24 (statement_list -> statement .)


state 39

    (25) statement_list -> return_statement .

    RBRACE          reduce using rule 25 (statement_list -> return_statement .)
    RETURN          reduce using rule 25 (statement_list -> return_statement .)
    ID              reduce using rule 25 (statement_list -> return_statement .)
    READ            reduce using rule 25 (statement_list -> return_statement .)
    WRITE           reduce using rule 25 (statement_list -> return_statement .)
    IF              reduce using rule 25 (statement_list -> return_statement .)
    WHILE           reduce using rule 25 (statement_list -> return_statement .)
    FOR             reduce using rule 25 (statement_list -> return_statement .)


state 40

    (26) statement_list -> empty .

    RBRACE          reduce using rule 26 (statement_list -> empty .)
    RETURN          reduce using rule 26 (statement_list -> empty .)
    ID              reduce using rule 26 (statement_list -> empty .)
    READ            reduce using rule 26 (statement_list -> empty .)
    WRITE           reduce using rule 26 (statement_list -> empty .)
    IF              reduce using rule 26 (statement_list -> empty .)
    WHILE           reduce using rule 26 (statement_list -> empty .)
    FOR             reduce using rule 26 (statement_list -> empty .)


state 41

    (27) statement -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 62


state 42

    (28) statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 63


state 43

    (29) statement -> read_statement . SEMICOLON

    SEMICOLON       shift and go to state 64


state 44

    (30) statement -> write_statement . SEMICOLON

    SEMICOLON       shift and go to state 65


state 45

    (31) statement -> if_statement .

    RBRACE          reduce using rule 31 (statement -> if_statement .)
    RETURN          reduce using rule 31 (statement -> if_statement .)
    ID              reduce using rule 31 (statement -> if_statement .)
    READ            reduce using rule 31 (statement -> if_statement .)
    WRITE           reduce using rule 31 (statement -> if_statement .)
    IF              reduce using rule 31 (statement -> if_statement .)
    WHILE           reduce using rule 31 (statement -> if_statement .)
    FOR             reduce using rule 31 (statement -> if_statement .)


state 46

    (32) statement -> while_statement .

    RBRACE          reduce using rule 32 (statement -> while_statement .)
    RETURN          reduce using rule 32 (statement -> while_statement .)
    ID              reduce using rule 32 (statement -> while_statement .)
    READ            reduce using rule 32 (statement -> while_statement .)
    WRITE           reduce using rule 32 (statement -> while_statement .)
    IF              reduce using rule 32 (statement -> while_statement .)
    WHILE           reduce using rule 32 (statement -> while_statement .)
    FOR             reduce using rule 32 (statement -> while_statement .)


state 47

    (33) statement -> for_statement .

    RBRACE          reduce using rule 33 (statement -> for_statement .)
    RETURN          reduce using rule 33 (statement -> for_statement .)
    ID              reduce using rule 33 (statement -> for_statement .)
    READ            reduce using rule 33 (statement -> for_statement .)
    WRITE           reduce using rule 33 (statement -> for_statement .)
    IF              reduce using rule 33 (statement -> for_statement .)
    WHILE           reduce using rule 33 (statement -> for_statement .)
    FOR             reduce using rule 33 (statement -> for_statement .)


state 48

    (52) return_statement -> RETURN . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 66


state 49

    (34) assignment -> ID . ASSIGN expression
    (35) assignment -> ID . LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> ID . LPAREN arg_list RPAREN

    ASSIGN          shift and go to state 67
    LBRACKET        shift and go to state 68
    LPAREN          shift and go to state 69


state 50

    (39) read_statement -> READ . id_list
    (10) id_list -> . id_list COMMA ID
    (11) id_list -> . ID

    ID              shift and go to state 22

    id_list                        shift and go to state 70

state 51

    (40) write_statement -> WRITE . LPAREN write_list RPAREN

    LPAREN          shift and go to state 71


state 52

    (44) if_statement -> IF . LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> IF . LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> IF . LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> IF . LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> IF . LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> IF . LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE

    LPAREN          shift and go to state 72


state 53

    (50) while_statement -> WHILE . LPAREN expression RPAREN DO LBRACE statement_list RBRACE

    LPAREN          shift and go to state 73


state 54

    (51) for_statement -> FOR . ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    ID              shift and go to state 74


state 55

    (19) param_list -> type . ID

    ID              shift and go to state 75


state 56

    (14) function -> FUNCTION type ID LPAREN param_list . RPAREN vars LBRACE statement_list RBRACE
    (15) function -> FUNCTION type ID LPAREN param_list . RPAREN LBRACE statement_list RBRACE
    (18) param_list -> param_list . COMMA type ID

    RPAREN          shift and go to state 76
    COMMA           shift and go to state 77


state 57

    (20) param_list -> empty .

    RPAREN          reduce using rule 20 (param_list -> empty .)
    COMMA           reduce using rule 20 (param_list -> empty .)


state 58

    (16) function -> FUNCTION VOID ID LPAREN param_list . RPAREN vars LBRACE statement_list RBRACE
    (17) function -> FUNCTION VOID ID LPAREN param_list . RPAREN LBRACE statement_list RBRACE
    (18) param_list -> param_list . COMMA type ID

    RPAREN          shift and go to state 78
    COMMA           shift and go to state 77


state 59

    (21) main_function -> MAIN LPAREN RPAREN LBRACE statement_list RBRACE .

    $end            reduce using rule 21 (main_function -> MAIN LPAREN RPAREN LBRACE statement_list RBRACE .)


state 60

    (22) statement_list -> statement_list statement .

    RBRACE          reduce using rule 22 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 22 (statement_list -> statement_list statement .)
    ID              reduce using rule 22 (statement_list -> statement_list statement .)
    READ            reduce using rule 22 (statement_list -> statement_list statement .)
    WRITE           reduce using rule 22 (statement_list -> statement_list statement .)
    IF              reduce using rule 22 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 22 (statement_list -> statement_list statement .)
    FOR             reduce using rule 22 (statement_list -> statement_list statement .)


state 61

    (23) statement_list -> statement_list return_statement .

    RBRACE          reduce using rule 23 (statement_list -> statement_list return_statement .)
    RETURN          reduce using rule 23 (statement_list -> statement_list return_statement .)
    ID              reduce using rule 23 (statement_list -> statement_list return_statement .)
    READ            reduce using rule 23 (statement_list -> statement_list return_statement .)
    WRITE           reduce using rule 23 (statement_list -> statement_list return_statement .)
    IF              reduce using rule 23 (statement_list -> statement_list return_statement .)
    WHILE           reduce using rule 23 (statement_list -> statement_list return_statement .)
    FOR             reduce using rule 23 (statement_list -> statement_list return_statement .)


state 62

    (27) statement -> assignment SEMICOLON .

    RBRACE          reduce using rule 27 (statement -> assignment SEMICOLON .)
    RETURN          reduce using rule 27 (statement -> assignment SEMICOLON .)
    ID              reduce using rule 27 (statement -> assignment SEMICOLON .)
    READ            reduce using rule 27 (statement -> assignment SEMICOLON .)
    WRITE           reduce using rule 27 (statement -> assignment SEMICOLON .)
    IF              reduce using rule 27 (statement -> assignment SEMICOLON .)
    WHILE           reduce using rule 27 (statement -> assignment SEMICOLON .)
    FOR             reduce using rule 27 (statement -> assignment SEMICOLON .)


state 63

    (28) statement -> function_call SEMICOLON .

    RBRACE          reduce using rule 28 (statement -> function_call SEMICOLON .)
    RETURN          reduce using rule 28 (statement -> function_call SEMICOLON .)
    ID              reduce using rule 28 (statement -> function_call SEMICOLON .)
    READ            reduce using rule 28 (statement -> function_call SEMICOLON .)
    WRITE           reduce using rule 28 (statement -> function_call SEMICOLON .)
    IF              reduce using rule 28 (statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 28 (statement -> function_call SEMICOLON .)
    FOR             reduce using rule 28 (statement -> function_call SEMICOLON .)


state 64

    (29) statement -> read_statement SEMICOLON .

    RBRACE          reduce using rule 29 (statement -> read_statement SEMICOLON .)
    RETURN          reduce using rule 29 (statement -> read_statement SEMICOLON .)
    ID              reduce using rule 29 (statement -> read_statement SEMICOLON .)
    READ            reduce using rule 29 (statement -> read_statement SEMICOLON .)
    WRITE           reduce using rule 29 (statement -> read_statement SEMICOLON .)
    IF              reduce using rule 29 (statement -> read_statement SEMICOLON .)
    WHILE           reduce using rule 29 (statement -> read_statement SEMICOLON .)
    FOR             reduce using rule 29 (statement -> read_statement SEMICOLON .)


state 65

    (30) statement -> write_statement SEMICOLON .

    RBRACE          reduce using rule 30 (statement -> write_statement SEMICOLON .)
    RETURN          reduce using rule 30 (statement -> write_statement SEMICOLON .)
    ID              reduce using rule 30 (statement -> write_statement SEMICOLON .)
    READ            reduce using rule 30 (statement -> write_statement SEMICOLON .)
    WRITE           reduce using rule 30 (statement -> write_statement SEMICOLON .)
    IF              reduce using rule 30 (statement -> write_statement SEMICOLON .)
    WHILE           reduce using rule 30 (statement -> write_statement SEMICOLON .)
    FOR             reduce using rule 30 (statement -> write_statement SEMICOLON .)


state 66

    (52) return_statement -> RETURN LPAREN . expression RPAREN SEMICOLON
    (53) expression -> . expression PLUS term
    (54) expression -> . expression MINUS term
    (55) expression -> . expression EQ term
    (56) expression -> . expression NE term
    (57) expression -> . expression LT term
    (58) expression -> . expression LE term
    (59) expression -> . expression GT term
    (60) expression -> . expression GE term
    (61) expression -> . expression AND term
    (62) expression -> . expression OR term
    (63) expression -> . term
    (64) expression -> . function_call
    (65) expression -> . STRING
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    STRING          shift and go to state 83
    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    expression                     shift and go to state 80
    term                           shift and go to state 81
    function_call                  shift and go to state 82
    factor                         shift and go to state 84

state 67

    (34) assignment -> ID ASSIGN . expression
    (53) expression -> . expression PLUS term
    (54) expression -> . expression MINUS term
    (55) expression -> . expression EQ term
    (56) expression -> . expression NE term
    (57) expression -> . expression LT term
    (58) expression -> . expression LE term
    (59) expression -> . expression GT term
    (60) expression -> . expression GE term
    (61) expression -> . expression AND term
    (62) expression -> . expression OR term
    (63) expression -> . term
    (64) expression -> . function_call
    (65) expression -> . STRING
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    STRING          shift and go to state 83
    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    expression                     shift and go to state 88
    term                           shift and go to state 81
    function_call                  shift and go to state 82
    factor                         shift and go to state 84

state 68

    (35) assignment -> ID LBRACKET . expression RBRACKET ASSIGN expression
    (53) expression -> . expression PLUS term
    (54) expression -> . expression MINUS term
    (55) expression -> . expression EQ term
    (56) expression -> . expression NE term
    (57) expression -> . expression LT term
    (58) expression -> . expression LE term
    (59) expression -> . expression GT term
    (60) expression -> . expression GE term
    (61) expression -> . expression AND term
    (62) expression -> . expression OR term
    (63) expression -> . term
    (64) expression -> . function_call
    (65) expression -> . STRING
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    STRING          shift and go to state 83
    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    expression                     shift and go to state 89
    term                           shift and go to state 81
    function_call                  shift and go to state 82
    factor                         shift and go to state 84

state 69

    (36) function_call -> ID LPAREN . arg_list RPAREN
    (37) arg_list -> . arg_list COMMA expression
    (38) arg_list -> . expression
    (53) expression -> . expression PLUS term
    (54) expression -> . expression MINUS term
    (55) expression -> . expression EQ term
    (56) expression -> . expression NE term
    (57) expression -> . expression LT term
    (58) expression -> . expression LE term
    (59) expression -> . expression GT term
    (60) expression -> . expression GE term
    (61) expression -> . expression AND term
    (62) expression -> . expression OR term
    (63) expression -> . term
    (64) expression -> . function_call
    (65) expression -> . STRING
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    STRING          shift and go to state 83
    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    arg_list                       shift and go to state 90
    expression                     shift and go to state 91
    term                           shift and go to state 81
    function_call                  shift and go to state 82
    factor                         shift and go to state 84

state 70

    (39) read_statement -> READ id_list .
    (10) id_list -> id_list . COMMA ID

    SEMICOLON       reduce using rule 39 (read_statement -> READ id_list .)
    COMMA           shift and go to state 28


state 71

    (40) write_statement -> WRITE LPAREN . write_list RPAREN
    (41) write_list -> . write_list COMMA expression
    (42) write_list -> . STRING
    (43) write_list -> . ID COMMA expression

    STRING          shift and go to state 93
    ID              shift and go to state 94

    write_list                     shift and go to state 92

state 72

    (44) if_statement -> IF LPAREN . expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> IF LPAREN . expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> IF LPAREN . expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> IF LPAREN . expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> IF LPAREN . expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> IF LPAREN . expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (53) expression -> . expression PLUS term
    (54) expression -> . expression MINUS term
    (55) expression -> . expression EQ term
    (56) expression -> . expression NE term
    (57) expression -> . expression LT term
    (58) expression -> . expression LE term
    (59) expression -> . expression GT term
    (60) expression -> . expression GE term
    (61) expression -> . expression AND term
    (62) expression -> . expression OR term
    (63) expression -> . term
    (64) expression -> . function_call
    (65) expression -> . STRING
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    STRING          shift and go to state 83
    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    expression                     shift and go to state 95
    term                           shift and go to state 81
    function_call                  shift and go to state 82
    factor                         shift and go to state 84

state 73

    (50) while_statement -> WHILE LPAREN . expression RPAREN DO LBRACE statement_list RBRACE
    (53) expression -> . expression PLUS term
    (54) expression -> . expression MINUS term
    (55) expression -> . expression EQ term
    (56) expression -> . expression NE term
    (57) expression -> . expression LT term
    (58) expression -> . expression LE term
    (59) expression -> . expression GT term
    (60) expression -> . expression GE term
    (61) expression -> . expression AND term
    (62) expression -> . expression OR term
    (63) expression -> . term
    (64) expression -> . function_call
    (65) expression -> . STRING
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    STRING          shift and go to state 83
    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    expression                     shift and go to state 96
    term                           shift and go to state 81
    function_call                  shift and go to state 82
    factor                         shift and go to state 84

state 74

    (51) for_statement -> FOR ID . LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    LBRACKET        shift and go to state 97


state 75

    (19) param_list -> type ID .

    RPAREN          reduce using rule 19 (param_list -> type ID .)
    COMMA           reduce using rule 19 (param_list -> type ID .)


state 76

    (14) function -> FUNCTION type ID LPAREN param_list RPAREN . vars LBRACE statement_list RBRACE
    (15) function -> FUNCTION type ID LPAREN param_list RPAREN . LBRACE statement_list RBRACE
    (3) vars -> . VARS var_list

    LBRACE          shift and go to state 99
    VARS            shift and go to state 6

    vars                           shift and go to state 98

state 77

    (18) param_list -> param_list COMMA . type ID
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOL
    (9) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    BOOL            shift and go to state 13
    CHAR            shift and go to state 14

    type                           shift and go to state 100

state 78

    (16) function -> FUNCTION VOID ID LPAREN param_list RPAREN . vars LBRACE statement_list RBRACE
    (17) function -> FUNCTION VOID ID LPAREN param_list RPAREN . LBRACE statement_list RBRACE
    (3) vars -> . VARS var_list

    LBRACE          shift and go to state 102
    VARS            shift and go to state 6

    vars                           shift and go to state 101

state 79

    (70) factor -> LPAREN . expression RPAREN
    (53) expression -> . expression PLUS term
    (54) expression -> . expression MINUS term
    (55) expression -> . expression EQ term
    (56) expression -> . expression NE term
    (57) expression -> . expression LT term
    (58) expression -> . expression LE term
    (59) expression -> . expression GT term
    (60) expression -> . expression GE term
    (61) expression -> . expression AND term
    (62) expression -> . expression OR term
    (63) expression -> . term
    (64) expression -> . function_call
    (65) expression -> . STRING
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    STRING          shift and go to state 83
    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    expression                     shift and go to state 103
    term                           shift and go to state 81
    function_call                  shift and go to state 82
    factor                         shift and go to state 84

state 80

    (52) return_statement -> RETURN LPAREN expression . RPAREN SEMICOLON
    (53) expression -> expression . PLUS term
    (54) expression -> expression . MINUS term
    (55) expression -> expression . EQ term
    (56) expression -> expression . NE term
    (57) expression -> expression . LT term
    (58) expression -> expression . LE term
    (59) expression -> expression . GT term
    (60) expression -> expression . GE term
    (61) expression -> expression . AND term
    (62) expression -> expression . OR term

    RPAREN          shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    EQ              shift and go to state 107
    NE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 81

    (63) expression -> term .
    (66) term -> term . TIMES factor
    (67) term -> term . DIVIDE factor

    RPAREN          reduce using rule 63 (expression -> term .)
    PLUS            reduce using rule 63 (expression -> term .)
    MINUS           reduce using rule 63 (expression -> term .)
    EQ              reduce using rule 63 (expression -> term .)
    NE              reduce using rule 63 (expression -> term .)
    LT              reduce using rule 63 (expression -> term .)
    LE              reduce using rule 63 (expression -> term .)
    GT              reduce using rule 63 (expression -> term .)
    GE              reduce using rule 63 (expression -> term .)
    AND             reduce using rule 63 (expression -> term .)
    OR              reduce using rule 63 (expression -> term .)
    SEMICOLON       reduce using rule 63 (expression -> term .)
    RBRACKET        reduce using rule 63 (expression -> term .)
    COMMA           reduce using rule 63 (expression -> term .)
    TO              reduce using rule 63 (expression -> term .)
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116


state 82

    (64) expression -> function_call .
    (68) term -> function_call .
    (74) factor -> function_call .

  ! reduce/reduce conflict for RPAREN resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for EQ resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for NE resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for LT resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for LE resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for GT resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for GE resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for AND resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for OR resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for TO resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 68 (term -> function_call .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 68 (term -> function_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for EQ resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for NE resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for LT resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for LE resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for GT resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for GE resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for AND resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for OR resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 64 (expression -> function_call .)
  ! reduce/reduce conflict for TO resolved using rule 64 (expression -> function_call .)
    RPAREN          reduce using rule 64 (expression -> function_call .)
    PLUS            reduce using rule 64 (expression -> function_call .)
    MINUS           reduce using rule 64 (expression -> function_call .)
    EQ              reduce using rule 64 (expression -> function_call .)
    NE              reduce using rule 64 (expression -> function_call .)
    LT              reduce using rule 64 (expression -> function_call .)
    LE              reduce using rule 64 (expression -> function_call .)
    GT              reduce using rule 64 (expression -> function_call .)
    GE              reduce using rule 64 (expression -> function_call .)
    AND             reduce using rule 64 (expression -> function_call .)
    OR              reduce using rule 64 (expression -> function_call .)
    SEMICOLON       reduce using rule 64 (expression -> function_call .)
    RBRACKET        reduce using rule 64 (expression -> function_call .)
    COMMA           reduce using rule 64 (expression -> function_call .)
    TO              reduce using rule 64 (expression -> function_call .)
    TIMES           reduce using rule 68 (term -> function_call .)
    DIVIDE          reduce using rule 68 (term -> function_call .)

  ! RPAREN          [ reduce using rule 68 (term -> function_call .) ]
  ! PLUS            [ reduce using rule 68 (term -> function_call .) ]
  ! MINUS           [ reduce using rule 68 (term -> function_call .) ]
  ! EQ              [ reduce using rule 68 (term -> function_call .) ]
  ! NE              [ reduce using rule 68 (term -> function_call .) ]
  ! LT              [ reduce using rule 68 (term -> function_call .) ]
  ! LE              [ reduce using rule 68 (term -> function_call .) ]
  ! GT              [ reduce using rule 68 (term -> function_call .) ]
  ! GE              [ reduce using rule 68 (term -> function_call .) ]
  ! AND             [ reduce using rule 68 (term -> function_call .) ]
  ! OR              [ reduce using rule 68 (term -> function_call .) ]
  ! SEMICOLON       [ reduce using rule 68 (term -> function_call .) ]
  ! RBRACKET        [ reduce using rule 68 (term -> function_call .) ]
  ! COMMA           [ reduce using rule 68 (term -> function_call .) ]
  ! TO              [ reduce using rule 68 (term -> function_call .) ]
  ! TIMES           [ reduce using rule 74 (factor -> function_call .) ]
  ! DIVIDE          [ reduce using rule 74 (factor -> function_call .) ]
  ! RPAREN          [ reduce using rule 74 (factor -> function_call .) ]
  ! PLUS            [ reduce using rule 74 (factor -> function_call .) ]
  ! MINUS           [ reduce using rule 74 (factor -> function_call .) ]
  ! EQ              [ reduce using rule 74 (factor -> function_call .) ]
  ! NE              [ reduce using rule 74 (factor -> function_call .) ]
  ! LT              [ reduce using rule 74 (factor -> function_call .) ]
  ! LE              [ reduce using rule 74 (factor -> function_call .) ]
  ! GT              [ reduce using rule 74 (factor -> function_call .) ]
  ! GE              [ reduce using rule 74 (factor -> function_call .) ]
  ! AND             [ reduce using rule 74 (factor -> function_call .) ]
  ! OR              [ reduce using rule 74 (factor -> function_call .) ]
  ! SEMICOLON       [ reduce using rule 74 (factor -> function_call .) ]
  ! RBRACKET        [ reduce using rule 74 (factor -> function_call .) ]
  ! COMMA           [ reduce using rule 74 (factor -> function_call .) ]
  ! TO              [ reduce using rule 74 (factor -> function_call .) ]


state 83

    (65) expression -> STRING .

    RPAREN          reduce using rule 65 (expression -> STRING .)
    PLUS            reduce using rule 65 (expression -> STRING .)
    MINUS           reduce using rule 65 (expression -> STRING .)
    EQ              reduce using rule 65 (expression -> STRING .)
    NE              reduce using rule 65 (expression -> STRING .)
    LT              reduce using rule 65 (expression -> STRING .)
    LE              reduce using rule 65 (expression -> STRING .)
    GT              reduce using rule 65 (expression -> STRING .)
    GE              reduce using rule 65 (expression -> STRING .)
    AND             reduce using rule 65 (expression -> STRING .)
    OR              reduce using rule 65 (expression -> STRING .)
    SEMICOLON       reduce using rule 65 (expression -> STRING .)
    RBRACKET        reduce using rule 65 (expression -> STRING .)
    COMMA           reduce using rule 65 (expression -> STRING .)
    TO              reduce using rule 65 (expression -> STRING .)


state 84

    (69) term -> factor .

    TIMES           reduce using rule 69 (term -> factor .)
    DIVIDE          reduce using rule 69 (term -> factor .)
    RPAREN          reduce using rule 69 (term -> factor .)
    PLUS            reduce using rule 69 (term -> factor .)
    MINUS           reduce using rule 69 (term -> factor .)
    EQ              reduce using rule 69 (term -> factor .)
    NE              reduce using rule 69 (term -> factor .)
    LT              reduce using rule 69 (term -> factor .)
    LE              reduce using rule 69 (term -> factor .)
    GT              reduce using rule 69 (term -> factor .)
    GE              reduce using rule 69 (term -> factor .)
    AND             reduce using rule 69 (term -> factor .)
    OR              reduce using rule 69 (term -> factor .)
    SEMICOLON       reduce using rule 69 (term -> factor .)
    RBRACKET        reduce using rule 69 (term -> factor .)
    COMMA           reduce using rule 69 (term -> factor .)
    TO              reduce using rule 69 (term -> factor .)


state 85

    (36) function_call -> ID . LPAREN arg_list RPAREN
    (71) factor -> ID .
    (72) factor -> ID . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 69
    TIMES           reduce using rule 71 (factor -> ID .)
    DIVIDE          reduce using rule 71 (factor -> ID .)
    RPAREN          reduce using rule 71 (factor -> ID .)
    PLUS            reduce using rule 71 (factor -> ID .)
    MINUS           reduce using rule 71 (factor -> ID .)
    EQ              reduce using rule 71 (factor -> ID .)
    NE              reduce using rule 71 (factor -> ID .)
    LT              reduce using rule 71 (factor -> ID .)
    LE              reduce using rule 71 (factor -> ID .)
    GT              reduce using rule 71 (factor -> ID .)
    GE              reduce using rule 71 (factor -> ID .)
    AND             reduce using rule 71 (factor -> ID .)
    OR              reduce using rule 71 (factor -> ID .)
    SEMICOLON       reduce using rule 71 (factor -> ID .)
    RBRACKET        reduce using rule 71 (factor -> ID .)
    COMMA           reduce using rule 71 (factor -> ID .)
    TO              reduce using rule 71 (factor -> ID .)
    LBRACKET        shift and go to state 117


state 86

    (73) factor -> INTEGER .

    TIMES           reduce using rule 73 (factor -> INTEGER .)
    DIVIDE          reduce using rule 73 (factor -> INTEGER .)
    RPAREN          reduce using rule 73 (factor -> INTEGER .)
    PLUS            reduce using rule 73 (factor -> INTEGER .)
    MINUS           reduce using rule 73 (factor -> INTEGER .)
    EQ              reduce using rule 73 (factor -> INTEGER .)
    NE              reduce using rule 73 (factor -> INTEGER .)
    LT              reduce using rule 73 (factor -> INTEGER .)
    LE              reduce using rule 73 (factor -> INTEGER .)
    GT              reduce using rule 73 (factor -> INTEGER .)
    GE              reduce using rule 73 (factor -> INTEGER .)
    AND             reduce using rule 73 (factor -> INTEGER .)
    OR              reduce using rule 73 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 73 (factor -> INTEGER .)
    RBRACKET        reduce using rule 73 (factor -> INTEGER .)
    COMMA           reduce using rule 73 (factor -> INTEGER .)
    TO              reduce using rule 73 (factor -> INTEGER .)


state 87

    (75) factor -> FLOATING_POINT .

    TIMES           reduce using rule 75 (factor -> FLOATING_POINT .)
    DIVIDE          reduce using rule 75 (factor -> FLOATING_POINT .)
    RPAREN          reduce using rule 75 (factor -> FLOATING_POINT .)
    PLUS            reduce using rule 75 (factor -> FLOATING_POINT .)
    MINUS           reduce using rule 75 (factor -> FLOATING_POINT .)
    EQ              reduce using rule 75 (factor -> FLOATING_POINT .)
    NE              reduce using rule 75 (factor -> FLOATING_POINT .)
    LT              reduce using rule 75 (factor -> FLOATING_POINT .)
    LE              reduce using rule 75 (factor -> FLOATING_POINT .)
    GT              reduce using rule 75 (factor -> FLOATING_POINT .)
    GE              reduce using rule 75 (factor -> FLOATING_POINT .)
    AND             reduce using rule 75 (factor -> FLOATING_POINT .)
    OR              reduce using rule 75 (factor -> FLOATING_POINT .)
    SEMICOLON       reduce using rule 75 (factor -> FLOATING_POINT .)
    RBRACKET        reduce using rule 75 (factor -> FLOATING_POINT .)
    COMMA           reduce using rule 75 (factor -> FLOATING_POINT .)
    TO              reduce using rule 75 (factor -> FLOATING_POINT .)


state 88

    (34) assignment -> ID ASSIGN expression .
    (53) expression -> expression . PLUS term
    (54) expression -> expression . MINUS term
    (55) expression -> expression . EQ term
    (56) expression -> expression . NE term
    (57) expression -> expression . LT term
    (58) expression -> expression . LE term
    (59) expression -> expression . GT term
    (60) expression -> expression . GE term
    (61) expression -> expression . AND term
    (62) expression -> expression . OR term

    SEMICOLON       reduce using rule 34 (assignment -> ID ASSIGN expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    EQ              shift and go to state 107
    NE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 89

    (35) assignment -> ID LBRACKET expression . RBRACKET ASSIGN expression
    (53) expression -> expression . PLUS term
    (54) expression -> expression . MINUS term
    (55) expression -> expression . EQ term
    (56) expression -> expression . NE term
    (57) expression -> expression . LT term
    (58) expression -> expression . LE term
    (59) expression -> expression . GT term
    (60) expression -> expression . GE term
    (61) expression -> expression . AND term
    (62) expression -> expression . OR term

    RBRACKET        shift and go to state 118
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    EQ              shift and go to state 107
    NE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 90

    (36) function_call -> ID LPAREN arg_list . RPAREN
    (37) arg_list -> arg_list . COMMA expression

    RPAREN          shift and go to state 119
    COMMA           shift and go to state 120


state 91

    (38) arg_list -> expression .
    (53) expression -> expression . PLUS term
    (54) expression -> expression . MINUS term
    (55) expression -> expression . EQ term
    (56) expression -> expression . NE term
    (57) expression -> expression . LT term
    (58) expression -> expression . LE term
    (59) expression -> expression . GT term
    (60) expression -> expression . GE term
    (61) expression -> expression . AND term
    (62) expression -> expression . OR term

    RPAREN          reduce using rule 38 (arg_list -> expression .)
    COMMA           reduce using rule 38 (arg_list -> expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    EQ              shift and go to state 107
    NE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 92

    (40) write_statement -> WRITE LPAREN write_list . RPAREN
    (41) write_list -> write_list . COMMA expression

    RPAREN          shift and go to state 121
    COMMA           shift and go to state 122


state 93

    (42) write_list -> STRING .

    RPAREN          reduce using rule 42 (write_list -> STRING .)
    COMMA           reduce using rule 42 (write_list -> STRING .)


state 94

    (43) write_list -> ID . COMMA expression

    COMMA           shift and go to state 123


state 95

    (44) if_statement -> IF LPAREN expression . RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> IF LPAREN expression . RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> IF LPAREN expression . RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> IF LPAREN expression . RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> IF LPAREN expression . RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> IF LPAREN expression . RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (53) expression -> expression . PLUS term
    (54) expression -> expression . MINUS term
    (55) expression -> expression . EQ term
    (56) expression -> expression . NE term
    (57) expression -> expression . LT term
    (58) expression -> expression . LE term
    (59) expression -> expression . GT term
    (60) expression -> expression . GE term
    (61) expression -> expression . AND term
    (62) expression -> expression . OR term

    RPAREN          shift and go to state 124
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    EQ              shift and go to state 107
    NE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 96

    (50) while_statement -> WHILE LPAREN expression . RPAREN DO LBRACE statement_list RBRACE
    (53) expression -> expression . PLUS term
    (54) expression -> expression . MINUS term
    (55) expression -> expression . EQ term
    (56) expression -> expression . NE term
    (57) expression -> expression . LT term
    (58) expression -> expression . LE term
    (59) expression -> expression . GT term
    (60) expression -> expression . GE term
    (61) expression -> expression . AND term
    (62) expression -> expression . OR term

    RPAREN          shift and go to state 125
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    EQ              shift and go to state 107
    NE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 97

    (51) for_statement -> FOR ID LBRACKET . expression TO expression RBRACKET DO LBRACE statement_list RBRACE
    (53) expression -> . expression PLUS term
    (54) expression -> . expression MINUS term
    (55) expression -> . expression EQ term
    (56) expression -> . expression NE term
    (57) expression -> . expression LT term
    (58) expression -> . expression LE term
    (59) expression -> . expression GT term
    (60) expression -> . expression GE term
    (61) expression -> . expression AND term
    (62) expression -> . expression OR term
    (63) expression -> . term
    (64) expression -> . function_call
    (65) expression -> . STRING
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    STRING          shift and go to state 83
    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    expression                     shift and go to state 126
    term                           shift and go to state 81
    function_call                  shift and go to state 82
    factor                         shift and go to state 84

state 98

    (14) function -> FUNCTION type ID LPAREN param_list RPAREN vars . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 127


state 99

    (15) function -> FUNCTION type ID LPAREN param_list RPAREN LBRACE . statement_list RBRACE
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement_list return_statement
    (24) statement_list -> . statement
    (25) statement_list -> . return_statement
    (26) statement_list -> . empty
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (76) empty -> .
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    RETURN          shift and go to state 48
    RBRACE          reduce using rule 76 (empty -> .)
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

  ! RETURN          [ reduce using rule 76 (empty -> .) ]
  ! ID              [ reduce using rule 76 (empty -> .) ]
  ! READ            [ reduce using rule 76 (empty -> .) ]
  ! WRITE           [ reduce using rule 76 (empty -> .) ]
  ! IF              [ reduce using rule 76 (empty -> .) ]
  ! WHILE           [ reduce using rule 76 (empty -> .) ]
  ! FOR             [ reduce using rule 76 (empty -> .) ]

    statement_list                 shift and go to state 128
    statement                      shift and go to state 38
    return_statement               shift and go to state 39
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 100

    (18) param_list -> param_list COMMA type . ID

    ID              shift and go to state 129


state 101

    (16) function -> FUNCTION VOID ID LPAREN param_list RPAREN vars . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 130


state 102

    (17) function -> FUNCTION VOID ID LPAREN param_list RPAREN LBRACE . statement_list RBRACE
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement_list return_statement
    (24) statement_list -> . statement
    (25) statement_list -> . return_statement
    (26) statement_list -> . empty
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (76) empty -> .
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    RETURN          shift and go to state 48
    RBRACE          reduce using rule 76 (empty -> .)
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

  ! RETURN          [ reduce using rule 76 (empty -> .) ]
  ! ID              [ reduce using rule 76 (empty -> .) ]
  ! READ            [ reduce using rule 76 (empty -> .) ]
  ! WRITE           [ reduce using rule 76 (empty -> .) ]
  ! IF              [ reduce using rule 76 (empty -> .) ]
  ! WHILE           [ reduce using rule 76 (empty -> .) ]
  ! FOR             [ reduce using rule 76 (empty -> .) ]

    statement_list                 shift and go to state 131
    statement                      shift and go to state 38
    return_statement               shift and go to state 39
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 103

    (70) factor -> LPAREN expression . RPAREN
    (53) expression -> expression . PLUS term
    (54) expression -> expression . MINUS term
    (55) expression -> expression . EQ term
    (56) expression -> expression . NE term
    (57) expression -> expression . LT term
    (58) expression -> expression . LE term
    (59) expression -> expression . GT term
    (60) expression -> expression . GE term
    (61) expression -> expression . AND term
    (62) expression -> expression . OR term

    RPAREN          shift and go to state 132
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    EQ              shift and go to state 107
    NE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 104

    (52) return_statement -> RETURN LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 133


state 105

    (53) expression -> expression PLUS . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    term                           shift and go to state 134
    factor                         shift and go to state 84
    function_call                  shift and go to state 135

state 106

    (54) expression -> expression MINUS . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    term                           shift and go to state 136
    factor                         shift and go to state 84
    function_call                  shift and go to state 135

state 107

    (55) expression -> expression EQ . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    term                           shift and go to state 137
    factor                         shift and go to state 84
    function_call                  shift and go to state 135

state 108

    (56) expression -> expression NE . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    term                           shift and go to state 138
    factor                         shift and go to state 84
    function_call                  shift and go to state 135

state 109

    (57) expression -> expression LT . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    term                           shift and go to state 139
    factor                         shift and go to state 84
    function_call                  shift and go to state 135

state 110

    (58) expression -> expression LE . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    term                           shift and go to state 140
    factor                         shift and go to state 84
    function_call                  shift and go to state 135

state 111

    (59) expression -> expression GT . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    term                           shift and go to state 141
    factor                         shift and go to state 84
    function_call                  shift and go to state 135

state 112

    (60) expression -> expression GE . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    term                           shift and go to state 142
    factor                         shift and go to state 84
    function_call                  shift and go to state 135

state 113

    (61) expression -> expression AND . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    term                           shift and go to state 143
    factor                         shift and go to state 84
    function_call                  shift and go to state 135

state 114

    (62) expression -> expression OR . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    term                           shift and go to state 144
    factor                         shift and go to state 84
    function_call                  shift and go to state 135

state 115

    (66) term -> term TIMES . factor
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT
    (36) function_call -> . ID LPAREN arg_list RPAREN

    LPAREN          shift and go to state 79
    ID              shift and go to state 146
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    factor                         shift and go to state 145
    function_call                  shift and go to state 147

state 116

    (67) term -> term DIVIDE . factor
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT
    (36) function_call -> . ID LPAREN arg_list RPAREN

    LPAREN          shift and go to state 79
    ID              shift and go to state 146
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    factor                         shift and go to state 148
    function_call                  shift and go to state 147

state 117

    (72) factor -> ID LBRACKET . expression RBRACKET
    (53) expression -> . expression PLUS term
    (54) expression -> . expression MINUS term
    (55) expression -> . expression EQ term
    (56) expression -> . expression NE term
    (57) expression -> . expression LT term
    (58) expression -> . expression LE term
    (59) expression -> . expression GT term
    (60) expression -> . expression GE term
    (61) expression -> . expression AND term
    (62) expression -> . expression OR term
    (63) expression -> . term
    (64) expression -> . function_call
    (65) expression -> . STRING
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    STRING          shift and go to state 83
    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    expression                     shift and go to state 149
    term                           shift and go to state 81
    function_call                  shift and go to state 82
    factor                         shift and go to state 84

state 118

    (35) assignment -> ID LBRACKET expression RBRACKET . ASSIGN expression

    ASSIGN          shift and go to state 150


state 119

    (36) function_call -> ID LPAREN arg_list RPAREN .

    SEMICOLON       reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    EQ              reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    NE              reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    LT              reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    LE              reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    GT              reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    GE              reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    AND             reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    OR              reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    RBRACKET        reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)
    TO              reduce using rule 36 (function_call -> ID LPAREN arg_list RPAREN .)


state 120

    (37) arg_list -> arg_list COMMA . expression
    (53) expression -> . expression PLUS term
    (54) expression -> . expression MINUS term
    (55) expression -> . expression EQ term
    (56) expression -> . expression NE term
    (57) expression -> . expression LT term
    (58) expression -> . expression LE term
    (59) expression -> . expression GT term
    (60) expression -> . expression GE term
    (61) expression -> . expression AND term
    (62) expression -> . expression OR term
    (63) expression -> . term
    (64) expression -> . function_call
    (65) expression -> . STRING
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    STRING          shift and go to state 83
    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    expression                     shift and go to state 151
    term                           shift and go to state 81
    function_call                  shift and go to state 82
    factor                         shift and go to state 84

state 121

    (40) write_statement -> WRITE LPAREN write_list RPAREN .

    SEMICOLON       reduce using rule 40 (write_statement -> WRITE LPAREN write_list RPAREN .)


state 122

    (41) write_list -> write_list COMMA . expression
    (53) expression -> . expression PLUS term
    (54) expression -> . expression MINUS term
    (55) expression -> . expression EQ term
    (56) expression -> . expression NE term
    (57) expression -> . expression LT term
    (58) expression -> . expression LE term
    (59) expression -> . expression GT term
    (60) expression -> . expression GE term
    (61) expression -> . expression AND term
    (62) expression -> . expression OR term
    (63) expression -> . term
    (64) expression -> . function_call
    (65) expression -> . STRING
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    STRING          shift and go to state 83
    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    expression                     shift and go to state 152
    term                           shift and go to state 81
    function_call                  shift and go to state 82
    factor                         shift and go to state 84

state 123

    (43) write_list -> ID COMMA . expression
    (53) expression -> . expression PLUS term
    (54) expression -> . expression MINUS term
    (55) expression -> . expression EQ term
    (56) expression -> . expression NE term
    (57) expression -> . expression LT term
    (58) expression -> . expression LE term
    (59) expression -> . expression GT term
    (60) expression -> . expression GE term
    (61) expression -> . expression AND term
    (62) expression -> . expression OR term
    (63) expression -> . term
    (64) expression -> . function_call
    (65) expression -> . STRING
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    STRING          shift and go to state 83
    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    expression                     shift and go to state 153
    term                           shift and go to state 81
    function_call                  shift and go to state 82
    factor                         shift and go to state 84

state 124

    (44) if_statement -> IF LPAREN expression RPAREN . THEN LBRACE statement_list RBRACE
    (45) if_statement -> IF LPAREN expression RPAREN . THEN LBRACE return_statement RBRACE
    (46) if_statement -> IF LPAREN expression RPAREN . THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> IF LPAREN expression RPAREN . THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> IF LPAREN expression RPAREN . THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> IF LPAREN expression RPAREN . THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE

    THEN            shift and go to state 154


state 125

    (50) while_statement -> WHILE LPAREN expression RPAREN . DO LBRACE statement_list RBRACE

    DO              shift and go to state 155


state 126

    (51) for_statement -> FOR ID LBRACKET expression . TO expression RBRACKET DO LBRACE statement_list RBRACE
    (53) expression -> expression . PLUS term
    (54) expression -> expression . MINUS term
    (55) expression -> expression . EQ term
    (56) expression -> expression . NE term
    (57) expression -> expression . LT term
    (58) expression -> expression . LE term
    (59) expression -> expression . GT term
    (60) expression -> expression . GE term
    (61) expression -> expression . AND term
    (62) expression -> expression . OR term

    TO              shift and go to state 156
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    EQ              shift and go to state 107
    NE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 127

    (14) function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE . statement_list RBRACE
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement_list return_statement
    (24) statement_list -> . statement
    (25) statement_list -> . return_statement
    (26) statement_list -> . empty
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (76) empty -> .
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    RETURN          shift and go to state 48
    RBRACE          reduce using rule 76 (empty -> .)
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

  ! RETURN          [ reduce using rule 76 (empty -> .) ]
  ! ID              [ reduce using rule 76 (empty -> .) ]
  ! READ            [ reduce using rule 76 (empty -> .) ]
  ! WRITE           [ reduce using rule 76 (empty -> .) ]
  ! IF              [ reduce using rule 76 (empty -> .) ]
  ! WHILE           [ reduce using rule 76 (empty -> .) ]
  ! FOR             [ reduce using rule 76 (empty -> .) ]

    statement_list                 shift and go to state 157
    statement                      shift and go to state 38
    return_statement               shift and go to state 39
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 128

    (15) function -> FUNCTION type ID LPAREN param_list RPAREN LBRACE statement_list . RBRACE
    (22) statement_list -> statement_list . statement
    (23) statement_list -> statement_list . return_statement
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 158
    RETURN          shift and go to state 48
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

    statement                      shift and go to state 60
    return_statement               shift and go to state 61
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 129

    (18) param_list -> param_list COMMA type ID .

    RPAREN          reduce using rule 18 (param_list -> param_list COMMA type ID .)
    COMMA           reduce using rule 18 (param_list -> param_list COMMA type ID .)


state 130

    (16) function -> FUNCTION VOID ID LPAREN param_list RPAREN vars LBRACE . statement_list RBRACE
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement_list return_statement
    (24) statement_list -> . statement
    (25) statement_list -> . return_statement
    (26) statement_list -> . empty
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (76) empty -> .
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    RETURN          shift and go to state 48
    RBRACE          reduce using rule 76 (empty -> .)
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

  ! RETURN          [ reduce using rule 76 (empty -> .) ]
  ! ID              [ reduce using rule 76 (empty -> .) ]
  ! READ            [ reduce using rule 76 (empty -> .) ]
  ! WRITE           [ reduce using rule 76 (empty -> .) ]
  ! IF              [ reduce using rule 76 (empty -> .) ]
  ! WHILE           [ reduce using rule 76 (empty -> .) ]
  ! FOR             [ reduce using rule 76 (empty -> .) ]

    statement_list                 shift and go to state 159
    statement                      shift and go to state 38
    return_statement               shift and go to state 39
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 131

    (17) function -> FUNCTION VOID ID LPAREN param_list RPAREN LBRACE statement_list . RBRACE
    (22) statement_list -> statement_list . statement
    (23) statement_list -> statement_list . return_statement
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 160
    RETURN          shift and go to state 48
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

    statement                      shift and go to state 60
    return_statement               shift and go to state 61
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 132

    (70) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 70 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 70 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 70 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 70 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 70 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 70 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 70 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 70 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 70 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 70 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 70 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 70 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 70 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 70 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 70 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 70 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 70 (factor -> LPAREN expression RPAREN .)


state 133

    (52) return_statement -> RETURN LPAREN expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 52 (return_statement -> RETURN LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 52 (return_statement -> RETURN LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 52 (return_statement -> RETURN LPAREN expression RPAREN SEMICOLON .)
    READ            reduce using rule 52 (return_statement -> RETURN LPAREN expression RPAREN SEMICOLON .)
    WRITE           reduce using rule 52 (return_statement -> RETURN LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 52 (return_statement -> RETURN LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 52 (return_statement -> RETURN LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 52 (return_statement -> RETURN LPAREN expression RPAREN SEMICOLON .)


state 134

    (53) expression -> expression PLUS term .
    (66) term -> term . TIMES factor
    (67) term -> term . DIVIDE factor

    RPAREN          reduce using rule 53 (expression -> expression PLUS term .)
    PLUS            reduce using rule 53 (expression -> expression PLUS term .)
    MINUS           reduce using rule 53 (expression -> expression PLUS term .)
    EQ              reduce using rule 53 (expression -> expression PLUS term .)
    NE              reduce using rule 53 (expression -> expression PLUS term .)
    LT              reduce using rule 53 (expression -> expression PLUS term .)
    LE              reduce using rule 53 (expression -> expression PLUS term .)
    GT              reduce using rule 53 (expression -> expression PLUS term .)
    GE              reduce using rule 53 (expression -> expression PLUS term .)
    AND             reduce using rule 53 (expression -> expression PLUS term .)
    OR              reduce using rule 53 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 53 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 53 (expression -> expression PLUS term .)
    COMMA           reduce using rule 53 (expression -> expression PLUS term .)
    TO              reduce using rule 53 (expression -> expression PLUS term .)
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116


state 135

    (68) term -> function_call .
    (74) factor -> function_call .

  ! reduce/reduce conflict for TIMES resolved using rule 68 (term -> function_call .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 68 (term -> function_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 68 (term -> function_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 68 (term -> function_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 68 (term -> function_call .)
  ! reduce/reduce conflict for EQ resolved using rule 68 (term -> function_call .)
  ! reduce/reduce conflict for NE resolved using rule 68 (term -> function_call .)
  ! reduce/reduce conflict for LT resolved using rule 68 (term -> function_call .)
  ! reduce/reduce conflict for LE resolved using rule 68 (term -> function_call .)
  ! reduce/reduce conflict for GT resolved using rule 68 (term -> function_call .)
  ! reduce/reduce conflict for GE resolved using rule 68 (term -> function_call .)
  ! reduce/reduce conflict for AND resolved using rule 68 (term -> function_call .)
  ! reduce/reduce conflict for OR resolved using rule 68 (term -> function_call .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 68 (term -> function_call .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 68 (term -> function_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 68 (term -> function_call .)
  ! reduce/reduce conflict for TO resolved using rule 68 (term -> function_call .)
    TIMES           reduce using rule 68 (term -> function_call .)
    DIVIDE          reduce using rule 68 (term -> function_call .)
    RPAREN          reduce using rule 68 (term -> function_call .)
    PLUS            reduce using rule 68 (term -> function_call .)
    MINUS           reduce using rule 68 (term -> function_call .)
    EQ              reduce using rule 68 (term -> function_call .)
    NE              reduce using rule 68 (term -> function_call .)
    LT              reduce using rule 68 (term -> function_call .)
    LE              reduce using rule 68 (term -> function_call .)
    GT              reduce using rule 68 (term -> function_call .)
    GE              reduce using rule 68 (term -> function_call .)
    AND             reduce using rule 68 (term -> function_call .)
    OR              reduce using rule 68 (term -> function_call .)
    SEMICOLON       reduce using rule 68 (term -> function_call .)
    RBRACKET        reduce using rule 68 (term -> function_call .)
    COMMA           reduce using rule 68 (term -> function_call .)
    TO              reduce using rule 68 (term -> function_call .)

  ! TIMES           [ reduce using rule 74 (factor -> function_call .) ]
  ! DIVIDE          [ reduce using rule 74 (factor -> function_call .) ]
  ! RPAREN          [ reduce using rule 74 (factor -> function_call .) ]
  ! PLUS            [ reduce using rule 74 (factor -> function_call .) ]
  ! MINUS           [ reduce using rule 74 (factor -> function_call .) ]
  ! EQ              [ reduce using rule 74 (factor -> function_call .) ]
  ! NE              [ reduce using rule 74 (factor -> function_call .) ]
  ! LT              [ reduce using rule 74 (factor -> function_call .) ]
  ! LE              [ reduce using rule 74 (factor -> function_call .) ]
  ! GT              [ reduce using rule 74 (factor -> function_call .) ]
  ! GE              [ reduce using rule 74 (factor -> function_call .) ]
  ! AND             [ reduce using rule 74 (factor -> function_call .) ]
  ! OR              [ reduce using rule 74 (factor -> function_call .) ]
  ! SEMICOLON       [ reduce using rule 74 (factor -> function_call .) ]
  ! RBRACKET        [ reduce using rule 74 (factor -> function_call .) ]
  ! COMMA           [ reduce using rule 74 (factor -> function_call .) ]
  ! TO              [ reduce using rule 74 (factor -> function_call .) ]


state 136

    (54) expression -> expression MINUS term .
    (66) term -> term . TIMES factor
    (67) term -> term . DIVIDE factor

    RPAREN          reduce using rule 54 (expression -> expression MINUS term .)
    PLUS            reduce using rule 54 (expression -> expression MINUS term .)
    MINUS           reduce using rule 54 (expression -> expression MINUS term .)
    EQ              reduce using rule 54 (expression -> expression MINUS term .)
    NE              reduce using rule 54 (expression -> expression MINUS term .)
    LT              reduce using rule 54 (expression -> expression MINUS term .)
    LE              reduce using rule 54 (expression -> expression MINUS term .)
    GT              reduce using rule 54 (expression -> expression MINUS term .)
    GE              reduce using rule 54 (expression -> expression MINUS term .)
    AND             reduce using rule 54 (expression -> expression MINUS term .)
    OR              reduce using rule 54 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 54 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 54 (expression -> expression MINUS term .)
    COMMA           reduce using rule 54 (expression -> expression MINUS term .)
    TO              reduce using rule 54 (expression -> expression MINUS term .)
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116


state 137

    (55) expression -> expression EQ term .
    (66) term -> term . TIMES factor
    (67) term -> term . DIVIDE factor

    RPAREN          reduce using rule 55 (expression -> expression EQ term .)
    PLUS            reduce using rule 55 (expression -> expression EQ term .)
    MINUS           reduce using rule 55 (expression -> expression EQ term .)
    EQ              reduce using rule 55 (expression -> expression EQ term .)
    NE              reduce using rule 55 (expression -> expression EQ term .)
    LT              reduce using rule 55 (expression -> expression EQ term .)
    LE              reduce using rule 55 (expression -> expression EQ term .)
    GT              reduce using rule 55 (expression -> expression EQ term .)
    GE              reduce using rule 55 (expression -> expression EQ term .)
    AND             reduce using rule 55 (expression -> expression EQ term .)
    OR              reduce using rule 55 (expression -> expression EQ term .)
    SEMICOLON       reduce using rule 55 (expression -> expression EQ term .)
    RBRACKET        reduce using rule 55 (expression -> expression EQ term .)
    COMMA           reduce using rule 55 (expression -> expression EQ term .)
    TO              reduce using rule 55 (expression -> expression EQ term .)
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116


state 138

    (56) expression -> expression NE term .
    (66) term -> term . TIMES factor
    (67) term -> term . DIVIDE factor

    RPAREN          reduce using rule 56 (expression -> expression NE term .)
    PLUS            reduce using rule 56 (expression -> expression NE term .)
    MINUS           reduce using rule 56 (expression -> expression NE term .)
    EQ              reduce using rule 56 (expression -> expression NE term .)
    NE              reduce using rule 56 (expression -> expression NE term .)
    LT              reduce using rule 56 (expression -> expression NE term .)
    LE              reduce using rule 56 (expression -> expression NE term .)
    GT              reduce using rule 56 (expression -> expression NE term .)
    GE              reduce using rule 56 (expression -> expression NE term .)
    AND             reduce using rule 56 (expression -> expression NE term .)
    OR              reduce using rule 56 (expression -> expression NE term .)
    SEMICOLON       reduce using rule 56 (expression -> expression NE term .)
    RBRACKET        reduce using rule 56 (expression -> expression NE term .)
    COMMA           reduce using rule 56 (expression -> expression NE term .)
    TO              reduce using rule 56 (expression -> expression NE term .)
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116


state 139

    (57) expression -> expression LT term .
    (66) term -> term . TIMES factor
    (67) term -> term . DIVIDE factor

    RPAREN          reduce using rule 57 (expression -> expression LT term .)
    PLUS            reduce using rule 57 (expression -> expression LT term .)
    MINUS           reduce using rule 57 (expression -> expression LT term .)
    EQ              reduce using rule 57 (expression -> expression LT term .)
    NE              reduce using rule 57 (expression -> expression LT term .)
    LT              reduce using rule 57 (expression -> expression LT term .)
    LE              reduce using rule 57 (expression -> expression LT term .)
    GT              reduce using rule 57 (expression -> expression LT term .)
    GE              reduce using rule 57 (expression -> expression LT term .)
    AND             reduce using rule 57 (expression -> expression LT term .)
    OR              reduce using rule 57 (expression -> expression LT term .)
    SEMICOLON       reduce using rule 57 (expression -> expression LT term .)
    RBRACKET        reduce using rule 57 (expression -> expression LT term .)
    COMMA           reduce using rule 57 (expression -> expression LT term .)
    TO              reduce using rule 57 (expression -> expression LT term .)
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116


state 140

    (58) expression -> expression LE term .
    (66) term -> term . TIMES factor
    (67) term -> term . DIVIDE factor

    RPAREN          reduce using rule 58 (expression -> expression LE term .)
    PLUS            reduce using rule 58 (expression -> expression LE term .)
    MINUS           reduce using rule 58 (expression -> expression LE term .)
    EQ              reduce using rule 58 (expression -> expression LE term .)
    NE              reduce using rule 58 (expression -> expression LE term .)
    LT              reduce using rule 58 (expression -> expression LE term .)
    LE              reduce using rule 58 (expression -> expression LE term .)
    GT              reduce using rule 58 (expression -> expression LE term .)
    GE              reduce using rule 58 (expression -> expression LE term .)
    AND             reduce using rule 58 (expression -> expression LE term .)
    OR              reduce using rule 58 (expression -> expression LE term .)
    SEMICOLON       reduce using rule 58 (expression -> expression LE term .)
    RBRACKET        reduce using rule 58 (expression -> expression LE term .)
    COMMA           reduce using rule 58 (expression -> expression LE term .)
    TO              reduce using rule 58 (expression -> expression LE term .)
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116


state 141

    (59) expression -> expression GT term .
    (66) term -> term . TIMES factor
    (67) term -> term . DIVIDE factor

    RPAREN          reduce using rule 59 (expression -> expression GT term .)
    PLUS            reduce using rule 59 (expression -> expression GT term .)
    MINUS           reduce using rule 59 (expression -> expression GT term .)
    EQ              reduce using rule 59 (expression -> expression GT term .)
    NE              reduce using rule 59 (expression -> expression GT term .)
    LT              reduce using rule 59 (expression -> expression GT term .)
    LE              reduce using rule 59 (expression -> expression GT term .)
    GT              reduce using rule 59 (expression -> expression GT term .)
    GE              reduce using rule 59 (expression -> expression GT term .)
    AND             reduce using rule 59 (expression -> expression GT term .)
    OR              reduce using rule 59 (expression -> expression GT term .)
    SEMICOLON       reduce using rule 59 (expression -> expression GT term .)
    RBRACKET        reduce using rule 59 (expression -> expression GT term .)
    COMMA           reduce using rule 59 (expression -> expression GT term .)
    TO              reduce using rule 59 (expression -> expression GT term .)
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116


state 142

    (60) expression -> expression GE term .
    (66) term -> term . TIMES factor
    (67) term -> term . DIVIDE factor

    RPAREN          reduce using rule 60 (expression -> expression GE term .)
    PLUS            reduce using rule 60 (expression -> expression GE term .)
    MINUS           reduce using rule 60 (expression -> expression GE term .)
    EQ              reduce using rule 60 (expression -> expression GE term .)
    NE              reduce using rule 60 (expression -> expression GE term .)
    LT              reduce using rule 60 (expression -> expression GE term .)
    LE              reduce using rule 60 (expression -> expression GE term .)
    GT              reduce using rule 60 (expression -> expression GE term .)
    GE              reduce using rule 60 (expression -> expression GE term .)
    AND             reduce using rule 60 (expression -> expression GE term .)
    OR              reduce using rule 60 (expression -> expression GE term .)
    SEMICOLON       reduce using rule 60 (expression -> expression GE term .)
    RBRACKET        reduce using rule 60 (expression -> expression GE term .)
    COMMA           reduce using rule 60 (expression -> expression GE term .)
    TO              reduce using rule 60 (expression -> expression GE term .)
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116


state 143

    (61) expression -> expression AND term .
    (66) term -> term . TIMES factor
    (67) term -> term . DIVIDE factor

    RPAREN          reduce using rule 61 (expression -> expression AND term .)
    PLUS            reduce using rule 61 (expression -> expression AND term .)
    MINUS           reduce using rule 61 (expression -> expression AND term .)
    EQ              reduce using rule 61 (expression -> expression AND term .)
    NE              reduce using rule 61 (expression -> expression AND term .)
    LT              reduce using rule 61 (expression -> expression AND term .)
    LE              reduce using rule 61 (expression -> expression AND term .)
    GT              reduce using rule 61 (expression -> expression AND term .)
    GE              reduce using rule 61 (expression -> expression AND term .)
    AND             reduce using rule 61 (expression -> expression AND term .)
    OR              reduce using rule 61 (expression -> expression AND term .)
    SEMICOLON       reduce using rule 61 (expression -> expression AND term .)
    RBRACKET        reduce using rule 61 (expression -> expression AND term .)
    COMMA           reduce using rule 61 (expression -> expression AND term .)
    TO              reduce using rule 61 (expression -> expression AND term .)
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116


state 144

    (62) expression -> expression OR term .
    (66) term -> term . TIMES factor
    (67) term -> term . DIVIDE factor

    RPAREN          reduce using rule 62 (expression -> expression OR term .)
    PLUS            reduce using rule 62 (expression -> expression OR term .)
    MINUS           reduce using rule 62 (expression -> expression OR term .)
    EQ              reduce using rule 62 (expression -> expression OR term .)
    NE              reduce using rule 62 (expression -> expression OR term .)
    LT              reduce using rule 62 (expression -> expression OR term .)
    LE              reduce using rule 62 (expression -> expression OR term .)
    GT              reduce using rule 62 (expression -> expression OR term .)
    GE              reduce using rule 62 (expression -> expression OR term .)
    AND             reduce using rule 62 (expression -> expression OR term .)
    OR              reduce using rule 62 (expression -> expression OR term .)
    SEMICOLON       reduce using rule 62 (expression -> expression OR term .)
    RBRACKET        reduce using rule 62 (expression -> expression OR term .)
    COMMA           reduce using rule 62 (expression -> expression OR term .)
    TO              reduce using rule 62 (expression -> expression OR term .)
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116


state 145

    (66) term -> term TIMES factor .

    TIMES           reduce using rule 66 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 66 (term -> term TIMES factor .)
    RPAREN          reduce using rule 66 (term -> term TIMES factor .)
    PLUS            reduce using rule 66 (term -> term TIMES factor .)
    MINUS           reduce using rule 66 (term -> term TIMES factor .)
    EQ              reduce using rule 66 (term -> term TIMES factor .)
    NE              reduce using rule 66 (term -> term TIMES factor .)
    LT              reduce using rule 66 (term -> term TIMES factor .)
    LE              reduce using rule 66 (term -> term TIMES factor .)
    GT              reduce using rule 66 (term -> term TIMES factor .)
    GE              reduce using rule 66 (term -> term TIMES factor .)
    AND             reduce using rule 66 (term -> term TIMES factor .)
    OR              reduce using rule 66 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 66 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 66 (term -> term TIMES factor .)
    COMMA           reduce using rule 66 (term -> term TIMES factor .)
    TO              reduce using rule 66 (term -> term TIMES factor .)


state 146

    (71) factor -> ID .
    (72) factor -> ID . LBRACKET expression RBRACKET
    (36) function_call -> ID . LPAREN arg_list RPAREN

    TIMES           reduce using rule 71 (factor -> ID .)
    DIVIDE          reduce using rule 71 (factor -> ID .)
    RPAREN          reduce using rule 71 (factor -> ID .)
    PLUS            reduce using rule 71 (factor -> ID .)
    MINUS           reduce using rule 71 (factor -> ID .)
    EQ              reduce using rule 71 (factor -> ID .)
    NE              reduce using rule 71 (factor -> ID .)
    LT              reduce using rule 71 (factor -> ID .)
    LE              reduce using rule 71 (factor -> ID .)
    GT              reduce using rule 71 (factor -> ID .)
    GE              reduce using rule 71 (factor -> ID .)
    AND             reduce using rule 71 (factor -> ID .)
    OR              reduce using rule 71 (factor -> ID .)
    SEMICOLON       reduce using rule 71 (factor -> ID .)
    RBRACKET        reduce using rule 71 (factor -> ID .)
    COMMA           reduce using rule 71 (factor -> ID .)
    TO              reduce using rule 71 (factor -> ID .)
    LBRACKET        shift and go to state 117
    LPAREN          shift and go to state 69


state 147

    (74) factor -> function_call .

    TIMES           reduce using rule 74 (factor -> function_call .)
    DIVIDE          reduce using rule 74 (factor -> function_call .)
    RPAREN          reduce using rule 74 (factor -> function_call .)
    PLUS            reduce using rule 74 (factor -> function_call .)
    MINUS           reduce using rule 74 (factor -> function_call .)
    EQ              reduce using rule 74 (factor -> function_call .)
    NE              reduce using rule 74 (factor -> function_call .)
    LT              reduce using rule 74 (factor -> function_call .)
    LE              reduce using rule 74 (factor -> function_call .)
    GT              reduce using rule 74 (factor -> function_call .)
    GE              reduce using rule 74 (factor -> function_call .)
    AND             reduce using rule 74 (factor -> function_call .)
    OR              reduce using rule 74 (factor -> function_call .)
    SEMICOLON       reduce using rule 74 (factor -> function_call .)
    RBRACKET        reduce using rule 74 (factor -> function_call .)
    COMMA           reduce using rule 74 (factor -> function_call .)
    TO              reduce using rule 74 (factor -> function_call .)


state 148

    (67) term -> term DIVIDE factor .

    TIMES           reduce using rule 67 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 67 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 67 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 67 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 67 (term -> term DIVIDE factor .)
    EQ              reduce using rule 67 (term -> term DIVIDE factor .)
    NE              reduce using rule 67 (term -> term DIVIDE factor .)
    LT              reduce using rule 67 (term -> term DIVIDE factor .)
    LE              reduce using rule 67 (term -> term DIVIDE factor .)
    GT              reduce using rule 67 (term -> term DIVIDE factor .)
    GE              reduce using rule 67 (term -> term DIVIDE factor .)
    AND             reduce using rule 67 (term -> term DIVIDE factor .)
    OR              reduce using rule 67 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 67 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 67 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 67 (term -> term DIVIDE factor .)
    TO              reduce using rule 67 (term -> term DIVIDE factor .)


state 149

    (72) factor -> ID LBRACKET expression . RBRACKET
    (53) expression -> expression . PLUS term
    (54) expression -> expression . MINUS term
    (55) expression -> expression . EQ term
    (56) expression -> expression . NE term
    (57) expression -> expression . LT term
    (58) expression -> expression . LE term
    (59) expression -> expression . GT term
    (60) expression -> expression . GE term
    (61) expression -> expression . AND term
    (62) expression -> expression . OR term

    RBRACKET        shift and go to state 161
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    EQ              shift and go to state 107
    NE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 150

    (35) assignment -> ID LBRACKET expression RBRACKET ASSIGN . expression
    (53) expression -> . expression PLUS term
    (54) expression -> . expression MINUS term
    (55) expression -> . expression EQ term
    (56) expression -> . expression NE term
    (57) expression -> . expression LT term
    (58) expression -> . expression LE term
    (59) expression -> . expression GT term
    (60) expression -> . expression GE term
    (61) expression -> . expression AND term
    (62) expression -> . expression OR term
    (63) expression -> . term
    (64) expression -> . function_call
    (65) expression -> . STRING
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    STRING          shift and go to state 83
    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    expression                     shift and go to state 162
    term                           shift and go to state 81
    function_call                  shift and go to state 82
    factor                         shift and go to state 84

state 151

    (37) arg_list -> arg_list COMMA expression .
    (53) expression -> expression . PLUS term
    (54) expression -> expression . MINUS term
    (55) expression -> expression . EQ term
    (56) expression -> expression . NE term
    (57) expression -> expression . LT term
    (58) expression -> expression . LE term
    (59) expression -> expression . GT term
    (60) expression -> expression . GE term
    (61) expression -> expression . AND term
    (62) expression -> expression . OR term

    RPAREN          reduce using rule 37 (arg_list -> arg_list COMMA expression .)
    COMMA           reduce using rule 37 (arg_list -> arg_list COMMA expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    EQ              shift and go to state 107
    NE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 152

    (41) write_list -> write_list COMMA expression .
    (53) expression -> expression . PLUS term
    (54) expression -> expression . MINUS term
    (55) expression -> expression . EQ term
    (56) expression -> expression . NE term
    (57) expression -> expression . LT term
    (58) expression -> expression . LE term
    (59) expression -> expression . GT term
    (60) expression -> expression . GE term
    (61) expression -> expression . AND term
    (62) expression -> expression . OR term

    RPAREN          reduce using rule 41 (write_list -> write_list COMMA expression .)
    COMMA           reduce using rule 41 (write_list -> write_list COMMA expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    EQ              shift and go to state 107
    NE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 153

    (43) write_list -> ID COMMA expression .
    (53) expression -> expression . PLUS term
    (54) expression -> expression . MINUS term
    (55) expression -> expression . EQ term
    (56) expression -> expression . NE term
    (57) expression -> expression . LT term
    (58) expression -> expression . LE term
    (59) expression -> expression . GT term
    (60) expression -> expression . GE term
    (61) expression -> expression . AND term
    (62) expression -> expression . OR term

    RPAREN          reduce using rule 43 (write_list -> ID COMMA expression .)
    COMMA           reduce using rule 43 (write_list -> ID COMMA expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    EQ              shift and go to state 107
    NE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 154

    (44) if_statement -> IF LPAREN expression RPAREN THEN . LBRACE statement_list RBRACE
    (45) if_statement -> IF LPAREN expression RPAREN THEN . LBRACE return_statement RBRACE
    (46) if_statement -> IF LPAREN expression RPAREN THEN . LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> IF LPAREN expression RPAREN THEN . LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> IF LPAREN expression RPAREN THEN . LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> IF LPAREN expression RPAREN THEN . LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE

    LBRACE          shift and go to state 163


state 155

    (50) while_statement -> WHILE LPAREN expression RPAREN DO . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 164


state 156

    (51) for_statement -> FOR ID LBRACKET expression TO . expression RBRACKET DO LBRACE statement_list RBRACE
    (53) expression -> . expression PLUS term
    (54) expression -> . expression MINUS term
    (55) expression -> . expression EQ term
    (56) expression -> . expression NE term
    (57) expression -> . expression LT term
    (58) expression -> . expression LE term
    (59) expression -> . expression GT term
    (60) expression -> . expression GE term
    (61) expression -> . expression AND term
    (62) expression -> . expression OR term
    (63) expression -> . term
    (64) expression -> . function_call
    (65) expression -> . STRING
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . function_call
    (69) term -> . factor
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (70) factor -> . LPAREN expression RPAREN
    (71) factor -> . ID
    (72) factor -> . ID LBRACKET expression RBRACKET
    (73) factor -> . INTEGER
    (74) factor -> . function_call
    (75) factor -> . FLOATING_POINT

    STRING          shift and go to state 83
    ID              shift and go to state 85
    LPAREN          shift and go to state 79
    INTEGER         shift and go to state 86
    FLOATING_POINT  shift and go to state 87

    expression                     shift and go to state 165
    term                           shift and go to state 81
    function_call                  shift and go to state 82
    factor                         shift and go to state 84

state 157

    (14) function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list . RBRACE
    (22) statement_list -> statement_list . statement
    (23) statement_list -> statement_list . return_statement
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 166
    RETURN          shift and go to state 48
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

    statement                      shift and go to state 60
    return_statement               shift and go to state 61
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 158

    (15) function -> FUNCTION type ID LPAREN param_list RPAREN LBRACE statement_list RBRACE .

    MAIN            reduce using rule 15 (function -> FUNCTION type ID LPAREN param_list RPAREN LBRACE statement_list RBRACE .)
    FUNCTION        reduce using rule 15 (function -> FUNCTION type ID LPAREN param_list RPAREN LBRACE statement_list RBRACE .)


state 159

    (16) function -> FUNCTION VOID ID LPAREN param_list RPAREN vars LBRACE statement_list . RBRACE
    (22) statement_list -> statement_list . statement
    (23) statement_list -> statement_list . return_statement
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 167
    RETURN          shift and go to state 48
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

    statement                      shift and go to state 60
    return_statement               shift and go to state 61
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 160

    (17) function -> FUNCTION VOID ID LPAREN param_list RPAREN LBRACE statement_list RBRACE .

    MAIN            reduce using rule 17 (function -> FUNCTION VOID ID LPAREN param_list RPAREN LBRACE statement_list RBRACE .)
    FUNCTION        reduce using rule 17 (function -> FUNCTION VOID ID LPAREN param_list RPAREN LBRACE statement_list RBRACE .)


state 161

    (72) factor -> ID LBRACKET expression RBRACKET .

    TIMES           reduce using rule 72 (factor -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 72 (factor -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 72 (factor -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 72 (factor -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 72 (factor -> ID LBRACKET expression RBRACKET .)
    EQ              reduce using rule 72 (factor -> ID LBRACKET expression RBRACKET .)
    NE              reduce using rule 72 (factor -> ID LBRACKET expression RBRACKET .)
    LT              reduce using rule 72 (factor -> ID LBRACKET expression RBRACKET .)
    LE              reduce using rule 72 (factor -> ID LBRACKET expression RBRACKET .)
    GT              reduce using rule 72 (factor -> ID LBRACKET expression RBRACKET .)
    GE              reduce using rule 72 (factor -> ID LBRACKET expression RBRACKET .)
    AND             reduce using rule 72 (factor -> ID LBRACKET expression RBRACKET .)
    OR              reduce using rule 72 (factor -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 72 (factor -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 72 (factor -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 72 (factor -> ID LBRACKET expression RBRACKET .)
    TO              reduce using rule 72 (factor -> ID LBRACKET expression RBRACKET .)


state 162

    (35) assignment -> ID LBRACKET expression RBRACKET ASSIGN expression .
    (53) expression -> expression . PLUS term
    (54) expression -> expression . MINUS term
    (55) expression -> expression . EQ term
    (56) expression -> expression . NE term
    (57) expression -> expression . LT term
    (58) expression -> expression . LE term
    (59) expression -> expression . GT term
    (60) expression -> expression . GE term
    (61) expression -> expression . AND term
    (62) expression -> expression . OR term

    SEMICOLON       reduce using rule 35 (assignment -> ID LBRACKET expression RBRACKET ASSIGN expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    EQ              shift and go to state 107
    NE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 163

    (44) if_statement -> IF LPAREN expression RPAREN THEN LBRACE . statement_list RBRACE
    (45) if_statement -> IF LPAREN expression RPAREN THEN LBRACE . return_statement RBRACE
    (46) if_statement -> IF LPAREN expression RPAREN THEN LBRACE . statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> IF LPAREN expression RPAREN THEN LBRACE . return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> IF LPAREN expression RPAREN THEN LBRACE . statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> IF LPAREN expression RPAREN THEN LBRACE . return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement_list return_statement
    (24) statement_list -> . statement
    (25) statement_list -> . return_statement
    (26) statement_list -> . empty
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (76) empty -> .
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    RETURN          shift and go to state 48
    RBRACE          reduce using rule 76 (empty -> .)
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

  ! RETURN          [ reduce using rule 76 (empty -> .) ]
  ! ID              [ reduce using rule 76 (empty -> .) ]
  ! READ            [ reduce using rule 76 (empty -> .) ]
  ! WRITE           [ reduce using rule 76 (empty -> .) ]
  ! IF              [ reduce using rule 76 (empty -> .) ]
  ! WHILE           [ reduce using rule 76 (empty -> .) ]
  ! FOR             [ reduce using rule 76 (empty -> .) ]

    statement_list                 shift and go to state 168
    return_statement               shift and go to state 169
    statement                      shift and go to state 38
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 164

    (50) while_statement -> WHILE LPAREN expression RPAREN DO LBRACE . statement_list RBRACE
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement_list return_statement
    (24) statement_list -> . statement
    (25) statement_list -> . return_statement
    (26) statement_list -> . empty
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (76) empty -> .
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    RETURN          shift and go to state 48
    RBRACE          reduce using rule 76 (empty -> .)
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

  ! RETURN          [ reduce using rule 76 (empty -> .) ]
  ! ID              [ reduce using rule 76 (empty -> .) ]
  ! READ            [ reduce using rule 76 (empty -> .) ]
  ! WRITE           [ reduce using rule 76 (empty -> .) ]
  ! IF              [ reduce using rule 76 (empty -> .) ]
  ! WHILE           [ reduce using rule 76 (empty -> .) ]
  ! FOR             [ reduce using rule 76 (empty -> .) ]

    statement_list                 shift and go to state 170
    statement                      shift and go to state 38
    return_statement               shift and go to state 39
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 165

    (51) for_statement -> FOR ID LBRACKET expression TO expression . RBRACKET DO LBRACE statement_list RBRACE
    (53) expression -> expression . PLUS term
    (54) expression -> expression . MINUS term
    (55) expression -> expression . EQ term
    (56) expression -> expression . NE term
    (57) expression -> expression . LT term
    (58) expression -> expression . LE term
    (59) expression -> expression . GT term
    (60) expression -> expression . GE term
    (61) expression -> expression . AND term
    (62) expression -> expression . OR term

    RBRACKET        shift and go to state 171
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    EQ              shift and go to state 107
    NE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 166

    (14) function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list RBRACE .

    MAIN            reduce using rule 14 (function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list RBRACE .)
    FUNCTION        reduce using rule 14 (function -> FUNCTION type ID LPAREN param_list RPAREN vars LBRACE statement_list RBRACE .)


state 167

    (16) function -> FUNCTION VOID ID LPAREN param_list RPAREN vars LBRACE statement_list RBRACE .

    MAIN            reduce using rule 16 (function -> FUNCTION VOID ID LPAREN param_list RPAREN vars LBRACE statement_list RBRACE .)
    FUNCTION        reduce using rule 16 (function -> FUNCTION VOID ID LPAREN param_list RPAREN vars LBRACE statement_list RBRACE .)


state 168

    (44) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list . RBRACE
    (46) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list . RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list . RBRACE ELSE LBRACE return_statement RBRACE
    (22) statement_list -> statement_list . statement
    (23) statement_list -> statement_list . return_statement
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 172
    RETURN          shift and go to state 48
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

    return_statement               shift and go to state 61
    statement                      shift and go to state 60
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 169

    (45) if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement . RBRACE
    (47) if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement . RBRACE ELSE LBRACE statement_list RBRACE
    (49) if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement . RBRACE ELSE LBRACE return_statement RBRACE
    (25) statement_list -> return_statement .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 173
    RETURN          reduce using rule 25 (statement_list -> return_statement .)
    ID              reduce using rule 25 (statement_list -> return_statement .)
    READ            reduce using rule 25 (statement_list -> return_statement .)
    WRITE           reduce using rule 25 (statement_list -> return_statement .)
    IF              reduce using rule 25 (statement_list -> return_statement .)
    WHILE           reduce using rule 25 (statement_list -> return_statement .)
    FOR             reduce using rule 25 (statement_list -> return_statement .)

  ! RBRACE          [ reduce using rule 25 (statement_list -> return_statement .) ]


state 170

    (50) while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list . RBRACE
    (22) statement_list -> statement_list . statement
    (23) statement_list -> statement_list . return_statement
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 174
    RETURN          shift and go to state 48
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

    statement                      shift and go to state 60
    return_statement               shift and go to state 61
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 171

    (51) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET . DO LBRACE statement_list RBRACE

    DO              shift and go to state 175


state 172

    (44) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .
    (46) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE . ELSE LBRACE statement_list RBRACE
    (48) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE . ELSE LBRACE return_statement RBRACE

    RBRACE          reduce using rule 44 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 44 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    ID              reduce using rule 44 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    READ            reduce using rule 44 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 44 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    IF              reduce using rule 44 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 44 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    FOR             reduce using rule 44 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE .)
    ELSE            shift and go to state 176


state 173

    (45) if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE .
    (47) if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE . ELSE LBRACE statement_list RBRACE
    (49) if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE . ELSE LBRACE return_statement RBRACE

    RBRACE          reduce using rule 45 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE .)
    RETURN          reduce using rule 45 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE .)
    ID              reduce using rule 45 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE .)
    READ            reduce using rule 45 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE .)
    WRITE           reduce using rule 45 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE .)
    IF              reduce using rule 45 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE .)
    WHILE           reduce using rule 45 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE .)
    FOR             reduce using rule 45 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE .)
    ELSE            shift and go to state 177


state 174

    (50) while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 50 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 50 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    ID              reduce using rule 50 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    READ            reduce using rule 50 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 50 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    IF              reduce using rule 50 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 50 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)
    FOR             reduce using rule 50 (while_statement -> WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE .)


state 175

    (51) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 178


state 176

    (46) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE . LBRACE statement_list RBRACE
    (48) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE . LBRACE return_statement RBRACE

    LBRACE          shift and go to state 179


state 177

    (47) if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE . LBRACE statement_list RBRACE
    (49) if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE . LBRACE return_statement RBRACE

    LBRACE          shift and go to state 180


state 178

    (51) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE . statement_list RBRACE
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement_list return_statement
    (24) statement_list -> . statement
    (25) statement_list -> . return_statement
    (26) statement_list -> . empty
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (76) empty -> .
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    RETURN          shift and go to state 48
    RBRACE          reduce using rule 76 (empty -> .)
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

  ! RETURN          [ reduce using rule 76 (empty -> .) ]
  ! ID              [ reduce using rule 76 (empty -> .) ]
  ! READ            [ reduce using rule 76 (empty -> .) ]
  ! WRITE           [ reduce using rule 76 (empty -> .) ]
  ! IF              [ reduce using rule 76 (empty -> .) ]
  ! WHILE           [ reduce using rule 76 (empty -> .) ]
  ! FOR             [ reduce using rule 76 (empty -> .) ]

    statement_list                 shift and go to state 181
    statement                      shift and go to state 38
    return_statement               shift and go to state 39
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 179

    (46) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE . statement_list RBRACE
    (48) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE . return_statement RBRACE
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement_list return_statement
    (24) statement_list -> . statement
    (25) statement_list -> . return_statement
    (26) statement_list -> . empty
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (76) empty -> .
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    RETURN          shift and go to state 48
    RBRACE          reduce using rule 76 (empty -> .)
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

  ! RETURN          [ reduce using rule 76 (empty -> .) ]
  ! ID              [ reduce using rule 76 (empty -> .) ]
  ! READ            [ reduce using rule 76 (empty -> .) ]
  ! WRITE           [ reduce using rule 76 (empty -> .) ]
  ! IF              [ reduce using rule 76 (empty -> .) ]
  ! WHILE           [ reduce using rule 76 (empty -> .) ]
  ! FOR             [ reduce using rule 76 (empty -> .) ]

    statement_list                 shift and go to state 182
    return_statement               shift and go to state 183
    statement                      shift and go to state 38
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 180

    (47) if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE . statement_list RBRACE
    (49) if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE . return_statement RBRACE
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement_list return_statement
    (24) statement_list -> . statement
    (25) statement_list -> . return_statement
    (26) statement_list -> . empty
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (76) empty -> .
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    RETURN          shift and go to state 48
    RBRACE          reduce using rule 76 (empty -> .)
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

  ! RETURN          [ reduce using rule 76 (empty -> .) ]
  ! ID              [ reduce using rule 76 (empty -> .) ]
  ! READ            [ reduce using rule 76 (empty -> .) ]
  ! WRITE           [ reduce using rule 76 (empty -> .) ]
  ! IF              [ reduce using rule 76 (empty -> .) ]
  ! WHILE           [ reduce using rule 76 (empty -> .) ]
  ! FOR             [ reduce using rule 76 (empty -> .) ]

    return_statement               shift and go to state 184
    statement_list                 shift and go to state 185
    statement                      shift and go to state 38
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 181

    (51) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list . RBRACE
    (22) statement_list -> statement_list . statement
    (23) statement_list -> statement_list . return_statement
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 186
    RETURN          shift and go to state 48
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

    statement                      shift and go to state 60
    return_statement               shift and go to state 61
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 182

    (46) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list . RBRACE
    (22) statement_list -> statement_list . statement
    (23) statement_list -> statement_list . return_statement
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 187
    RETURN          shift and go to state 48
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

    statement                      shift and go to state 60
    return_statement               shift and go to state 61
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 183

    (48) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement . RBRACE
    (25) statement_list -> return_statement .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 188
    RETURN          reduce using rule 25 (statement_list -> return_statement .)
    ID              reduce using rule 25 (statement_list -> return_statement .)
    READ            reduce using rule 25 (statement_list -> return_statement .)
    WRITE           reduce using rule 25 (statement_list -> return_statement .)
    IF              reduce using rule 25 (statement_list -> return_statement .)
    WHILE           reduce using rule 25 (statement_list -> return_statement .)
    FOR             reduce using rule 25 (statement_list -> return_statement .)

  ! RBRACE          [ reduce using rule 25 (statement_list -> return_statement .) ]


state 184

    (49) if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement . RBRACE
    (25) statement_list -> return_statement .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 189
    RETURN          reduce using rule 25 (statement_list -> return_statement .)
    ID              reduce using rule 25 (statement_list -> return_statement .)
    READ            reduce using rule 25 (statement_list -> return_statement .)
    WRITE           reduce using rule 25 (statement_list -> return_statement .)
    IF              reduce using rule 25 (statement_list -> return_statement .)
    WHILE           reduce using rule 25 (statement_list -> return_statement .)
    FOR             reduce using rule 25 (statement_list -> return_statement .)

  ! RBRACE          [ reduce using rule 25 (statement_list -> return_statement .) ]


state 185

    (47) if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list . RBRACE
    (22) statement_list -> statement_list . statement
    (23) statement_list -> statement_list . return_statement
    (27) statement -> . assignment SEMICOLON
    (28) statement -> . function_call SEMICOLON
    (29) statement -> . read_statement SEMICOLON
    (30) statement -> . write_statement SEMICOLON
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . for_statement
    (52) return_statement -> . RETURN LPAREN expression RPAREN SEMICOLON
    (34) assignment -> . ID ASSIGN expression
    (35) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (36) function_call -> . ID LPAREN arg_list RPAREN
    (39) read_statement -> . READ id_list
    (40) write_statement -> . WRITE LPAREN write_list RPAREN
    (44) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE
    (45) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE
    (46) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (47) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE
    (48) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE
    (49) if_statement -> . IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE
    (50) while_statement -> . WHILE LPAREN expression RPAREN DO LBRACE statement_list RBRACE
    (51) for_statement -> . FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE

    RBRACE          shift and go to state 190
    RETURN          shift and go to state 48
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    FOR             shift and go to state 54

    return_statement               shift and go to state 61
    statement                      shift and go to state 60
    assignment                     shift and go to state 41
    function_call                  shift and go to state 42
    read_statement                 shift and go to state 43
    write_statement                shift and go to state 44
    if_statement                   shift and go to state 45
    while_statement                shift and go to state 46
    for_statement                  shift and go to state 47

state 186

    (51) for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 51 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 51 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    ID              reduce using rule 51 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    READ            reduce using rule 51 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 51 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    IF              reduce using rule 51 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 51 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)
    FOR             reduce using rule 51 (for_statement -> FOR ID LBRACKET expression TO expression RBRACKET DO LBRACE statement_list RBRACE .)


state 187

    (46) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    ID              reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    READ            reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    IF              reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    FOR             reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)


state 188

    (48) if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE .

    RBRACE          reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE .)
    RETURN          reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE .)
    ID              reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE .)
    READ            reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE .)
    WRITE           reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE .)
    IF              reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE .)
    WHILE           reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE .)
    FOR             reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE statement_list RBRACE ELSE LBRACE return_statement RBRACE .)


state 189

    (49) if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE .

    RBRACE          reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE .)
    RETURN          reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE .)
    ID              reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE .)
    READ            reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE .)
    WRITE           reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE .)
    IF              reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE .)
    WHILE           reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE .)
    FOR             reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE return_statement RBRACE .)


state 190

    (47) if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE .)
    ID              reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE .)
    READ            reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE .)
    WRITE           reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE .)
    IF              reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE .)
    FOR             reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN LBRACE return_statement RBRACE ELSE LBRACE statement_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 8 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 34 resolved as shift
WARNING: shift/reduce conflict for ID in state 34 resolved as shift
WARNING: shift/reduce conflict for READ in state 34 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 34 resolved as shift
WARNING: shift/reduce conflict for IF in state 34 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 34 resolved as shift
WARNING: shift/reduce conflict for FOR in state 34 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 99 resolved as shift
WARNING: shift/reduce conflict for ID in state 99 resolved as shift
WARNING: shift/reduce conflict for READ in state 99 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 99 resolved as shift
WARNING: shift/reduce conflict for IF in state 99 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 99 resolved as shift
WARNING: shift/reduce conflict for FOR in state 99 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 102 resolved as shift
WARNING: shift/reduce conflict for ID in state 102 resolved as shift
WARNING: shift/reduce conflict for READ in state 102 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 102 resolved as shift
WARNING: shift/reduce conflict for IF in state 102 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 102 resolved as shift
WARNING: shift/reduce conflict for FOR in state 102 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 127 resolved as shift
WARNING: shift/reduce conflict for ID in state 127 resolved as shift
WARNING: shift/reduce conflict for READ in state 127 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 127 resolved as shift
WARNING: shift/reduce conflict for IF in state 127 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 127 resolved as shift
WARNING: shift/reduce conflict for FOR in state 127 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 130 resolved as shift
WARNING: shift/reduce conflict for ID in state 130 resolved as shift
WARNING: shift/reduce conflict for READ in state 130 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 130 resolved as shift
WARNING: shift/reduce conflict for IF in state 130 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 130 resolved as shift
WARNING: shift/reduce conflict for FOR in state 130 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 163 resolved as shift
WARNING: shift/reduce conflict for ID in state 163 resolved as shift
WARNING: shift/reduce conflict for READ in state 163 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 163 resolved as shift
WARNING: shift/reduce conflict for IF in state 163 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 163 resolved as shift
WARNING: shift/reduce conflict for FOR in state 163 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 164 resolved as shift
WARNING: shift/reduce conflict for ID in state 164 resolved as shift
WARNING: shift/reduce conflict for READ in state 164 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 164 resolved as shift
WARNING: shift/reduce conflict for IF in state 164 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 164 resolved as shift
WARNING: shift/reduce conflict for FOR in state 164 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 169 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 178 resolved as shift
WARNING: shift/reduce conflict for ID in state 178 resolved as shift
WARNING: shift/reduce conflict for READ in state 178 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 178 resolved as shift
WARNING: shift/reduce conflict for IF in state 178 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 178 resolved as shift
WARNING: shift/reduce conflict for FOR in state 178 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 179 resolved as shift
WARNING: shift/reduce conflict for ID in state 179 resolved as shift
WARNING: shift/reduce conflict for READ in state 179 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 179 resolved as shift
WARNING: shift/reduce conflict for IF in state 179 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 179 resolved as shift
WARNING: shift/reduce conflict for FOR in state 179 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 180 resolved as shift
WARNING: shift/reduce conflict for ID in state 180 resolved as shift
WARNING: shift/reduce conflict for READ in state 180 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 180 resolved as shift
WARNING: shift/reduce conflict for IF in state 180 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 180 resolved as shift
WARNING: shift/reduce conflict for FOR in state 180 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 183 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 184 resolved as shift
WARNING: reduce/reduce conflict in state 82 resolved using rule (expression -> function_call)
WARNING: rejected rule (term -> function_call) in state 82
WARNING: reduce/reduce conflict in state 82 resolved using rule (term -> function_call)
WARNING: rejected rule (factor -> function_call) in state 82
WARNING: reduce/reduce conflict in state 82 resolved using rule (expression -> function_call)
WARNING: rejected rule (factor -> function_call) in state 82
WARNING: reduce/reduce conflict in state 135 resolved using rule (term -> function_call)
WARNING: rejected rule (factor -> function_call) in state 135
